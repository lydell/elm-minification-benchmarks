(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.k.hK === region.i.hK)
	{
		return 'on line ' + region.k.hK;
	}
	return 'on lines ' + region.k.hK + ' through ' + region.i.hK;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.Y,
		impl.ac,
		impl.ab,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**/
	var node = args['node'];
	//*/
	/**_UNUSED/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		bg: func(record.bg),
		ew: record.ew,
		fQ: record.fQ
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.bg;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.ew;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.fQ) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.Y,
		impl.ac,
		impl.ab,
		function(sendToApp, initialModel) {
			var view = impl.eQ;
			/**/
			var domNode = args['node'];
			//*/
			/**_UNUSED/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.Y,
		impl.ac,
		impl.ab,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.eu && impl.eu(sendToApp)
			var view = impl.eQ;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.eV);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.aj) && (_VirtualDom_doc.title = title = doc.aj);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.is;
	var onUrlRequest = impl.it;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		eu: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.fT === next.fT
							&& curr.fk === next.fk
							&& curr.fO.a === next.fO.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		Y: function(flags)
		{
			return A3(impl.Y, flags, _Browser_getUrl(), key);
		},
		eQ: impl.eQ,
		ac: impl.ac,
		ab: impl.ab
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { ht: 'hidden', gK: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { ht: 'mozHidden', gK: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { ht: 'msHidden', gK: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { ht: 'webkitHidden', gK: 'webkitvisibilitychange' }
		: { ht: 'hidden', gK: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		f0: _Browser_getScene(),
		gk: {
			gn: _Browser_window.pageXOffset,
			go: _Browser_window.pageYOffset,
			aF: _Browser_doc.documentElement.clientWidth,
			ap: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		aF: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		ap: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			f0: {
				aF: node.scrollWidth,
				ap: node.scrollHeight
			},
			gk: {
				gn: node.scrollLeft,
				go: node.scrollTop,
				aF: node.clientWidth,
				ap: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			f0: _Browser_getScene(),
			gk: {
				gn: x,
				go: y,
				aF: _Browser_doc.documentElement.clientWidth,
				ap: _Browser_doc.documentElement.clientHeight
			},
			g9: {
				gn: x + rect.left,
				go: y + rect.top,
				aF: rect.width,
				ap: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}



// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.hc.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.hc.b, xhr)); });
		$elm$core$Maybe$isJust(request.gg) && _Http_track(router, xhr, request.gg.a);

		try {
			xhr.open(request.bX, request.jH, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.jH));
		}

		_Http_configureRequest(xhr, request);

		request.eV.a && xhr.setRequestHeader('Content-Type', request.eV.a);
		xhr.send(request.eV.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.fh; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.jx.a || 0;
	xhr.responseType = request.hc.d;
	xhr.withCredentials = request.gs;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		jH: xhr.responseURL,
		jm: xhr.status,
		jn: xhr.statusText,
		fh: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			ja: event.loaded,
			l: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			iP: event.loaded,
			l: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}

// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.h3) { flags += 'm'; }
	if (options.gI) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;




// VIRTUAL-DOM WIDGETS


var _Markdown_toHtml = F3(function(options, factList, rawMarkdown)
{
	return _VirtualDom_custom(
		factList,
		{
			a: options,
			b: rawMarkdown
		},
		_Markdown_render,
		_Markdown_diff
	);
});



// WIDGET IMPLEMENTATION


function _Markdown_render(model)
{
	return A2(_Markdown_replace, model, _VirtualDom_doc.createElement('div'));
}


function _Markdown_diff(x, y)
{
	return x.b === y.b && x.a === y.a
		? false
		: _Markdown_replace(y);
}


var _Markdown_replace = F2(function(model, div)
{
	div.innerHTML = _Markdown_marked(model.b, _Markdown_formatOptions(model.a));
	return div;
});



// ACTUAL MARKDOWN PARSER


var _Markdown_marked = function() {
	// catch the `marked` object regardless of the outer environment.
	// (ex. a CommonJS module compatible environment.)
	// note that this depends on marked's implementation of environment detection.
	var module = {};
	var exports = module.exports = {};

	/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 * commit cd2f6f5b7091154c5526e79b5f3bfb4d15995a51
	 */
	(function(){var block={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:noop,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:noop,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:noop,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};block.bullet=/(?:[*+-]|\d+\.)/;block.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;block.item=replace(block.item,"gm")(/bull/g,block.bullet)();block.list=replace(block.list)(/bull/g,block.bullet)("hr","\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def","\\n+(?="+block.def.source+")")();block.blockquote=replace(block.blockquote)("def",block.def)();block._tag="(?!(?:"+"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code"+"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo"+"|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b";block.html=replace(block.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,block._tag)();block.paragraph=replace(block.paragraph)("hr",block.hr)("heading",block.heading)("lheading",block.lheading)("blockquote",block.blockquote)("tag","<"+block._tag)("def",block.def)();block.normal=merge({},block);block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/});block.gfm.paragraph=replace(block.paragraph)("(?!","(?!"+block.gfm.fences.source.replace("\\1","\\2")+"|"+block.list.source.replace("\\1","\\3")+"|")();block.tables=merge({},block.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}Lexer.rules=block;Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};Lexer.prototype.lex=function(src){src=src.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n");return this.token(src,true)};Lexer.prototype.token=function(src,top,bq){var src=src.replace(/^ +$/gm,""),next,loose,cap,bull,b,item,space,i,l;while(src){if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(cap[0].length>1){this.tokens.push({type:"space"})}}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,"");this.tokens.push({type:"code",text:!this.options.pedantic?cap.replace(/\n+$/,""):cap});continue}if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"code",lang:cap[2],text:cap[3]||""});continue}if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[1].length,text:cap[2]});continue}if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\| */)}this.tokens.push(item);continue}if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[2]==="="?1:2,text:cap[1]});continue}if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"hr"});continue}if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"blockquote_start"});cap=cap[0].replace(/^ *> ?/gm,"");this.token(cap,top,true);this.tokens.push({type:"blockquote_end"});continue}if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];this.tokens.push({type:"list_start",ordered:bull.length>1});cap=cap[0].match(this.rules.item);next=false;l=cap.length;i=0;for(;i<l;i++){item=cap[i];space=item.length;item=item.replace(/^ *([*+-]|\d+\.) +/,"");if(~item.indexOf("\n ")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp("^ {1,"+space+"}","gm"),""):item.replace(/^ {1,4}/gm,"")}if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(bull.length>1&&b.length>1)){src=cap.slice(i+1).join("\n")+src;i=l-1}}loose=next||/\n\n(?!\s*$)/.test(item);if(i!==l-1){next=item.charAt(item.length-1)==="\n";if(!loose)loose=next}this.tokens.push({type:loose?"loose_item_start":"list_item_start"});this.token(item,false,bq);this.tokens.push({type:"list_item_end"})}this.tokens.push({type:"list_end"});continue}if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&(cap[1]==="pre"||cap[1]==="script"||cap[1]==="style"),text:cap[0]});continue}if(!bq&&top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);this.tokens.links[cap[1].toLowerCase()]={href:cap[2],title:cap[3]};continue}if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/(?: *\| *)?\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */)}this.tokens.push(item);continue}if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:"paragraph",text:cap[1].charAt(cap[1].length-1)==="\n"?cap[1].slice(0,-1):cap[1]});continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"text",text:cap[0]});continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return this.tokens};var inline={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:noop,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^_\_([\s\S]+?)_\_(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:[^_]|_\_)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:noop,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};inline._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;inline._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;inline.link=replace(inline.link)("inside",inline._inside)("href",inline._href)();inline.reflink=replace(inline.reflink)("inside",inline._inside)();inline.normal=merge({},inline);inline.pedantic=merge({},inline.normal,{strong:/^_\_(?=\S)([\s\S]*?\S)_\_(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});inline.gfm=merge({},inline.normal,{escape:replace(inline.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:replace(inline.text)("]|","~]|")("|","|https?://|")()});inline.breaks=merge({},inline.gfm,{br:replace(inline.br)("{2,}","*")(),text:replace(inline.gfm.text)("{2,}","*")()});function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error("Tokens array requires a `links` property.")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}InlineLexer.rules=inline;InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};InlineLexer.prototype.output=function(src){var out="",link,text,href,cap;while(src){if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if(cap[2]==="@"){text=cap[1].charAt(6)===":"?this.mangle(cap[1].substring(7)):this.mangle(cap[1]);href=this.mangle("mailto:")+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}if(!this.inLink&&(cap=this.rules.url.exec(src))){src=src.substring(cap[0].length);text=escape(cap[1]);href=text;out+=this.renderer.link(href,null,text);continue}if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=true}else if(this.inLink&&/^<\/a>/i.test(cap[0])){this.inLink=false}src=src.substring(cap[0].length);out+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(cap[0]):escape(cap[0]):cap[0];continue}if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=true;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=false;continue}if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\s+/g," ");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=true;out+=this.outputLink(cap,link);this.inLink=false;continue}if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2],true));continue}if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.text(escape(this.smartypants(cap[0])));continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return out};InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return cap[0].charAt(0)!=="!"?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")};InlineLexer.prototype.mangle=function(text){if(!this.options.mangle)return text;var out="",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(Math.random()>.5){ch="x"+ch.toString(16)}out+="&#"+ch+";"}return out};function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(out!=null&&out!==code){escaped=true;code=out}}if(!lang){return"<pre><code>"+(escaped?code:escape(code,true))+"\n</code></pre>"}return'<pre><code class="'+this.options.langPrefix+escape(lang,true)+'">'+(escaped?code:escape(code,true))+"\n</code></pre>\n"};Renderer.prototype.blockquote=function(quote){return"<blockquote>\n"+quote+"</blockquote>\n"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return"<h"+level+' id="'+this.options.headerPrefix+raw.toLowerCase().replace(/[^\w]+/g,"-")+'">'+text+"</h"+level+">\n"};Renderer.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"};Renderer.prototype.list=function(body,ordered){var type=ordered?"ol":"ul";return"<"+type+">\n"+body+"</"+type+">\n"};Renderer.prototype.listitem=function(text){return"<li>"+text+"</li>\n"};Renderer.prototype.paragraph=function(text){return"<p>"+text+"</p>\n"};Renderer.prototype.table=function(header,body){return"<table>\n"+"<thead>\n"+header+"</thead>\n"+"<tbody>\n"+body+"</tbody>\n"+"</table>\n"};Renderer.prototype.tablerow=function(content){return"<tr>\n"+content+"</tr>\n"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?"th":"td";var tag=flags.align?"<"+type+' style="text-align:'+flags.align+'">':"<"+type+">";return tag+content+"</"+type+">\n"};Renderer.prototype.strong=function(text){return"<strong>"+text+"</strong>"};Renderer.prototype.em=function(text){return"<em>"+text+"</em>"};Renderer.prototype.codespan=function(text){return"<code>"+text+"</code>"};Renderer.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"};Renderer.prototype.del=function(text){return"<del>"+text+"</del>"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return""}if(prot.indexOf("javascript:")===0||prot.indexOf("vbscript:")===0||prot.indexOf("data:")===0){return""}}var out='<a href="'+href+'"';if(title){out+=' title="'+title+'"'}out+=">"+text+"</a>";return out};Renderer.prototype.image=function(href,title,text){var out='<img src="'+href+'" alt="'+text+'"';if(title){out+=' title="'+title+'"'}out+=this.options.xhtml?"/>":">";return out};Renderer.prototype.text=function(text){return text};function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}Parser.parse=function(src,options,renderer){var parser=new Parser(options,renderer);return parser.parse(src)};Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options,this.renderer);this.tokens=src.reverse();var out="";while(this.next()){out+=this.tok()}return out};Parser.prototype.next=function(){return this.token=this.tokens.pop()};Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};Parser.prototype.parseText=function(){var body=this.token.text;while(this.peek().type==="text"){body+="\n"+this.next().text}return this.inline.output(body)};Parser.prototype.tok=function(){switch(this.token.type){case"space":{return""}case"hr":{return this.renderer.hr()}case"heading":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text)}case"code":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case"table":{var header="",body="",i,row,cell,flags,j;cell="";for(i=0;i<this.token.header.length;i++){flags={header:true,align:this.token.align[i]};cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:true,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell="";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:false,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case"blockquote_start":{var body="";while(this.next().type!=="blockquote_end"){body+=this.tok()}return this.renderer.blockquote(body)}case"list_start":{var body="",ordered=this.token.ordered;while(this.next().type!=="list_end"){body+=this.tok()}return this.renderer.list(body,ordered)}case"list_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.token.type==="text"?this.parseText():this.tok()}return this.renderer.listitem(body)}case"loose_item_start":{var body="";while(this.next().type!=="list_item_end"){body+=this.tok()}return this.renderer.listitem(body)}case"html":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case"paragraph":{return this.renderer.paragraph(this.inline.output(this.token.text))}case"text":{return this.renderer.paragraph(this.parseText())}}};function escape(html,encode){return html.replace(!encode?/&(?!#?\w+;)/g:/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function unescape(html){return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g,function(_,n){n=n.toLowerCase();if(n==="colon")return":";if(n.charAt(0)==="#"){return n.charAt(1)==="x"?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return""})}function replace(regex,opt){regex=regex.source;opt=opt||"";return function self(name,val){if(!name)return new RegExp(regex,opt);val=val.source||val;val=val.replace(/(^|[^\[])\^/g,"$1");regex=regex.replace(name,val);return self}}function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}function marked(src,opt,callback){if(callback||typeof opt==="function"){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||highlight.length<3){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if(token.type!=="code"){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(code==null||code===token.text){return--pending||done()}token.text=code;token.escaped=true;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+="\nPlease report this to https://github.com/chjj/marked.";if((opt||marked.defaults).silent){return"<p>An error occured:</p><pre>"+escape(e.message+"",true)+"</pre>"}throw e}}marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:true,tables:true,breaks:false,pedantic:false,sanitize:false,sanitizer:null,mangle:true,smartLists:false,silent:false,highlight:null,langPrefix:"lang-",smartypants:false,headerPrefix:"",renderer:new Renderer,xhtml:false};marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if(typeof module!=="undefined"&&typeof exports==="object"){module.exports=marked}else if(typeof define==="function"&&define.amd){define(function(){return marked})}else{this.marked=marked}}).call(function(){return this||(typeof window!=="undefined"?window:global)}());

	return module.exports;
}();


// FORMAT OPTIONS FOR MARKED IMPLEMENTATION

function _Markdown_formatOptions(options)
{
	function toHighlight(code, lang)
	{
		if (!lang && $elm$core$Maybe$isJust(options.e3))
		{
			lang = options.e3.a;
		}

		if (typeof hljs !== 'undefined' && lang && hljs.listLanguages().indexOf(lang) >= 0)
		{
			return hljs.highlight(lang, code, true).value;
		}

		return code;
	}

	var gfm = options.fd.a;

	return {
		highlight: toHighlight,
		gfm: gfm,
		tables: gfm && gfm.jr,
		breaks: gfm && gfm.gH,
		sanitize: options.ep,
		smartypants: options.f5
	};
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}
var $author$project$Main$ChangedUrl = function (a) {
	return {$: 0, a: a};
};
var $author$project$Main$ClickedLink = function (a) {
	return {$: 1, a: a};
};
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Maybe$Nothing = {$: 1};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.v) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.gc),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.gc);
		} else {
			var treeLen = builder.v * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.y) : builder.y;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.v);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.gc) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.gc);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{y: nodeList, v: (len / $elm$core$Array$branchFactor) | 0, gc: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
var $elm$url$Url$Http = 0;
var $elm$url$Url$Https = 1;
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {hl: fragment, fk: host, fM: path, fO: port_, fT: protocol, fU: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		0,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		1,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = $elm$core$Basics$identity;
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return 0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0;
		return A2($elm$core$Task$map, tagger, task);
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			A2($elm$core$Task$map, toMessage, task));
	});
var $elm$browser$Browser$application = _Browser_application;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$Main$Model = F4(
	function (url, key, shared, page) {
		return {bU: key, iA: page, ai: shared, jH: url};
	});
var $author$project$Main$Page = function (a) {
	return {$: 3, a: a};
};
var $author$project$Main$Shared = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Tuple$mapBoth = F3(
	function (funcA, funcB, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			funcA(x),
			funcB(y));
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $ryannhg$elm_spa$ElmSpa$Request$query = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Dict$empty;
	} else {
		var decode = function (val) {
			return A2(
				$elm$core$Maybe$withDefault,
				val,
				$elm$url$Url$percentDecode(val));
		};
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				A2($elm$core$Tuple$mapBoth, decode, decode),
				A2(
					$elm$core$List$filterMap,
					A2(
						$elm$core$Basics$composeR,
						$elm$core$String$split('='),
						function (eq) {
							return A3(
								$elm$core$Maybe$map2,
								$elm$core$Tuple$pair,
								$elm$core$List$head(eq),
								$elm$core$Maybe$Just(
									A2(
										$elm$core$Maybe$withDefault,
										'',
										$elm$core$List$head(
											A2($elm$core$List$drop, 1, eq)))));
						}),
					A2($elm$core$String$split, '&', str))));
	}
};
var $ryannhg$elm_spa$ElmSpa$Request$create = F4(
	function (route, params, url, key) {
		return {
			bU: key,
			iB: params,
			fU: A2(
				$elm$core$Maybe$withDefault,
				$elm$core$Dict$empty,
				A2($elm$core$Maybe$map, $ryannhg$elm_spa$ElmSpa$Request$query, url.fU)),
			i0: route,
			jH: url
		};
	});
var $author$project$Gen$Route$NotFound = {$: 3};
var $elm$url$Url$Parser$Parser = $elm$core$Basics$identity;
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$url$Url$Parser$oneOf = function (parsers) {
	return function (state) {
		return A2(
			$elm$core$List$concatMap,
			function (_v0) {
				var parser = _v0;
				return parser(state);
			},
			parsers);
	};
};
var $elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {aJ: frag, iB: params, aE: unvisited, eP: value, aX: visited};
	});
var $elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _v1 = state.aE;
			if (!_v1.b) {
				return $elm$core$Maybe$Just(state.eP);
			} else {
				if ((_v1.a === '') && (!_v1.b.b)) {
					return $elm$core$Maybe$Just(state.eP);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var $elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				$elm$core$List$cons,
				segment,
				$elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var $elm$url$Url$Parser$preparePath = function (path) {
	var _v0 = A2($elm$core$String$split, '/', path);
	if (_v0.b && (_v0.a === '')) {
		var segments = _v0.b;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _v0;
		return $elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var $elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 1) {
			return $elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return $elm$core$Maybe$Just(
				A2($elm$core$List$cons, value, list));
		}
	});
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _v0 = A2($elm$core$String$split, '=', segment);
		if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
			var rawKey = _v0.a;
			var _v1 = _v0.b;
			var rawValue = _v1.a;
			var _v2 = $elm$url$Url$percentDecode(rawKey);
			if (_v2.$ === 1) {
				return dict;
			} else {
				var key = _v2.a;
				var _v3 = $elm$url$Url$percentDecode(rawValue);
				if (_v3.$ === 1) {
					return dict;
				} else {
					var value = _v3.a;
					return A3(
						$elm$core$Dict$update,
						key,
						$elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var $elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 1) {
		return $elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			$elm$core$List$foldr,
			$elm$url$Url$Parser$addParam,
			$elm$core$Dict$empty,
			A2($elm$core$String$split, '&', qry));
	}
};
var $elm$url$Url$Parser$parse = F2(
	function (_v0, url) {
		var parser = _v0;
		return $elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					$elm$url$Url$Parser$State,
					_List_Nil,
					$elm$url$Url$Parser$preparePath(url.fM),
					$elm$url$Url$Parser$prepareQuery(url.fU),
					url.hl,
					$elm$core$Basics$identity)));
	});
var $author$project$Gen$Route$Blog = {$: 0};
var $author$project$Gen$Route$Blog__Slug_ = function (a) {
	return {$: 6, a: a};
};
var $author$project$Gen$Route$Embed = {$: 1};
var $author$project$Gen$Route$Home_ = {$: 2};
var $author$project$Gen$Route$Projects = {$: 4};
var $author$project$Gen$Route$Projects__Id_ = function (a) {
	return {$: 7, a: a};
};
var $author$project$Gen$Route$Projects__New = {$: 8};
var $author$project$Gen$Route$PwaStart = {$: 5};
var $elm$url$Url$Parser$mapState = F2(
	function (func, _v0) {
		var visited = _v0.aX;
		var unvisited = _v0.aE;
		var params = _v0.iB;
		var frag = _v0.aJ;
		var value = _v0.eP;
		return A5(
			$elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var $elm$url$Url$Parser$map = F2(
	function (subValue, _v0) {
		var parseArg = _v0;
		return function (_v1) {
			var visited = _v1.aX;
			var unvisited = _v1.aE;
			var params = _v1.iB;
			var frag = _v1.aJ;
			var value = _v1.eP;
			return A2(
				$elm$core$List$map,
				$elm$url$Url$Parser$mapState(value),
				parseArg(
					A5($elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
		};
	});
var $elm$url$Url$Parser$s = function (str) {
	return function (_v0) {
		var visited = _v0.aX;
		var unvisited = _v0.aE;
		var params = _v0.iB;
		var frag = _v0.aJ;
		var value = _v0.eP;
		if (!unvisited.b) {
			return _List_Nil;
		} else {
			var next = unvisited.a;
			var rest = unvisited.b;
			return _Utils_eq(next, str) ? _List_fromArray(
				[
					A5(
					$elm$url$Url$Parser$State,
					A2($elm$core$List$cons, next, visited),
					rest,
					params,
					frag,
					value)
				]) : _List_Nil;
		}
	};
};
var $author$project$Gen$Params$Blog$parser = $elm$url$Url$Parser$s('blog');
var $author$project$Gen$Params$Blog$Slug_$Params = function (slug) {
	return {cb: slug};
};
var $elm$url$Url$Parser$slash = F2(
	function (_v0, _v1) {
		var parseBefore = _v0;
		var parseAfter = _v1;
		return function (state) {
			return A2(
				$elm$core$List$concatMap,
				parseAfter,
				parseBefore(state));
		};
	});
var $elm$url$Url$Parser$custom = F2(
	function (tipe, stringToSomething) {
		return function (_v0) {
			var visited = _v0.aX;
			var unvisited = _v0.aE;
			var params = _v0.iB;
			var frag = _v0.aJ;
			var value = _v0.eP;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				var _v2 = stringToSomething(next);
				if (!_v2.$) {
					var nextValue = _v2.a;
					return _List_fromArray(
						[
							A5(
							$elm$url$Url$Parser$State,
							A2($elm$core$List$cons, next, visited),
							rest,
							params,
							frag,
							value(nextValue))
						]);
				} else {
					return _List_Nil;
				}
			}
		};
	});
var $elm$url$Url$Parser$string = A2($elm$url$Url$Parser$custom, 'STRING', $elm$core$Maybe$Just);
var $author$project$Gen$Params$Blog$Slug_$parser = A2(
	$elm$url$Url$Parser$map,
	$author$project$Gen$Params$Blog$Slug_$Params,
	A2(
		$elm$url$Url$Parser$slash,
		$elm$url$Url$Parser$s('blog'),
		$elm$url$Url$Parser$string));
var $author$project$Gen$Params$Embed$parser = $elm$url$Url$Parser$s('embed');
var $elm$url$Url$Parser$top = function (state) {
	return _List_fromArray(
		[state]);
};
var $author$project$Gen$Params$Home_$parser = $elm$url$Url$Parser$top;
var $author$project$Gen$Params$NotFound$parser = $elm$url$Url$Parser$s('not-found');
var $author$project$Gen$Params$Projects$parser = $elm$url$Url$Parser$s('projects');
var $author$project$Gen$Params$Projects$Id_$Params = function (id) {
	return {t: id};
};
var $author$project$Gen$Params$Projects$Id_$parser = A2(
	$elm$url$Url$Parser$map,
	$author$project$Gen$Params$Projects$Id_$Params,
	A2(
		$elm$url$Url$Parser$slash,
		$elm$url$Url$Parser$s('projects'),
		$elm$url$Url$Parser$string));
var $author$project$Gen$Params$Projects$New$parser = A2(
	$elm$url$Url$Parser$slash,
	$elm$url$Url$Parser$s('projects'),
	$elm$url$Url$Parser$s('new'));
var $author$project$Gen$Params$PwaStart$parser = $elm$url$Url$Parser$s('pwa-start');
var $author$project$Gen$Route$routes = _List_fromArray(
	[
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Home_, $author$project$Gen$Params$Home_$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Blog, $author$project$Gen$Params$Blog$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Embed, $author$project$Gen$Params$Embed$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$NotFound, $author$project$Gen$Params$NotFound$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Projects, $author$project$Gen$Params$Projects$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$PwaStart, $author$project$Gen$Params$PwaStart$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Projects__New, $author$project$Gen$Params$Projects$New$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Projects__Id_, $author$project$Gen$Params$Projects$Id_$parser),
		A2($elm$url$Url$Parser$map, $author$project$Gen$Route$Blog__Slug_, $author$project$Gen$Params$Blog$Slug_$parser)
	]);
var $author$project$Gen$Route$fromUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$Parser$parse(
		$elm$url$Url$Parser$oneOf($author$project$Gen$Route$routes)),
	$elm$core$Maybe$withDefault($author$project$Gen$Route$NotFound));
var $author$project$Request$create = F3(
	function (params, url, key) {
		return A4(
			$ryannhg$elm_spa$ElmSpa$Request$create,
			$author$project$Gen$Route$fromUrl(url),
			params,
			url,
			key);
	});
var $author$project$Gen$Model$Blog = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Gen$Msg$Blog = function (a) {
	return {$: 0, a: a};
};
var $author$project$Gen$Model$Blog__Slug_ = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$Gen$Msg$Blog__Slug_ = function (a) {
	return {$: 6, a: a};
};
var $author$project$Gen$Model$Embed = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Gen$Msg$Embed = function (a) {
	return {$: 1, a: a};
};
var $author$project$Gen$Model$Home_ = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$Gen$Msg$Home_ = function (a) {
	return {$: 2, a: a};
};
var $author$project$Gen$Model$NotFound = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$Gen$Msg$NotFound = function (a) {
	return {$: 3, a: a};
};
var $author$project$Gen$Model$Projects = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$Gen$Msg$Projects = function (a) {
	return {$: 4, a: a};
};
var $author$project$Gen$Model$Projects__Id_ = F2(
	function (a, b) {
		return {$: 8, a: a, b: b};
	});
var $author$project$Gen$Msg$Projects__Id_ = function (a) {
	return {$: 7, a: a};
};
var $author$project$Gen$Model$Projects__New = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $author$project$Gen$Msg$Projects__New = function (a) {
	return {$: 8, a: a};
};
var $author$project$Gen$Model$PwaStart = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$Gen$Msg$PwaStart = function (a) {
	return {$: 5, a: a};
};
var $author$project$Gen$Model$Redirecting_ = {$: 0};
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $elm$browser$Browser$Navigation$replaceUrl = _Browser_replaceUrl;
var $ryannhg$elm_spa$ElmSpa$Page$toResult = F3(
	function (toPage, shared, req) {
		var _v0 = A2(toPage, shared, req);
		var toResult_ = _v0;
		return A2(
			toResult_,
			shared,
			A4($ryannhg$elm_spa$ElmSpa$Request$create, req.i0, 0, req.jH, req.bU));
	});
var $ryannhg$elm_spa$ElmSpa$Page$bundle = function (_v0) {
	var redirecting = _v0.iQ;
	var toRoute = _v0.jC;
	var toUrl = _v0.jD;
	var fromCmd = _v0.ho;
	var mapEffect = _v0.hQ;
	var mapView = _v0.hR;
	var page = _v0.iA;
	var toModel = _v0.jA;
	var toMsg = _v0.jB;
	return {
		Y: F4(
			function (params, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v1 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (!_v1.$) {
					var record = _v1.a;
					return A3(
						$elm$core$Tuple$mapBoth,
						toModel(req.iB),
						mapEffect,
						record.Y(0));
				} else {
					var route = _v1.a;
					return _Utils_Tuple2(
						redirecting.h$,
						fromCmd(
							A2(
								$elm$browser$Browser$Navigation$replaceUrl,
								req.bU,
								toUrl(route))));
				}
			}),
		ab: F5(
			function (params, model, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v2 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (!_v2.$) {
					var record = _v2.a;
					return A2(
						$elm$core$Platform$Sub$map,
						toMsg,
						record.ab(model));
				} else {
					return $elm$core$Platform$Sub$none;
				}
			}),
		ac: F6(
			function (params, msg, model, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v3 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (!_v3.$) {
					var record = _v3.a;
					return A3(
						$elm$core$Tuple$mapBoth,
						toModel(req.iB),
						mapEffect,
						A2(record.ac, msg, model));
				} else {
					var route = _v3.a;
					return _Utils_Tuple2(
						redirecting.h$,
						fromCmd(
							A2(
								$elm$browser$Browser$Navigation$replaceUrl,
								req.bU,
								toUrl(route))));
				}
			}),
		eQ: F5(
			function (params, model, shared, url, key) {
				var req = A4(
					$ryannhg$elm_spa$ElmSpa$Request$create,
					toRoute(url),
					params,
					url,
					key);
				var _v4 = A3($ryannhg$elm_spa$ElmSpa$Page$toResult, page, shared, req);
				if (!_v4.$) {
					var record = _v4.a;
					return mapView(
						record.eQ(model));
				} else {
					return redirecting.eQ;
				}
			})
	};
};
var $author$project$Effect$Cmd = function (a) {
	return {$: 1, a: a};
};
var $author$project$Effect$fromCmd = $author$project$Effect$Cmd;
var $author$project$Effect$Batch = function (a) {
	return {$: 3, a: a};
};
var $author$project$Effect$None = {$: 0};
var $author$project$Effect$Shared = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Platform$Cmd$map = _Platform_map;
var $author$project$Effect$map = F2(
	function (fn, effect) {
		switch (effect.$) {
			case 0:
				return $author$project$Effect$None;
			case 1:
				var cmd = effect.a;
				return $author$project$Effect$Cmd(
					A2($elm$core$Platform$Cmd$map, fn, cmd));
			case 2:
				var msg = effect.a;
				return $author$project$Effect$Shared(msg);
			default:
				var list = effect.a;
				return $author$project$Effect$Batch(
					A2(
						$elm$core$List$map,
						$author$project$Effect$map(fn),
						list));
		}
	});
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $author$project$View$map = F2(
	function (fn, view) {
		return {
			eV: A2(
				$elm$core$List$map,
				$elm$html$Html$map(fn),
				view.eV),
			aj: view.aj
		};
	});
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$View$placeholder = function (str) {
	return {
		eV: _List_fromArray(
			[
				$elm$html$Html$text(str)
			]),
		aj: str
	};
};
var $author$project$View$none = $author$project$View$placeholder('');
var $author$project$Gen$Route$toHref = function (route) {
	var joinAsHref = function (segments) {
		return '/' + A2($elm$core$String$join, '/', segments);
	};
	switch (route.$) {
		case 0:
			return joinAsHref(
				_List_fromArray(
					['blog']));
		case 1:
			return joinAsHref(
				_List_fromArray(
					['embed']));
		case 2:
			return joinAsHref(_List_Nil);
		case 3:
			return joinAsHref(
				_List_fromArray(
					['not-found']));
		case 4:
			return joinAsHref(
				_List_fromArray(
					['projects']));
		case 5:
			return joinAsHref(
				_List_fromArray(
					['pwa-start']));
		case 6:
			var params = route.a;
			return joinAsHref(
				_List_fromArray(
					['blog', params.cb]));
		case 7:
			var params = route.a;
			return joinAsHref(
				_List_fromArray(
					['projects', params.t]));
		default:
			return joinAsHref(
				_List_fromArray(
					['projects', 'new']));
	}
};
var $author$project$Gen$Pages$bundle = F3(
	function (page, toModel, toMsg) {
		return $ryannhg$elm_spa$ElmSpa$Page$bundle(
			{
				ho: $author$project$Effect$fromCmd,
				hQ: $author$project$Effect$map(toMsg),
				hR: $author$project$View$map(toMsg),
				iA: page,
				iQ: {h$: $author$project$Gen$Model$Redirecting_, eQ: $author$project$View$none},
				jA: toModel,
				jB: toMsg,
				jC: $author$project$Gen$Route$fromUrl,
				jD: $author$project$Gen$Route$toHref
			});
	});
var $ryannhg$elm_spa$ElmSpa$Page$Page = $elm$core$Basics$identity;
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $ryannhg$elm_spa$ElmSpa$Page$adapters = {
	cp: function (page) {
		return {
			Y: $elm$core$Basics$always(page.Y),
			ab: page.ab,
			ac: page.ac,
			eQ: page.eQ
		};
	},
	g9: F2(
		function (fromCmd, page) {
			return {
				Y: function (_v0) {
					return A2($elm$core$Tuple$mapSecond, fromCmd, page.Y);
				},
				ab: page.ab,
				ac: F2(
					function (msg, model) {
						return A2(
							$elm$core$Tuple$mapSecond,
							fromCmd,
							A2(page.ac, msg, model));
					}),
				eQ: page.eQ
			};
		}),
	c7: F2(
		function (none, page) {
			return {
				Y: function (_v1) {
					return _Utils_Tuple2(page.Y, none);
				},
				ab: function (_v2) {
					return $elm$core$Platform$Sub$none;
				},
				ac: F2(
					function (msg, model) {
						return _Utils_Tuple2(
							A2(page.ac, msg, model),
							none);
					}),
				eQ: page.eQ
			};
		}),
	df: F2(
		function (none, page) {
			return {
				Y: function (_v3) {
					return _Utils_Tuple2(0, none);
				},
				ab: function (_v4) {
					return $elm$core$Platform$Sub$none;
				},
				ac: F2(
					function (_v5, _v6) {
						return _Utils_Tuple2(0, none);
					}),
				eQ: function (_v7) {
					return page.eQ;
				}
			};
		})
};
var $ryannhg$elm_spa$ElmSpa$Page$element = F2(
	function (fromCmd, page) {
		return F2(
			function (_v0, _v1) {
				return $elm$core$Result$Ok(
					A2($ryannhg$elm_spa$ElmSpa$Page$adapters.g9, fromCmd, page));
			});
	});
var $author$project$Page$element = $ryannhg$elm_spa$ElmSpa$Page$element($author$project$Effect$fromCmd);
var $author$project$Pages$Blog$GotArticle = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Conf$blogPosts = _List_fromArray(
	['the-story-behind-azimutt', 'how-to-explore-your-database-schema-with-azimutt', 'why-you-should-avoid-tables-with-many-columns-and-how-to-fix-them']);
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$ExpectingEnd = {$: 10};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {e_: col, gX: contextStack, iK: problem, i2: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.i2, s.e_, x, s.h));
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return function (s) {
		return _Utils_eq(
			$elm$core$String$length(s.de),
			s.e) ? A3($elm$parser$Parser$Advanced$Good, false, 0, s) : A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.de);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.e, offset) < 0,
					0,
					{e_: col, h: s0.h, j: s0.j, e: offset, i2: row, de: s0.de});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.e, s.i2, s.e_, s);
	};
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					A2(
						func,
						A3($elm$core$String$slice, s0.e, s1.e, s0.de),
						a),
					s1);
			}
		};
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$Problem = function (a) {
	return {$: 12, a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return function (s) {
		return A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$core$Basics$round = _Basics_round;
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$core$String$toFloat = _String_toFloat;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(
	$elm$parser$Parser$andThen,
	function (str) {
		if ($elm$core$String$length(str) <= 9) {
			var _v0 = $elm$core$String$toFloat('0.' + str);
			if (!_v0.$) {
				var floatVal = _v0.a;
				return $elm$parser$Parser$succeed(
					$elm$core$Basics$round(floatVal * 1000));
			} else {
				return $elm$parser$Parser$problem('Invalid float: \"' + (str + '\"'));
			}
		} else {
			return $elm$parser$Parser$problem(
				'Expected at most 9 digits, but got ' + $elm$core$String$fromInt(
					$elm$core$String$length(str)));
		}
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($elm$core$Char$isDigit)));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(
	function (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {
		return $elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$core$String$append = _String_append;
var $elm$parser$Parser$UnexpectedChar = {$: 11};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return function (s) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.e, s.de);
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{e_: 1, h: s.h, j: s.j, e: s.e + 1, i2: s.i2 + 1, de: s.de}) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{e_: s.e_ + 1, h: s.h, j: s.j, e: newOffset, i2: s.i2, de: s.de}));
		};
	});
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (!step.$) {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {
	var helper = function (str) {
		if (_Utils_eq(
			$elm$core$String$length(str),
			quantity)) {
			var _v0 = $elm$core$String$toInt(str);
			if (!_v0.$) {
				var intVal = _v0.a;
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$Done,
					$elm$parser$Parser$succeed(intVal));
			} else {
				return $elm$parser$Parser$problem('Invalid integer: \"' + (str + '\"'));
			}
		} else {
			return A2(
				$elm$parser$Parser$map,
				function (nextChar) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$String$append, str, nextChar));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
		}
	};
	return A2($elm$parser$Parser$loop, '', helper);
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 8, a: a};
};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$core$Basics$not = _Basics_not;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.e, s.i2, s.e_, s.de);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{e_: newCol, h: s.h, j: s.j, e: newOffset, i2: newRow, de: s.de});
	};
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {
	return $elm$parser$Parser$problem(
		'Invalid day: ' + $elm$core$String$fromInt(day));
};
var $elm$core$Basics$modBy = _Basics_modBy;
var $elm$core$Basics$neq = _Utils_notEqual;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 4, year)) && ((!(!A2($elm$core$Basics$modBy, 100, year))) || (!A2($elm$core$Basics$modBy, 400, year)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {
	var y = y1 - 1;
	return (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_v0) {
	var year = _v0.a;
	var month = _v0.b;
	var dayInMonth = _v0.c;
	if (dayInMonth < 0) {
		return $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);
	} else {
		var succeedWith = function (extraMs) {
			var yearMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);
			var days = ((month < 3) || (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;
			var dayMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + ($rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore($rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));
			return $elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);
		};
		switch (month) {
			case 1:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);
			case 2:
				return ((dayInMonth > 29) || ((dayInMonth === 29) && (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);
			case 3:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);
			case 4:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);
			case 5:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);
			case 6:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);
			case 7:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);
			case 8:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);
			case 9:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);
			case 10:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);
			case 11:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);
			case 12:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);
			default:
				return $elm$parser$Parser$problem(
					'Invalid month: \"' + ($elm$core$String$fromInt(month) + '\"'));
		}
	}
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(
	$elm$parser$Parser$andThen,
	$rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F3(
						function (year, month, day) {
							return _Utils_Tuple3(year, month, day);
						})),
				$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$symbol('-')),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
					]))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$symbol('-')),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
				]))));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {
	var utcOffsetMinutesFromParts = F3(
		function (multiplier, hours, minutes) {
			return (multiplier * (hours * 60)) + minutes;
		});
	return A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return 0;
					},
					$elm$parser$Parser$symbol('Z')),
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(utcOffsetMinutesFromParts),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$map,
										function (_v1) {
											return 1;
										},
										$elm$parser$Parser$symbol('+')),
										A2(
										$elm$parser$Parser$map,
										function (_v2) {
											return -1;
										},
										$elm$parser$Parser$symbol('-'))
									]))),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$Basics$identity),
									$elm$parser$Parser$symbol(':')),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
								$elm$parser$Parser$succeed(0)
							]))),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$end)
				])));
}();
var $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(
	$elm$parser$Parser$andThen,
	function (datePart) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),
										$elm$parser$Parser$symbol('T')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$elm$parser$Parser$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$keeper,
											A2(
												$elm$parser$Parser$ignorer,
												$elm$parser$Parser$succeed($elm$core$Basics$identity),
												$elm$parser$Parser$symbol(':')),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
										]))),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$keeper,
										A2(
											$elm$parser$Parser$ignorer,
											$elm$parser$Parser$succeed($elm$core$Basics$identity),
											$elm$parser$Parser$symbol(':')),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
										$elm$parser$Parser$succeed(0)
									]))),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$symbol('.')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),
									$elm$parser$Parser$succeed(0)
								]))),
					A2($elm$parser$Parser$ignorer, $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, $elm$parser$Parser$end)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A6($rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),
					$elm$parser$Parser$end)
				]));
	},
	$rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {e_: col, iK: problem, i2: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.i2, p.e_, p.iK);
};
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{e_: 1, h: _List_Nil, j: 1, e: 0, i2: 1, de: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (!_v0.$) {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {
	return A2($elm$parser$Parser$run, $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);
};
var $author$project$Libs$DateTime$parse = function (date) {
	return A2(
		$elm$core$Result$mapError,
		function (_v0) {
			return '\'' + (date + '\' is not a valid iso date');
		},
		$rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(date));
};
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (!result.$) {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Libs$DateTime$unsafeParse = function (date) {
	return A2(
		$elm$core$Result$withDefault,
		$elm$time$Time$millisToPosix(0),
		$author$project$Libs$DateTime$parse(date));
};
var $author$project$Pages$Blog$defaultDate = $author$project$Libs$DateTime$unsafeParse('2023-01-01');
var $author$project$Pages$Blog$buildInitArticle = function (slug) {
	return {ad: $author$project$Pages$Blog$defaultDate, aI: 'Loading...', aN: '#', cb: slug, aj: 'Loading ' + slug};
};
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 2};
var $elm$http$Http$Receiving = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$Timeout_ = {$: 1};
var $elm$core$Maybe$isJust = function (maybe) {
	if (!maybe.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 4, a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 3, a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$NetworkError = {$: 2};
var $elm$http$Http$Timeout = {$: 1};
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 0:
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 1:
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 2:
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 3:
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.jm));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Request = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {bo: reqs, ga: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (!cmd.$) {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 1) {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.gg;
							if (_v4.$ === 1) {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.bo));
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.ga)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (!cmd.$) {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					gs: r.gs,
					eV: r.eV,
					hc: A2(_Http_mapExpect, func, r.hc),
					fh: r.fh,
					bX: r.bX,
					jx: r.jx,
					gg: r.gg,
					jH: r.jH
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{gs: false, eV: r.eV, hc: r.hc, fh: r.fh, bX: r.bX, jx: r.jx, gg: r.gg, jH: r.jH}));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{eV: $elm$http$Http$emptyBody, hc: r.hc, fh: _List_Nil, bX: 'GET', jx: $elm$core$Maybe$Nothing, gg: $elm$core$Maybe$Nothing, jH: r.jH});
};
var $author$project$PagesComponents$Blog$Slug$Updates$getArticle = F2(
	function (buildMsg, slug) {
		return $elm$http$Http$get(
			{
				hc: $elm$http$Http$expectString(
					buildMsg(slug)),
				jH: $author$project$Gen$Route$toHref(
					$author$project$Gen$Route$Blog__Slug_(
						{cb: slug})) + '/article.md'
			});
	});
var $author$project$Ports$SetClasses = function (a) {
	return {$: 6, a: a};
};
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$json$Json$Encode$dict = F3(
	function (toKey, toValue, dictionary) {
		return _Json_wrap(
			A3(
				$elm$core$Dict$foldl,
				F3(
					function (key, value, obj) {
						return A3(
							_Json_addField,
							toKey(key),
							toValue(value),
							obj);
					}),
				_Json_emptyObject(0),
				dictionary));
	});
var $mpizenberg$elm_file$FileValue$encode = function (file) {
	return file.eP;
};
var $author$project$Models$Project$currentVersion = 2;
var $elm$json$Json$Encode$int = _Json_wrap;
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0;
	return millis;
};
var $author$project$Libs$Time$encode = function (value) {
	return $elm$json$Json$Encode$int(
		$elm$time$Time$posixToMillis(value));
};
var $elm$json$Json$Encode$float = _Json_wrap;
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $author$project$Libs$Json$Encode$notNullObject = function (attrs) {
	return $elm$json$Json$Encode$object(
		A2(
			$elm$core$List$filter,
			function (_v0) {
				var value = _v0.b;
				return !_Utils_eq(value, $elm$json$Json$Encode$null);
			},
			attrs));
};
var $author$project$Libs$Models$Position$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'left',
				$elm$json$Json$Encode$float(value.at)),
				_Utils_Tuple2(
				'top',
				$elm$json$Json$Encode$float(value.aD))
			]));
};
var $author$project$Libs$Models$ZoomLevel$encode = function (value) {
	return $elm$json$Json$Encode$float(value);
};
var $author$project$Models$Project$CanvasProps$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'position',
				$author$project$Libs$Models$Position$encode(value.iG)),
				_Utils_Tuple2(
				'zoom',
				$author$project$Libs$Models$ZoomLevel$encode(value.dm))
			]));
};
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Models$Project$ColumnName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$TableId$toString = function (_v0) {
	var schema = _v0.a;
	var table = _v0.b;
	return schema + ('.' + table);
};
var $author$project$Models$Project$TableId$encode = function (value) {
	return $elm$json$Json$Encode$string(
		$author$project$Models$Project$TableId$toString(value));
};
var $author$project$Libs$Tailwind$encodeColor = function (_v0) {
	var color = _v0;
	return $elm$json$Json$Encode$string(color);
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Libs$Bool$cond = F3(
	function (predicate, _true, _false) {
		return predicate ? _true : _false;
	});
var $author$project$Libs$Maybe$filter = F2(
	function (predicate, maybe) {
		return A2(
			$elm$core$Maybe$andThen,
			function (a) {
				return A3(
					$author$project$Libs$Bool$cond,
					predicate(a),
					maybe,
					$elm$core$Maybe$Nothing);
			},
			maybe);
	});
var $author$project$Libs$Maybe$mapOrElse = F3(
	function (f, _default, maybe) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Maybe$map, f, maybe));
	});
var $author$project$Libs$Json$Encode$maybe = F2(
	function (encoder, value) {
		return A3($author$project$Libs$Maybe$mapOrElse, encoder, $elm$json$Json$Encode$null, value);
	});
var $author$project$Libs$Json$Encode$withDefault = F3(
	function (encode, _default, value) {
		return A2(
			$author$project$Libs$Json$Encode$maybe,
			encode,
			A2(
				$author$project$Libs$Maybe$filter,
				function (v) {
					return !_Utils_eq(v, _default);
				},
				$elm$core$Maybe$Just(value)));
	});
var $author$project$Models$Project$TableProps$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Models$Project$TableId$encode(value.t)),
				_Utils_Tuple2(
				'position',
				$author$project$Libs$Models$Position$encode(value.iG)),
				_Utils_Tuple2(
				'color',
				$author$project$Libs$Tailwind$encodeColor(value.n)),
				_Utils_Tuple2(
				'columns',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$ColumnName$encode),
					_List_Nil,
					value.W)),
				_Utils_Tuple2(
				'selected',
				A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, false, value.bp)),
				_Utils_Tuple2(
				'hiddenColumns',
				A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, false, value.X))
			]));
};
var $author$project$Models$Project$Layout$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'canvas',
				$author$project$Models$Project$CanvasProps$encode(value.dt)),
				_Utils_Tuple2(
				'tables',
				A2($elm$json$Json$Encode$list, $author$project$Models$Project$TableProps$encode, value.jr)),
				_Utils_Tuple2(
				'hiddenTables',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$TableProps$encode),
					_List_Nil,
					value.dT)),
				_Utils_Tuple2(
				'createdAt',
				$author$project$Libs$Time$encode(value.e1)),
				_Utils_Tuple2(
				'updatedAt',
				$author$project$Libs$Time$encode(value.gj))
			]));
};
var $author$project$Models$Project$LayoutName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$ProjectId$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$ProjectName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$ColumnOrder$toString = function (order) {
	switch (order) {
		case 0:
			return 'sql';
		case 1:
			return 'property';
		case 2:
			return 'name';
		default:
			return 'type';
	}
};
var $author$project$Models$ColumnOrder$encode = function (value) {
	return $elm$json$Json$Encode$string(
		$author$project$Models$ColumnOrder$toString(value));
};
var $author$project$Models$Project$FindPathSettings$encode = F2(
	function (_default, value) {
		return $author$project$Libs$Json$Encode$notNullObject(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'maxPathLength',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$int, _default.cT, value.cT)),
					_Utils_Tuple2(
					'ignoredTables',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$string, _default.cN, value.cN)),
					_Utils_Tuple2(
					'ignoredColumns',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$string, _default.cM, value.cM))
				]));
	});
var $author$project$Models$Project$SchemaName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$ProjectSettings$encodeHiddenColumns = F2(
	function (_default, value) {
		return $author$project$Libs$Json$Encode$notNullObject(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'list',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$string, _default.au, value.au)),
					_Utils_Tuple2(
					'props',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, _default.aA, value.aA)),
					_Utils_Tuple2(
					'relations',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, _default.iU, value.iU))
				]));
	});
var $author$project$Libs$Json$Encode$withDefaultDeep = F3(
	function (encode, _default, value) {
		return A2(
			$author$project$Libs$Json$Encode$maybe,
			encode(_default),
			A2(
				$author$project$Libs$Maybe$filter,
				function (v) {
					return !_Utils_eq(v, _default);
				},
				$elm$core$Maybe$Just(value)));
	});
var $author$project$Models$Project$ProjectSettings$encode = F2(
	function (_default, value) {
		return $author$project$Libs$Json$Encode$notNullObject(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'findPath',
					A3($author$project$Libs$Json$Encode$withDefaultDeep, $author$project$Models$Project$FindPathSettings$encode, _default.bM, value.bM)),
					_Utils_Tuple2(
					'removedSchemas',
					A3(
						$author$project$Libs$Json$Encode$withDefault,
						$elm$json$Json$Encode$list($author$project$Models$Project$SchemaName$encode),
						_default.iW,
						value.iW)),
					_Utils_Tuple2(
					'removeViews',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, _default.iV, value.iV)),
					_Utils_Tuple2(
					'removedTables',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$string, _default.iX, value.iX)),
					_Utils_Tuple2(
					'hiddenColumns',
					A3($author$project$Libs$Json$Encode$withDefaultDeep, $author$project$Models$Project$ProjectSettings$encodeHiddenColumns, _default.X, value.X)),
					_Utils_Tuple2(
					'columnOrder',
					A3($author$project$Libs$Json$Encode$withDefault, $author$project$Models$ColumnOrder$encode, _default.bH, value.bH)),
					_Utils_Tuple2(
					'columnBasicTypes',
					A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, _default.bG, value.bG))
				]));
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$json$Json$Encode$array = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$Array$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $author$project$Models$Project$ColumnRef$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'table',
				$author$project$Models$Project$TableId$encode(value.G)),
				_Utils_Tuple2(
				'column',
				$author$project$Models$Project$ColumnName$encode(value.r))
			]));
};
var $author$project$Libs$Models$FileLineIndex$encode = function (value) {
	return $elm$json$Json$Encode$int(value);
};
var $author$project$Models$Project$SourceId$toString = function (_v0) {
	var id = _v0;
	return id;
};
var $author$project$Models$Project$SourceId$encode = function (value) {
	return $elm$json$Json$Encode$string(
		$author$project$Models$Project$SourceId$toString(value));
};
var $author$project$Models$Project$Origin$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Models$Project$SourceId$encode(value.t)),
				_Utils_Tuple2(
				'lines',
				A2($elm$json$Json$Encode$list, $author$project$Libs$Models$FileLineIndex$encode, value.fy))
			]));
};
var $author$project$Models$Project$RelationName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$Relation$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$RelationName$encode(value.cW)),
				_Utils_Tuple2(
				'src',
				$author$project$Models$Project$ColumnRef$encode(value.de)),
				_Utils_Tuple2(
				'ref',
				$author$project$Models$Project$ColumnRef$encode(value.fW)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Models$Project$SampleKey$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Libs$Models$FileName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Libs$Models$FileSize$encode = function (value) {
	return $elm$json$Json$Encode$int(value);
};
var $author$project$Libs$Models$FileUpdatedAt$encode = function (value) {
	return $author$project$Libs$Time$encode(value);
};
var $author$project$Libs$Models$FileUrl$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$SourceKind$encode = function (value) {
	switch (value.$) {
		case 0:
			var name = value.a;
			var size = value.b;
			var modified = value.c;
			return $author$project$Libs$Json$Encode$notNullObject(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('LocalFile')),
						_Utils_Tuple2(
						'name',
						$author$project$Libs$Models$FileName$encode(name)),
						_Utils_Tuple2(
						'size',
						$author$project$Libs$Models$FileSize$encode(size)),
						_Utils_Tuple2(
						'modified',
						$author$project$Libs$Models$FileUpdatedAt$encode(modified))
					]));
		case 1:
			var name = value.a;
			var size = value.b;
			return $author$project$Libs$Json$Encode$notNullObject(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('RemoteFile')),
						_Utils_Tuple2(
						'url',
						$author$project$Libs$Models$FileUrl$encode(name)),
						_Utils_Tuple2(
						'size',
						$author$project$Libs$Models$FileSize$encode(size))
					]));
		default:
			return $author$project$Libs$Json$Encode$notNullObject(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('UserDefined'))
					]));
	}
};
var $author$project$Models$Project$SourceLine$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$SourceName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$CheckName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$Check$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$CheckName$encode(value.cW)),
				_Utils_Tuple2(
				'columns',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$ColumnName$encode),
					_List_Nil,
					value.W)),
				_Utils_Tuple2(
				'predicate',
				$elm$json$Json$Encode$string(value.em)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Models$Project$ColumnType$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$ColumnValue$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$Comment$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'text',
				$elm$json$Json$Encode$string(value.dh)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Models$Project$Column$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$ColumnName$encode(value.cW)),
				_Utils_Tuple2(
				'type',
				$author$project$Models$Project$ColumnType$encode(value.S)),
				_Utils_Tuple2(
				'nullable',
				A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, false, value.av)),
				_Utils_Tuple2(
				'default',
				A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$ColumnValue$encode, value.cD)),
				_Utils_Tuple2(
				'comment',
				A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$Comment$encode, value.cz)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Models$Project$IndexName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Libs$Nel$toList = function (xs) {
	return A2($elm$core$List$cons, xs.cK, xs.gc);
};
var $author$project$Libs$Json$Encode$nel = F2(
	function (encoder, value) {
		return A2(
			$elm$json$Json$Encode$list,
			encoder,
			$author$project$Libs$Nel$toList(value));
	});
var $author$project$Models$Project$Index$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$IndexName$encode(value.cW)),
				_Utils_Tuple2(
				'columns',
				A2($author$project$Libs$Json$Encode$nel, $author$project$Models$Project$ColumnName$encode, value.W)),
				_Utils_Tuple2(
				'definition',
				$elm$json$Json$Encode$string(value.aH)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Models$Project$PrimaryKeyName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$PrimaryKey$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$PrimaryKeyName$encode(value.cW)),
				_Utils_Tuple2(
				'columns',
				A2($author$project$Libs$Json$Encode$nel, $author$project$Models$Project$ColumnName$encode, value.W)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Models$Project$TableName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$UniqueName$encode = function (value) {
	return $elm$json$Json$Encode$string(value);
};
var $author$project$Models$Project$Unique$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$UniqueName$encode(value.cW)),
				_Utils_Tuple2(
				'columns',
				A2($author$project$Libs$Json$Encode$nel, $author$project$Models$Project$ColumnName$encode, value.W)),
				_Utils_Tuple2(
				'definition',
				$elm$json$Json$Encode$string(value.aH)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Libs$Nel$Nel = F2(
	function (head, tail) {
		return {cK: head, gc: tail};
	});
var $author$project$Libs$Nel$fromList = function (list) {
	if (list.b) {
		var head = list.a;
		var tail = list.b;
		return $elm$core$Maybe$Just(
			A2($author$project$Libs$Nel$Nel, head, tail));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$sortBy = _List_sortBy;
var $author$project$Libs$Nel$sortBy = F2(
	function (transform, nel) {
		return A2(
			$elm$core$Maybe$withDefault,
			nel,
			$author$project$Libs$Nel$fromList(
				A2(
					$elm$core$List$sortBy,
					transform,
					$author$project$Libs$Nel$toList(nel))));
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $author$project$Libs$Ned$values = function (ned) {
	return A2(
		$author$project$Libs$Nel$Nel,
		ned.cK.b,
		$elm$core$Dict$values(ned.gc));
};
var $author$project$Models$Project$Table$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'schema',
				$author$project$Models$Project$SchemaName$encode(value.E)),
				_Utils_Tuple2(
				'table',
				$author$project$Models$Project$TableName$encode(value.cW)),
				_Utils_Tuple2(
				'view',
				A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, false, value.eQ)),
				_Utils_Tuple2(
				'columns',
				A2(
					$author$project$Libs$Json$Encode$nel,
					$author$project$Models$Project$Column$encode,
					A2(
						$author$project$Libs$Nel$sortBy,
						function ($) {
							return $.a9;
						},
						$author$project$Libs$Ned$values(value.W)))),
				_Utils_Tuple2(
				'primaryKey',
				A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$PrimaryKey$encode, value.aT)),
				_Utils_Tuple2(
				'uniques',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Unique$encode),
					_List_Nil,
					value.bw)),
				_Utils_Tuple2(
				'indexes',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Index$encode),
					_List_Nil,
					value.ba)),
				_Utils_Tuple2(
				'checks',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Check$encode),
					_List_Nil,
					value.a$)),
				_Utils_Tuple2(
				'comment',
				A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$Comment$encode, value.cz)),
				_Utils_Tuple2(
				'origins',
				A3(
					$author$project$Libs$Json$Encode$withDefault,
					$elm$json$Json$Encode$list($author$project$Models$Project$Origin$encode),
					_List_Nil,
					value.aS))
			]));
};
var $author$project$Models$Project$Source$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Models$Project$SourceId$encode(value.t)),
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$SourceName$encode(value.cW)),
				_Utils_Tuple2(
				'kind',
				$author$project$Models$Project$SourceKind$encode(value.S)),
				_Utils_Tuple2(
				'content',
				A2($elm$json$Json$Encode$array, $author$project$Models$Project$SourceLine$encode, value.bI)),
				_Utils_Tuple2(
				'tables',
				A2(
					$elm$json$Json$Encode$list,
					$author$project$Models$Project$Table$encode,
					$elm$core$Dict$values(value.jr))),
				_Utils_Tuple2(
				'relations',
				A2($elm$json$Json$Encode$list, $author$project$Models$Project$Relation$encode, value.iU)),
				_Utils_Tuple2(
				'enabled',
				A3($author$project$Libs$Json$Encode$withDefault, $elm$json$Json$Encode$bool, true, value.e6)),
				_Utils_Tuple2(
				'fromSample',
				A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$SampleKey$encode, value.fb)),
				_Utils_Tuple2(
				'createdAt',
				$author$project$Libs$Time$encode(value.e1)),
				_Utils_Tuple2(
				'updatedAt',
				$author$project$Libs$Time$encode(value.gj))
			]));
};
var $author$project$Models$ColumnOrder$OrderByProperty = 1;
var $author$project$Models$Project$FindPathSettings$FindPathSettings = F3(
	function (maxPathLength, ignoredTables, ignoredColumns) {
		return {cM: ignoredColumns, cN: ignoredTables, cT: maxPathLength};
	});
var $author$project$Models$Project$FindPathSettings$init = A3($author$project$Models$Project$FindPathSettings$FindPathSettings, 3, '', '');
var $author$project$Models$Project$ProjectSettings$init = {
	bG: true,
	bH: 1,
	bM: $author$project$Models$Project$FindPathSettings$init,
	X: {au: 'created_.+, updated_.+', aA: false, iU: false},
	iV: false,
	iW: _List_Nil,
	iX: ''
};
var $author$project$Models$Project$LayoutName$toString = function (name) {
	return name;
};
var $author$project$Models$Project$encode = function (value) {
	return $author$project$Libs$Json$Encode$notNullObject(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				$author$project$Models$Project$ProjectId$encode(value.t)),
				_Utils_Tuple2(
				'name',
				$author$project$Models$Project$ProjectName$encode(value.cW)),
				_Utils_Tuple2(
				'sources',
				A2($elm$json$Json$Encode$list, $author$project$Models$Project$Source$encode, value.cc)),
				_Utils_Tuple2(
				'layout',
				$author$project$Models$Project$Layout$encode(value.as)),
				_Utils_Tuple2(
				'usedLayout',
				A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$LayoutName$encode, value.eO)),
				_Utils_Tuple2(
				'layouts',
				A3($elm$json$Json$Encode$dict, $author$project$Models$Project$LayoutName$toString, $author$project$Models$Project$Layout$encode, value.d_)),
				_Utils_Tuple2(
				'settings',
				A3($author$project$Libs$Json$Encode$withDefaultDeep, $author$project$Models$Project$ProjectSettings$encode, $author$project$Models$Project$ProjectSettings$init, value.dc)),
				_Utils_Tuple2(
				'createdAt',
				$author$project$Libs$Time$encode(value.e1)),
				_Utils_Tuple2(
				'updatedAt',
				$author$project$Libs$Time$encode(value.gj)),
				_Utils_Tuple2(
				'version',
				$elm$json$Json$Encode$int($author$project$Models$Project$currentVersion))
			]));
};
var $author$project$Libs$Hotkey$hotkeyTargetEncoder = function (t) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'id',
				A2($author$project$Libs$Json$Encode$maybe, $elm$json$Json$Encode$string, t.t)),
				_Utils_Tuple2(
				'class',
				A2($author$project$Libs$Json$Encode$maybe, $elm$json$Json$Encode$string, t.dv)),
				_Utils_Tuple2(
				'tag',
				A2($author$project$Libs$Json$Encode$maybe, $elm$json$Json$Encode$string, t.eH))
			]));
};
var $author$project$Libs$Hotkey$hotkeyEncoder = function (key) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'key',
				$elm$json$Json$Encode$string(key.bU)),
				_Utils_Tuple2(
				'ctrl',
				$elm$json$Json$Encode$bool(key.gZ)),
				_Utils_Tuple2(
				'shift',
				$elm$json$Json$Encode$bool(key.aV)),
				_Utils_Tuple2(
				'alt',
				$elm$json$Json$Encode$bool(key.cr)),
				_Utils_Tuple2(
				'meta',
				$elm$json$Json$Encode$bool(key.cU)),
				_Utils_Tuple2(
				'target',
				A2($author$project$Libs$Json$Encode$maybe, $author$project$Libs$Hotkey$hotkeyTargetEncoder, key.eI)),
				_Utils_Tuple2(
				'onInput',
				$elm$json$Json$Encode$bool(key.iq)),
				_Utils_Tuple2(
				'preventDefault',
				$elm$json$Json$Encode$bool(key.fQ))
			]));
};
var $author$project$Ports$elmEncoder = function (elm) {
	switch (elm.$) {
		case 0:
			var id = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('Click')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					]));
		case 1:
			var id = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('MouseDown')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					]));
		case 2:
			var id = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('Focus')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					]));
		case 3:
			var id = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('Blur')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					]));
		case 4:
			var id = elm.a;
			var position = elm.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('ScrollTo')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id)),
						_Utils_Tuple2(
						'position',
						$elm$json$Json$Encode$string(position))
					]));
		case 5:
			var maybeId = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('Fullscreen')),
						_Utils_Tuple2(
						'maybeId',
						A2($author$project$Libs$Json$Encode$maybe, $elm$json$Json$Encode$string, maybeId))
					]));
		case 6:
			var html = elm.a.hx;
			var body = elm.a.eV;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('SetClasses')),
						_Utils_Tuple2(
						'html',
						$elm$json$Json$Encode$string(html)),
						_Utils_Tuple2(
						'body',
						$elm$json$Json$Encode$string(body))
					]));
		case 7:
			var id = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('AutofocusWithin')),
						_Utils_Tuple2(
						'id',
						$elm$json$Json$Encode$string(id))
					]));
		case 8:
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('LoadProjects'))
					]));
		case 9:
			var projectUrl = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('LoadRemoteProject')),
						_Utils_Tuple2(
						'projectUrl',
						$elm$json$Json$Encode$string(projectUrl))
					]));
		case 10:
			var project = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('SaveProject')),
						_Utils_Tuple2(
						'project',
						$author$project$Models$Project$encode(project))
					]));
		case 11:
			var filename = elm.a;
			var content = elm.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('DownloadFile')),
						_Utils_Tuple2(
						'filename',
						$elm$json$Json$Encode$string(filename)),
						_Utils_Tuple2(
						'content',
						$elm$json$Json$Encode$string(content))
					]));
		case 12:
			var project = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('DropProject')),
						_Utils_Tuple2(
						'project',
						$author$project$Models$Project$encode(project))
					]));
		case 13:
			var project = elm.a;
			var source = elm.b;
			var file = elm.c;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('GetLocalFile')),
						_Utils_Tuple2(
						'project',
						A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$ProjectId$encode, project)),
						_Utils_Tuple2(
						'source',
						A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$SourceId$encode, source)),
						_Utils_Tuple2(
						'file',
						$mpizenberg$elm_file$FileValue$encode(file))
					]));
		case 14:
			var project = elm.a;
			var source = elm.b;
			var url = elm.c;
			var sample = elm.d;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('GetRemoteFile')),
						_Utils_Tuple2(
						'project',
						A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$ProjectId$encode, project)),
						_Utils_Tuple2(
						'source',
						A2($author$project$Libs$Json$Encode$maybe, $author$project$Models$Project$SourceId$encode, source)),
						_Utils_Tuple2(
						'url',
						$elm$json$Json$Encode$string(url)),
						_Utils_Tuple2(
						'sample',
						A2($author$project$Libs$Json$Encode$maybe, $elm$json$Json$Encode$string, sample))
					]));
		case 15:
			var src = elm.a;
			var ref = elm.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('GetSourceId')),
						_Utils_Tuple2(
						'src',
						$author$project$Models$Project$ColumnRef$encode(src)),
						_Utils_Tuple2(
						'ref',
						$author$project$Models$Project$ColumnRef$encode(ref))
					]));
		case 16:
			var ids = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('ObserveSizes')),
						_Utils_Tuple2(
						'ids',
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, ids))
					]));
		case 17:
			var keys = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('ListenKeys')),
						_Utils_Tuple2(
						'keys',
						A3(
							$elm$json$Json$Encode$dict,
							$elm$core$Basics$identity,
							$elm$json$Json$Encode$list($author$project$Libs$Hotkey$hotkeyEncoder),
							keys))
					]));
		case 18:
			var name = elm.a;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('TrackPage')),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name))
					]));
		case 19:
			var name = elm.a;
			var details = elm.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('TrackEvent')),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2('details', details)
					]));
		default:
			var name = elm.a;
			var details = elm.b;
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'kind',
						$elm$json$Json$Encode$string('TrackError')),
						_Utils_Tuple2(
						'name',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2('details', details)
					]));
	}
};
var $author$project$Ports$elmToJs = _Platform_outgoingPort('elmToJs', $elm$core$Basics$identity);
var $author$project$Ports$messageToJs = function (message) {
	return $author$project$Ports$elmToJs(
		$author$project$Ports$elmEncoder(message));
};
var $author$project$Ports$setClasses = function (payload) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$SetClasses(payload));
};
var $author$project$Ports$TrackPage = function (a) {
	return {$: 18, a: a};
};
var $author$project$Ports$trackPage = function (name) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$TrackPage(name));
};
var $author$project$Pages$Blog$init = function (slugs) {
	return _Utils_Tuple2(
		{
			dp: A2(
				$elm$core$List$map,
				function (slug) {
					return _Utils_Tuple2(
						slug,
						$author$project$Pages$Blog$buildInitArticle(slug));
				},
				slugs)
		},
		$elm$core$Platform$Cmd$batch(
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Ports$setClasses(
						{eV: '', hx: ''}),
						$author$project$Ports$trackPage('blog')
					]),
				A2(
					$elm$core$List$map,
					$author$project$PagesComponents$Blog$Slug$Updates$getArticle($author$project$Pages$Blog$GotArticle),
					slugs))));
}($author$project$Conf$blogPosts);
var $author$project$Pages$Blog$subscriptions = function (_v0) {
	return $elm$core$Platform$Sub$none;
};
var $author$project$Pages$Blog$buildArticle = F2(
	function (slug, content) {
		return {
			ad: content.iN,
			aI: content.aI,
			aN: $author$project$Gen$Route$toHref(
				$author$project$Gen$Route$Blog__Slug_(
					{cb: slug})),
			cb: slug,
			aj: content.aj
		};
	});
var $author$project$Pages$Blog$buildBadArticle = F2(
	function (slug, errors) {
		return {
			ad: $author$project$Pages$Blog$defaultDate,
			aI: 'Errors: ' + A2(
				$elm$core$String$join,
				', ',
				$author$project$Libs$Nel$toList(errors)),
			aN: '#',
			cb: slug,
			aj: 'Bad ' + (slug + ' article')
		};
	});
var $author$project$Libs$Http$errorToString = function (error) {
	switch (error.$) {
		case 0:
			var url = error.a;
			return 'The URL ' + (url + ' was invalid');
		case 1:
			return 'Unable to reach the server, try again';
		case 2:
			return 'Unable to reach the server, check your network connection';
		case 3:
			switch (error.a) {
				case 500:
					return 'The server had a problem, try again later';
				case 400:
					return 'Verify your information and try again';
				case 404:
					return 'Not found';
				default:
					var code = error.a;
					return 'Unknown error (code: ' + ($elm$core$String$fromInt(code) + ')');
			}
		default:
			var errorMessage = error.a;
			return errorMessage;
	}
};
var $author$project$Pages$Blog$buildErrArticle = F2(
	function (slug, error) {
		return {
			ad: $author$project$Pages$Blog$defaultDate,
			aI: $author$project$Libs$Http$errorToString(error),
			aN: '#',
			cb: slug,
			aj: slug + ' in error'
		};
	});
var $author$project$Libs$Result$fold = F3(
	function (onError, onSuccess, result) {
		if (!result.$) {
			var a = result.a;
			return onSuccess(a);
		} else {
			var x = result.a;
			return onError(x);
		}
	});
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (!result.$) {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $author$project$Libs$Result$apx = F3(
	function (transform, r1, rx) {
		var _v0 = _Utils_Tuple2(r1, rx);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				var a1 = _v0.a.a;
				var ax = _v0.b.a;
				return $elm$core$Result$Ok(
					A2(transform, a1, ax));
			} else {
				var ex = _v0.b.a;
				return $elm$core$Result$Err(ex);
			}
		} else {
			if (!_v0.b.$) {
				var e1 = _v0.a.a;
				return $elm$core$Result$Err(
					A2($author$project$Libs$Nel$Nel, e1, _List_Nil));
			} else {
				var e1 = _v0.a.a;
				var ex = _v0.b.a;
				return $elm$core$Result$Err(
					A2(
						$author$project$Libs$Nel$Nel,
						e1,
						$author$project$Libs$Nel$toList(ex)));
			}
		}
	});
var $author$project$Libs$Result$ap = F3(
	function (transform, r1, r2) {
		return A3(
			$author$project$Libs$Result$apx,
			F2(
				function (a1, a2) {
					return A2(transform, a1, a2);
				}),
			r1,
			A2(
				$elm$core$Result$mapError,
				function (e) {
					return A2($author$project$Libs$Nel$Nel, e, _List_Nil);
				},
				r2));
	});
var $author$project$Libs$Result$ap3 = F4(
	function (transform, r1, r2, r3) {
		return A3(
			$author$project$Libs$Result$apx,
			F2(
				function (a1, _v0) {
					var a2 = _v0.a;
					var a3 = _v0.b;
					return A3(transform, a1, a2, a3);
				}),
			r1,
			A3(
				$author$project$Libs$Result$ap,
				F2(
					function (a2, a3) {
						return _Utils_Tuple2(a2, a3);
					}),
				r2,
				r3));
	});
var $author$project$PagesComponents$Blog$Slug$Models$loic = {
	dG: 'Loïc',
	dO: $elm$core$Maybe$Just('loicknuchel'),
	dZ: 'Knuchel',
	eM: $elm$core$Maybe$Just('loicknuchel')
};
var $author$project$PagesComponents$Blog$Slug$Models$samir = {
	dG: 'Samir',
	dO: $elm$core$Maybe$Just('sbouaked'),
	dZ: 'Bouaked',
	eM: $elm$core$Maybe$Just('sbouaked')
};
var $author$project$PagesComponents$Blog$Slug$Models$authors = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('loic', $author$project$PagesComponents$Blog$Slug$Models$loic),
			_Utils_Tuple2('samir', $author$project$PagesComponents$Blog$Slug$Models$samir)
		]));
var $author$project$Conf$github = 'https://github.com/azimuttapp/azimutt';
var $author$project$Conf$twitter = 'azimuttapp';
var $author$project$Conf$constants = {gu: $author$project$Conf$github + '/issues', gv: $author$project$Conf$github + '/discussions/9', gw: $author$project$Conf$github + '/discussions/7', gx: $author$project$Conf$github + '/discussions/8', gy: $author$project$Conf$github + '/discussions', gz: 'hey@azimutt.app', gA: $author$project$Conf$github + '/issues?q=is%3Aissue+is%3Aopen+label%3A%22feature+request%22', gB: $author$project$Conf$github, gC: $author$project$Conf$github + '/projects/1', gD: 'https://twitter.com/' + $author$project$Conf$twitter, gE: 'https://azimutt.app', gP: 'Hi team, I really like what you\'ve done with @' + ($author$project$Conf$twitter + '. Keep up the good work 💪'), je: 'Hi @' + ($author$project$Conf$twitter + ', I just published my schema at ..., I would love if you can share 🚀')};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$PagesComponents$Blog$Slug$Updates$extendMarkdown = F2(
	function (slug, md) {
		return A3(
			$elm$core$String$replace,
			'{{feedback_link}}',
			$author$project$Conf$constants.gy,
			A3(
				$elm$core$String$replace,
				'{{issues_link}}',
				$author$project$Conf$constants.gA,
				A3(
					$elm$core$String$replace,
					'{{roadmap_link}}',
					$author$project$Conf$constants.gC,
					A3(
						$elm$core$String$replace,
						'{{app_link}}',
						$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects),
						A3(
							$elm$core$String$replace,
							'{{base_link}}',
							$author$project$Gen$Route$toHref(
								$author$project$Gen$Route$Blog__Slug_(
									{cb: slug})),
							md)))));
	});
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (!maybe.$) {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $author$project$Libs$Dict$getOrElse = F3(
	function (key, _default, dict) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			A2($elm$core$Dict$get, key, dict));
	});
var $author$project$Libs$Dict$getResult = F2(
	function (key, dict) {
		return A2(
			$elm$core$Result$fromMaybe,
			'Missing key \'' + (key + '\''),
			A2($elm$core$Dict$get, key, dict));
	});
var $elm$core$String$trim = _String_trim;
var $author$project$PagesComponents$Blog$Slug$Updates$parseFrontMatter = function (frontMatter) {
	return function (_v2) {
		var errs = _v2.a;
		var res = _v2.b;
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			$elm$core$Result$Err,
			$elm$core$Result$Ok(
				$elm$core$Dict$fromList(res)),
			$author$project$Libs$Nel$fromList(errs));
	}(
		A3(
			$elm$core$List$foldr,
			F2(
				function (line, _v0) {
					var errs = _v0.a;
					var res = _v0.b;
					var _v1 = A2($elm$core$String$split, ':', line);
					if (!_v1.b) {
						return _Utils_Tuple2(errs, res);
					} else {
						if (!_v1.b.b) {
							var value = _v1.a;
							return _Utils_Tuple2(
								A2($elm$core$List$cons, 'No key defined for \'' + (value + '\''), errs),
								res);
						} else {
							var key = _v1.a;
							var value = _v1.b;
							return A2($elm$core$String$contains, ' ', key) ? _Utils_Tuple2(
								A2($elm$core$List$cons, 'Invalid key \'' + (key + '\''), errs),
								res) : _Utils_Tuple2(
								errs,
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										$elm$core$String$trim(key),
										$elm$core$String$trim(
											A2($elm$core$String$join, ':', value))),
									res));
						}
					}
				}),
			_Utils_Tuple2(_List_Nil, _List_Nil),
			A2(
				$elm$core$String$split,
				'\n',
				$elm$core$String$trim(frontMatter))));
};
var $author$project$PagesComponents$Blog$Slug$Updates$parseContent = F2(
	function (slug, content) {
		var _v0 = A2($elm$core$String$split, '---\n', content);
		if (_v0.b) {
			if (_v0.b.b) {
				if (_v0.b.b.b) {
					if (_v0.a === '') {
						var _v1 = _v0.b;
						var frontMatter = _v1.a;
						var _v2 = _v1.b;
						var mdStart = _v2.a;
						var mdRest = _v2.b;
						return A2(
							$elm$core$Result$andThen,
							function (props) {
								return A4(
									$author$project$Libs$Result$ap3,
									F3(
										function (title, author, published) {
											return {
												dq: author,
												eV: A2(
													$author$project$PagesComponents$Blog$Slug$Updates$extendMarkdown,
													slug,
													$elm$core$String$trim(
														A2(
															$elm$core$String$join,
															'---\n',
															A2($elm$core$List$cons, mdStart, mdRest)))),
												gJ: A2($elm$core$Dict$get, 'category', props),
												aI: $elm$core$String$trim(
													A2(
														$elm$core$String$left,
														280,
														A3(
															$author$project$Libs$Dict$getOrElse,
															'excerpt',
															$elm$core$String$trim(mdStart),
															props))),
												iN: published,
												jt: A3(
													$author$project$Libs$Maybe$mapOrElse,
													function (tags) {
														return A2(
															$elm$core$List$map,
															$elm$core$String$trim,
															A2($elm$core$String$split, ',', tags));
													},
													_List_Nil,
													A2($elm$core$Dict$get, 'tags', props)),
												aj: title
											};
										}),
									A2($author$project$Libs$Dict$getResult, 'title', props),
									A2(
										$elm$core$Result$andThen,
										function (author) {
											return A2(
												$elm$core$Result$fromMaybe,
												'Can\'t find \'' + (author + '\' author'),
												A2($elm$core$Dict$get, author, $author$project$PagesComponents$Blog$Slug$Models$authors));
										},
										A2($author$project$Libs$Dict$getResult, 'author', props)),
									A2(
										$elm$core$Result$andThen,
										$author$project$Libs$DateTime$parse,
										A2($author$project$Libs$Dict$getResult, 'published', props)));
							},
							$author$project$PagesComponents$Blog$Slug$Updates$parseFrontMatter(frontMatter));
					} else {
						var _v3 = _v0.b;
						var _v4 = _v3.b;
						return $elm$core$Result$Err(
							A2($author$project$Libs$Nel$Nel, 'File do not start by \'---\'', _List_Nil));
					}
				} else {
					if (_v0.a === '') {
						var _v5 = _v0.b;
						return $elm$core$Result$Err(
							A2($author$project$Libs$Nel$Nel, 'Missing a closing \'---\'', _List_Nil));
					} else {
						var _v6 = _v0.b;
						return $elm$core$Result$Err(
							A2($author$project$Libs$Nel$Nel, 'File do not start by \'---\'', _List_Nil));
					}
				}
			} else {
				return $elm$core$Result$Err(
					A2($author$project$Libs$Nel$Nel, 'Missing the front matter section (between --- separators)', _List_Nil));
			}
		} else {
			return $elm$core$Result$Err(
				A2($author$project$Libs$Nel$Nel, 'Not possible, split always yield an element', _List_Nil));
		}
	});
var $author$project$Pages$Blog$updateArticle = F3(
	function (slug, article, model) {
		return _Utils_update(
			model,
			{
				dp: A2(
					$elm$core$List$map,
					function (_v0) {
						var s = _v0.a;
						var art = _v0.b;
						return A3(
							$author$project$Libs$Bool$cond,
							_Utils_eq(s, slug),
							_Utils_Tuple2(s, article),
							_Utils_Tuple2(s, art));
					},
					model.dp)
			});
	});
var $author$project$Pages$Blog$update = F2(
	function (msg, model) {
		if (!msg.b.$) {
			var slug = msg.a;
			var body = msg.b.a;
			return _Utils_Tuple2(
				function (article) {
					return A3($author$project$Pages$Blog$updateArticle, slug, article, model);
				}(
					A3(
						$author$project$Libs$Result$fold,
						$author$project$Pages$Blog$buildBadArticle(slug),
						$author$project$Pages$Blog$buildArticle(slug),
						A2($author$project$PagesComponents$Blog$Slug$Updates$parseContent, slug, body))),
				$elm$core$Platform$Cmd$none);
		} else {
			var slug = msg.a;
			var err = msg.b.a;
			return _Utils_Tuple2(
				A3(
					$author$project$Pages$Blog$updateArticle,
					slug,
					A2($author$project$Pages$Blog$buildErrArticle, slug, err),
					model),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $author$project$Libs$Html$Attributes$computeStyles = function (values) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filter,
			function (v) {
				return v !== '';
			},
			A2(
				$elm$core$List$map,
				$elm$core$String$trim,
				A2(
					$elm$core$List$concatMap,
					$elm$core$String$split(' '),
					values))));
};
var $author$project$Libs$Html$Attributes$css = function (values) {
	return $elm$html$Html$Attributes$class(
		$author$project$Libs$Html$Attributes$computeStyles(values));
};
var $elm$html$Html$Attributes$datetime = _VirtualDom_attribute('datetime');
var $elm$html$Html$div = _VirtualDom_node('div');
var $author$project$Libs$DateTime$formatMonth = function (month) {
	switch (month) {
		case 0:
			return {o: 'January', p: 1, q: 'Jan'};
		case 1:
			return {o: 'February', p: 2, q: 'Feb'};
		case 2:
			return {o: 'March', p: 3, q: 'Mar'};
		case 3:
			return {o: 'April', p: 4, q: 'Apr'};
		case 4:
			return {o: 'May', p: 5, q: 'May'};
		case 5:
			return {o: 'June', p: 6, q: 'Jun'};
		case 6:
			return {o: 'July', p: 7, q: 'Jul'};
		case 7:
			return {o: 'August', p: 8, q: 'Aug'};
		case 8:
			return {o: 'September', p: 9, q: 'Sep'};
		case 9:
			return {o: 'October', p: 10, q: 'Oct'};
		case 10:
			return {o: 'November', p: 11, q: 'Nov'};
		default:
			return {o: 'December', p: 12, q: 'Dec'};
	}
};
var $author$project$Libs$DateTime$formatWeekday = function (day) {
	switch (day) {
		case 0:
			return {o: 'Monday', p: 1, q: 'Mon'};
		case 1:
			return {o: 'Tuesday', p: 2, q: 'Tue'};
		case 2:
			return {o: 'Wednesday', p: 3, q: 'Wed'};
		case 3:
			return {o: 'Thursday', p: 4, q: 'Thu'};
		case 4:
			return {o: 'Friday', p: 5, q: 'Fri'};
		case 5:
			return {o: 'Saturday', p: 6, q: 'Sat'};
		default:
			return {o: 'Sunday', p: 7, q: 'Sun'};
	}
};
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.k, posixMinutes) < 0) {
					return posixMinutes + era.e;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$core$Basics$ge = _Utils_ge;
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		cB: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		bY: month,
		dl: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).cB;
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $elm$time$Time$Apr = 3;
var $elm$time$Time$Aug = 7;
var $elm$time$Time$Dec = 11;
var $elm$time$Time$Feb = 1;
var $elm$time$Time$Jan = 0;
var $elm$time$Time$Jul = 6;
var $elm$time$Time$Jun = 5;
var $elm$time$Time$Mar = 2;
var $elm$time$Time$May = 4;
var $elm$time$Time$Nov = 10;
var $elm$time$Time$Oct = 9;
var $elm$time$Time$Sep = 8;
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).bY;
		switch (_v0) {
			case 1:
				return 0;
			case 2:
				return 1;
			case 3:
				return 2;
			case 4:
				return 3;
			case 5:
				return 4;
			case 6:
				return 5;
			case 7:
				return 6;
			case 8:
				return 7;
			case 9:
				return 8;
			case 10:
				return 9;
			case 11:
				return 10;
			default:
				return 11;
		}
	});
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$time$Time$Fri = 4;
var $elm$time$Time$Mon = 0;
var $elm$time$Time$Sat = 5;
var $elm$time$Time$Sun = 6;
var $elm$time$Time$Thu = 3;
var $elm$time$Time$Tue = 1;
var $elm$time$Time$Wed = 2;
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return 3;
			case 1:
				return 4;
			case 2:
				return 5;
			case 3:
				return 6;
			case 4:
				return 0;
			case 5:
				return 1;
			default:
				return 2;
		}
	});
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).dl;
	});
var $author$project$Libs$DateTime$buildDateTime = F2(
	function (zone, date) {
		return {
			cB: A2($elm$time$Time$toDay, zone, date),
			dU: A2($elm$time$Time$toHour, zone, date),
			d3: A2($elm$time$Time$toMillis, zone, date),
			d4: A2($elm$time$Time$toMinute, zone, date),
			bY: $author$project$Libs$DateTime$formatMonth(
				A2($elm$time$Time$toMonth, zone, date)),
			es: A2($elm$time$Time$toSecond, zone, date),
			gl: $author$project$Libs$DateTime$formatWeekday(
				A2($elm$time$Time$toWeekday, zone, date)),
			dl: A2($elm$time$Time$toYear, zone, date)
		};
	});
var $elm$core$String$cons = _String_cons;
var $author$project$Libs$DateTime$padLeft = F3(
	function (text, size, _char) {
		padLeft:
		while (true) {
			if (_Utils_cmp(
				$elm$core$String$length(text),
				size) > -1) {
				return text;
			} else {
				var $temp$text = A2($elm$core$String$cons, _char, text),
					$temp$size = size,
					$temp$char = _char;
				text = $temp$text;
				size = $temp$size;
				_char = $temp$char;
				continue padLeft;
			}
		}
	});
var $author$project$Libs$DateTime$format = F3(
	function (pattern, zone, time) {
		var date = A2($author$project$Libs$DateTime$buildDateTime, zone, time);
		return A3(
			$elm$core$String$replace,
			'SSS',
			A3(
				$author$project$Libs$DateTime$padLeft,
				$elm$core$String$fromInt(date.d3),
				3,
				'0'),
			A3(
				$elm$core$String$replace,
				'ss',
				A3(
					$author$project$Libs$DateTime$padLeft,
					$elm$core$String$fromInt(date.es),
					2,
					'0'),
				A3(
					$elm$core$String$replace,
					'mm',
					A3(
						$author$project$Libs$DateTime$padLeft,
						$elm$core$String$fromInt(date.d4),
						2,
						'0'),
					A3(
						$elm$core$String$replace,
						'HH',
						A3(
							$author$project$Libs$DateTime$padLeft,
							$elm$core$String$fromInt(date.dU),
							2,
							'0'),
						A3(
							$elm$core$String$replace,
							'd',
							$elm$core$String$fromInt(date.cB),
							A3(
								$elm$core$String$replace,
								'dd',
								A3(
									$author$project$Libs$DateTime$padLeft,
									$elm$core$String$fromInt(date.cB),
									2,
									'0'),
								A3(
									$elm$core$String$replace,
									'MM',
									A3(
										$author$project$Libs$DateTime$padLeft,
										$elm$core$String$fromInt(date.bY.p),
										2,
										'0'),
									A3(
										$elm$core$String$replace,
										'MMM',
										date.bY.q,
										A3(
											$elm$core$String$replace,
											'MMMMM',
											date.bY.o,
											A3(
												$elm$core$String$replace,
												'yy',
												$elm$core$String$fromInt(
													A2($elm$core$Basics$modBy, 100, date.dl)),
												A3(
													$elm$core$String$replace,
													'yyyy',
													$elm$core$String$fromInt(date.dl),
													pattern)))))))))));
	});
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$Libs$DateTime$formatUtc = F2(
	function (pattern, time) {
		return A3($author$project$Libs$DateTime$format, pattern, $elm$time$Time$utc, time);
	});
var $elm$html$Html$h2 = _VirtualDom_node('h2');
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $author$project$Libs$Tailwind$addState = F2(
	function (state, classes) {
		return A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				function (c) {
					return state + (':' + c);
				},
				A2(
					$elm$core$List$filter,
					function (c) {
						return c !== '';
					},
					A2(
						$elm$core$List$map,
						$elm$core$String$trim,
						A2(
							$elm$core$String$split,
							' ',
							A2($elm$core$String$join, ' ', classes))))));
	});
var $author$project$Libs$Tailwind$md = $author$project$Libs$Tailwind$addState('md');
var $elm$html$Html$p = _VirtualDom_node('p');
var $elm$html$Html$time = _VirtualDom_node('time');
var $author$project$Components$Slices$Blog$article = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$time,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$datetime(
						A2($author$project$Libs$DateTime$formatUtc, 'yyyy-MM-dd', model.ad)),
						$elm$html$Html$Attributes$class('uppercase text-xs text-gray-500 font-bold')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(
						A2($author$project$Libs$DateTime$formatUtc, 'MMM dd, yyyy', model.ad))
					])),
				A2(
				$elm$html$Html$h2,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'mt-1 text-2xl tracking-tight font-extrabold text-gray-900',
								$author$project$Libs$Tailwind$md(
								_List_fromArray(
									['text-3xl leading-none']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$a,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$href(model.aN)
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(model.aj)
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('mt-6')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(model.aI)
							]))
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('mt-10')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$a,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-indigo-600 uppercase text-sm tracking-wide font-black'),
								$elm$html$Html$Attributes$href(model.aN)
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Read full story →')
							]))
					]))
			]));
};
var $elm$html$Html$Attributes$action = function (uri) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'action',
		_VirtualDom_noJavaScriptUri(uri));
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $elm$html$Html$button = _VirtualDom_node('button');
var $author$project$Libs$Tailwind$focus = $author$project$Libs$Tailwind$addState('focus');
var $elm$html$Html$form = _VirtualDom_node('form');
var $author$project$Libs$Tailwind$hover = $author$project$Libs$Tailwind$addState('hover');
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$Attributes$method = $elm$html$Html$Attributes$stringProperty('method');
var $elm$html$Html$Attributes$name = $elm$html$Html$Attributes$stringProperty('name');
var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty('placeholder');
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$required = $elm$html$Html$Attributes$boolProperty('required');
var $author$project$Libs$Tailwind$sm = $author$project$Libs$Tailwind$addState('sm');
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $author$project$Components$Slices$Newsletter$centered = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('max-w-prose mx-auto')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$form,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$method(model.bX),
						$elm$html$Html$Attributes$action(model.jH),
						$elm$html$Html$Attributes$target('_blank'),
						$elm$html$Html$Attributes$rel('noopener'),
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'justify-center',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['flex']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$input,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('email'),
								$elm$html$Html$Attributes$name('member[email]'),
								$elm$html$Html$Attributes$id('newsletter-email'),
								$elm$html$Html$Attributes$placeholder(model.ek),
								A2($elm$html$Html$Attributes$attribute, 'autocomplete', 'email'),
								$elm$html$Html$Attributes$required(true),
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'appearance-none w-full px-5 py-3 border border-gray-300 text-base leading-6 rounded-md text-gray-900 bg-white placeholder-gray-500 transition duration-150 ease-in-out',
										$author$project$Libs$Tailwind$focus(
										_List_fromArray(
											['outline-none border-blue-300'])),
										$author$project$Libs$Tailwind$sm(
										_List_fromArray(
											['max-w-xs']))
									]))
							]),
						_List_Nil),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mt-3 rounded-md shadow',
										$author$project$Libs$Tailwind$sm(
										_List_fromArray(
											['mt-0 ml-3 flex-shrink-0']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'w-full flex items-center justify-center px-5 py-3 border border-transparent text-base leading-6 font-medium rounded-md text-white bg-indigo-600 transition duration-150 ease-in-out',
												$author$project$Libs$Tailwind$hover(
												_List_fromArray(
													['bg-indigo-500'])),
												$author$project$Libs$Tailwind$focus(
												_List_fromArray(
													['outline-none']))
											]))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(model.gY)
									]))
							]))
					]))
			]));
};
var $author$project$Track$externalLink = function (url) {
	return {
		g6: _List_fromArray(
			[
				_Utils_Tuple2('url', url)
			]),
		e6: true,
		cW: 'external-link'
	};
};
var $author$project$Libs$Html$Attributes$hrefBlank = function (url) {
	return _List_fromArray(
		[
			$elm$html$Html$Attributes$href(url),
			$elm$html$Html$Attributes$target('_blank'),
			$elm$html$Html$Attributes$rel('noopener')
		]);
};
var $author$project$Libs$Html$Attributes$track = function (event) {
	return event.e6 ? A2(
		$elm$core$List$cons,
		A2($elm$html$Html$Attributes$attribute, 'data-track-event', event.cW),
		A2(
			$elm$core$List$map,
			function (_v0) {
				var k = _v0.a;
				var v = _v0.b;
				return A2($elm$html$Html$Attributes$attribute, 'data-track-event-' + k, v);
			},
			event.g6)) : _List_Nil;
};
var $author$project$Libs$Html$extLink = F3(
	function (url, attrs, children) {
		return A2(
			$elm$html$Html$a,
			_Utils_ap(
				$author$project$Libs$Html$Attributes$hrefBlank(url),
				_Utils_ap(
					$author$project$Libs$Html$Attributes$track(
						$author$project$Track$externalLink(url)),
					attrs)),
			children);
	});
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$html$Html$hr = _VirtualDom_node('hr');
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $author$project$Conf$newsletter = {gY: 'Subscribe', bX: 'post', ek: 'Enter your email', jH: 'https://www.getrevue.co/profile/azimuttapp/add_subscriber'};
var $author$project$Libs$Tailwind$ring_500 = function (_v0) {
	var color = _v0;
	return 'ring-' + (color + '-500');
};
var $author$project$Libs$Tailwind$focus_ring_500 = function (ringColor) {
	return $author$project$Libs$Tailwind$focus(
		_List_fromArray(
			[
				'outline-none ring-2 ring-offset-2',
				$author$project$Libs$Tailwind$ring_500(ringColor),
				'ring-offset-white'
			]));
};
var $elm$html$Html$Attributes$for = $elm$html$Html$Attributes$stringProperty('htmlFor');
var $author$project$Libs$Tailwind$Color = $elm$core$Basics$identity;
var $author$project$Libs$Tailwind$indigo = 'indigo';
var $elm$html$Html$label = _VirtualDom_node('label');
var $author$project$Libs$Tailwind$lg = $author$project$Libs$Tailwind$addState('lg');
var $author$project$Components$Slices$Newsletter$basicSlice = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('bg-white')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'max-w-7xl mx-auto py-24 px-4',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['px-6'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['py-32 px-8 flex items-center']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										$author$project$Libs$Tailwind$lg(
										_List_fromArray(
											['w-0 flex-1']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h2,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'text-3xl font-extrabold text-gray-900',
												$author$project$Libs$Tailwind$sm(
												_List_fromArray(
													['text-4xl']))
											]))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(model.aj)
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-3 max-w-3xl text-lg text-gray-500')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(model.cE)
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mt-8',
										$author$project$Libs$Tailwind$lg(
										_List_fromArray(
											['mt-0 ml-8']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$form,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$method(model.ae.bX),
										$elm$html$Html$Attributes$action(model.ae.jH),
										$elm$html$Html$Attributes$target('_blank'),
										$elm$html$Html$Attributes$rel('noopener'),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												$author$project$Libs$Tailwind$sm(
												_List_fromArray(
													['flex']))
											]))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$label,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$for('newsletter-email'),
												$elm$html$Html$Attributes$class('sr-only')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(model.ae.ek)
											])),
										A2(
										$elm$html$Html$input,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$type_('email'),
												$elm$html$Html$Attributes$name('member[email]'),
												$elm$html$Html$Attributes$id('newsletter-email'),
												$elm$html$Html$Attributes$placeholder(model.ae.ek),
												A2($elm$html$Html$Attributes$attribute, 'autocomplete', 'email'),
												$elm$html$Html$Attributes$required(true),
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													[
														'w-full px-5 py-3 border border-gray-300 shadow-sm placeholder-gray-400 rounded-md',
														$author$project$Libs$Tailwind$focus(
														_List_fromArray(
															['ring-1 ring-indigo-500 border-indigo-500'])),
														$author$project$Libs$Tailwind$sm(
														_List_fromArray(
															['max-w-xs']))
													]))
											]),
										_List_Nil),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													[
														'mt-3 rounded-md shadow',
														$author$project$Libs$Tailwind$sm(
														_List_fromArray(
															['mt-0 ml-3 flex-shrink-0']))
													]))
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$button,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$type_('submit'),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															[
																'w-full flex items-center justify-center py-3 px-5 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600',
																$author$project$Libs$Tailwind$hover(
																_List_fromArray(
																	['bg-indigo-700'])),
																$author$project$Libs$Tailwind$focus_ring_500($author$project$Libs$Tailwind$indigo)
															]))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(model.ae.gY)
													]))
											]))
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-3 text-sm text-gray-500')
									]),
								model.d$)
							]))
					]))
			]));
};
var $author$project$PagesComponents$Helpers$newsletterSection = $author$project$Components$Slices$Newsletter$basicSlice(
	{
		cE: 'Stay in touch with Azimutt news, features, articles or offers, directly in your mail box. Once a week at most, no spam guarantee.',
		ae: function (n) {
			return _Utils_update(
				n,
				{gY: 'Get onboard'});
		}($author$project$Conf$newsletter),
		d$: _List_Nil,
		aj: 'Sign up for Azimutt newsletter'
	});
var $author$project$Libs$Bool$toString = function (bool) {
	if (bool) {
		return 'True';
	} else {
		return 'False';
	}
};
var $author$project$Libs$Html$Attributes$ariaHidden = function (value) {
	return A2(
		$elm$html$Html$Attributes$attribute,
		'aria-hidden',
		$author$project$Libs$Bool$toString(value));
};
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $author$project$Libs$Svg$Attributes$css = function (values) {
	return $elm$svg$Svg$Attributes$class(
		$author$project$Libs$Html$Attributes$computeStyles(values));
};
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $author$project$Libs$Html$Attributes$role = function (text) {
	return A2($elm$html$Html$Attributes$attribute, 'role', text);
};
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $author$project$Components$Atoms$Icon$viewSocial = F2(
	function (lines, styles) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('0 0 24 24'),
					$elm$svg$Svg$Attributes$fill('currentColor'),
					$author$project$Libs$Html$Attributes$role('img'),
					$author$project$Libs$Html$Attributes$ariaHidden(true),
					$author$project$Libs$Svg$Attributes$css(
					_List_fromArray(
						['flex-shrink-0 h-6 w-6', styles]))
				]),
			A2(
				$elm$core$List$map,
				function (line) {
					return A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d(line)
							]),
						_List_Nil);
				},
				lines));
	});
var $author$project$Components$Atoms$Icon$github = $author$project$Components$Atoms$Icon$viewSocial(
	_List_fromArray(
		['M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z']));
var $elm$html$Html$span = _VirtualDom_node('span');
var $author$project$Components$Atoms$Icon$twitter = $author$project$Components$Atoms$Icon$viewSocial(
	_List_fromArray(
		['M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84']));
var $author$project$Components$Organisms$Footer$slice = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[
			$author$project$Libs$Html$Attributes$css(
			_List_fromArray(
				[
					'mt-8 border-t border-gray-200 py-8 px-8',
					$author$project$Libs$Tailwind$md(
					_List_fromArray(
						['flex items-center justify-between']))
				]))
		]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'flex space-x-6',
							$author$project$Libs$Tailwind$md(
							_List_fromArray(
								['order-2']))
						]))
				]),
			_List_fromArray(
				[
					A3(
					$author$project$Libs$Html$extLink,
					$author$project$Conf$constants.gD,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'text-gray-400',
									$author$project$Libs$Tailwind$hover(
									_List_fromArray(
										['text-gray-500']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['sr-only']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Twitter')
								])),
							$author$project$Components$Atoms$Icon$twitter('')
						])),
					A3(
					$author$project$Libs$Html$extLink,
					$author$project$Conf$constants.gB,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'text-gray-400',
									$author$project$Libs$Tailwind$hover(
									_List_fromArray(
										['text-gray-500']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['sr-only']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('GitHub')
								])),
							$author$project$Components$Atoms$Icon$github('')
						]))
				])),
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'mt-8 text-base text-gray-400',
							$author$project$Libs$Tailwind$md(
							_List_fromArray(
								['mt-0 order-1']))
						]))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('© 2022 Azimutt')
				]))
		]));
var $author$project$PagesComponents$Helpers$publicFooter = $author$project$Components$Organisms$Footer$slice;
var $author$project$Libs$Tailwind$batch = function (classes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filter,
			function (v) {
				return v !== '';
			},
			A2($elm$core$List$map, $elm$core$String$trim, classes)));
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$header = _VirtualDom_node('header');
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$nav = _VirtualDom_node('nav');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $author$project$Components$Organisms$Header$rightLinks = F2(
	function (theme, model) {
		return A2(
			$elm$html$Html$header,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(theme.T)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'flex justify-between items-center max-w-7xl mx-auto px-4 py-6',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['px-6'])),
									$author$project$Libs$Tailwind$md(
									_List_fromArray(
										['justify-start space-x-10'])),
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['px-8']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$a,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$href(model.L.aN.jH),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'flex justify-start items-center font-medium',
											$author$project$Libs$Tailwind$lg(
											_List_fromArray(
												['w-0 flex-1']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$img,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$src(model.L.aK.de),
											$elm$html$Html$Attributes$alt(model.L.aK.cr),
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'h-8 w-auto',
													$author$project$Libs$Tailwind$sm(
													_List_fromArray(
														['h-10']))
												]))
										]),
									_List_Nil),
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['ml-3 text-2xl', theme.dh]))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(model.L.aN.dh)
										]))
								])),
							A2(
							$elm$html$Html$nav,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'hidden space-x-10',
											$author$project$Libs$Tailwind$md(
											_List_fromArray(
												['flex']))
										]))
								]),
							A2(
								$elm$core$List$map,
								function (l) {
									return l.a4 ? A3(
										$author$project$Libs$Html$extLink,
										l.jH,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['text-base font-medium', theme.dh]))
											]),
										l.bI) : A2(
										$elm$html$Html$a,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$href(l.jH),
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['text-base font-medium', theme.dh]))
											]),
										l.bI);
								},
								model.H))
						]))
				]));
	});
var $author$project$Components$Organisms$Header$rightLinksWhite = function (model) {
	return A2(
		$author$project$Components$Organisms$Header$rightLinks,
		{
			T: 'bg-white',
			dh: $author$project$Libs$Tailwind$batch(
				_List_fromArray(
					[
						'text-gray-500',
						$author$project$Libs$Tailwind$hover(
						_List_fromArray(
							['text-gray-900']))
					]))
		},
		model);
};
var $author$project$PagesComponents$Helpers$publicHeader = $author$project$Components$Organisms$Header$rightLinksWhite(
	{
		L: {
			aK: {cr: 'Azimutt', de: '/logo.png'},
			aN: {
				dh: 'Azimutt',
				jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Home_)
			}
		},
		H: _List_fromArray(
			[
				{
				bI: _List_fromArray(
					[
						$elm$html$Html$text('Blog')
					]),
				a4: false,
				jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Blog)
			},
				{
				bI: _List_fromArray(
					[
						$elm$html$Html$text('Discussions')
					]),
				a4: true,
				jH: $author$project$Conf$constants.gy
			},
				{
				bI: _List_fromArray(
					[
						$elm$html$Html$text('Roadmap')
					]),
				a4: true,
				jH: $author$project$Conf$constants.gC
			},
				{
				bI: _List_fromArray(
					[
						$elm$html$Html$text('Source code')
					]),
				a4: true,
				jH: $author$project$Conf$constants.gB
			},
				{
				bI: _List_fromArray(
					[
						$elm$html$Html$text('Bug reports')
					]),
				a4: true,
				jH: $author$project$Conf$constants.gu
			},
				{
				bI: _List_fromArray(
					[
						$author$project$Components$Atoms$Icon$twitter(''),
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('sr-only')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Twitter')
							]))
					]),
				a4: true,
				jH: $author$project$Conf$constants.gD
			}
			])
	});
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$PagesComponents$Blog$View$viewBlog = function (model) {
	return _List_fromArray(
		[
			$author$project$PagesComponents$Helpers$publicHeader,
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['mt-24 max-w-prose mx-auto text-center']))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h1,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['text-4xl font-black']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Azimutt blog')
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['text-lg mt-6']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Hi! We are '),
							A3(
							$author$project$Libs$Html$extLink,
							'https://twitter.com/sbouaked',
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'text-indigo-600',
											$author$project$Libs$Tailwind$hover(
											_List_fromArray(
												['underline']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Samir')
								])),
							$elm$html$Html$text(' and '),
							A3(
							$author$project$Libs$Html$extLink,
							'https://twitter.com/loicknuchel',
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'text-indigo-600',
											$author$project$Libs$Tailwind$hover(
											_List_fromArray(
												['underline']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Loïc')
								])),
							$elm$html$Html$text('. We\'re building an application to empower developers understanding their relational databases. You can read about how we build it and how to use it on this blog.')
						]))
				])),
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['mt-12']))
				]),
			_List_fromArray(
				[
					$author$project$Components$Slices$Newsletter$centered($author$project$Conf$newsletter)
				])),
			A2(
			$elm$html$Html$hr,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['w-full bg-gray-100 my-12'])),
					A2($elm$html$Html$Attributes$style, 'height', '1px')
				]),
			_List_Nil),
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['mt-16 mb-24 max-w-prose mx-auto']))
				]),
			A2(
				$elm$core$List$intersperse,
				A2(
					$elm$html$Html$hr,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['w-full bg-gray-100 my-12'])),
							A2($elm$html$Html$Attributes$style, 'height', '1px')
						]),
					_List_Nil),
				A2(
					$elm$core$List$map,
					$author$project$Components$Slices$Blog$article,
					A2(
						$elm$core$List$sortBy,
						function (a) {
							return 0 - $elm$time$Time$posixToMillis(a.ad);
						},
						A2($elm$core$List$map, $elm$core$Tuple$second, model.dp))))),
			$author$project$PagesComponents$Helpers$newsletterSection,
			$author$project$PagesComponents$Helpers$publicFooter
		]);
};
var $author$project$Pages$Blog$view = function (model) {
	return {
		eV: $author$project$PagesComponents$Blog$View$viewBlog(model),
		aj: 'Azimutt blog - Explore your database schema'
	};
};
var $author$project$Pages$Blog$page = F2(
	function (_v0, _v1) {
		return $author$project$Page$element(
			{Y: $author$project$Pages$Blog$init, ab: $author$project$Pages$Blog$subscriptions, ac: $author$project$Pages$Blog$update, eQ: $author$project$Pages$Blog$view});
	});
var $author$project$Pages$Blog$Slug_$GotArticle = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$PagesComponents$Blog$Slug$Models$Loading = {$: 0};
var $author$project$Pages$Blog$Slug_$init = function (slug) {
	return _Utils_Tuple2(
		$author$project$PagesComponents$Blog$Slug$Models$Loading,
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$setClasses(
					{eV: '', hx: ''}),
					$author$project$Ports$trackPage('blog-article'),
					A2($author$project$PagesComponents$Blog$Slug$Updates$getArticle, $author$project$Pages$Blog$Slug_$GotArticle, slug)
				])));
};
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {a9: index, bW: match, ij: number, jo: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$never = _Regex_never;
var $author$project$Libs$Regex$asRegex = function (regex) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		A2(
			$elm$regex$Regex$fromStringWith,
			{gI: true, h3: false},
			regex));
};
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Libs$Regex$replace = F3(
	function (fromRegex, to, text) {
		return function (r) {
			return A3(
				$elm$regex$Regex$replace,
				r,
				function (_v0) {
					return to;
				},
				text);
		}(
			$author$project$Libs$Regex$asRegex(fromRegex));
	});
var $author$project$Pages$Blog$Slug_$subscriptions = function (_v0) {
	return $elm$core$Platform$Sub$none;
};
var $author$project$PagesComponents$Blog$Slug$Models$BadContent = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Blog$Slug$Models$BadSlug = function (a) {
	return {$: 1, a: a};
};
var $author$project$PagesComponents$Blog$Slug$Models$Loaded = function (a) {
	return {$: 3, a: a};
};
var $author$project$Pages$Blog$Slug_$update = F2(
	function (msg, _v0) {
		if (!msg.b.$) {
			var slug = msg.a;
			var content = msg.b.a;
			return _Utils_Tuple2(
				A3(
					$author$project$Libs$Result$fold,
					$author$project$PagesComponents$Blog$Slug$Models$BadContent,
					$author$project$PagesComponents$Blog$Slug$Models$Loaded,
					A2($author$project$PagesComponents$Blog$Slug$Updates$parseContent, slug, content)),
				$elm$core$Platform$Cmd$none);
		} else {
			var err = msg.b.a;
			return _Utils_Tuple2(
				$author$project$PagesComponents$Blog$Slug$Models$BadSlug(err),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$svg$Svg$pattern = $elm$svg$Svg$trustedNode('pattern');
var $elm$svg$Svg$Attributes$patternUnits = _VirtualDom_attribute('patternUnits');
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $author$project$Components$Atoms$Dots$dots = F4(
	function (patternId, dotsWidth, dotsHeight, styles) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromInt(dotsWidth)),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromInt(dotsHeight)),
					$elm$svg$Svg$Attributes$viewBox(
					'0 0 ' + ($elm$core$String$fromInt(dotsWidth) + (' ' + $elm$core$String$fromInt(dotsHeight)))),
					$elm$svg$Svg$Attributes$fill('none'),
					$author$project$Libs$Svg$Attributes$css(
					_List_fromArray(
						['absolute transform', styles]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$defs,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$pattern,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(patternId),
									$elm$svg$Svg$Attributes$x('0'),
									$elm$svg$Svg$Attributes$y('0'),
									$elm$svg$Svg$Attributes$width('20'),
									$elm$svg$Svg$Attributes$height('20'),
									$elm$svg$Svg$Attributes$patternUnits('userSpaceOnUse')
								]),
							_List_fromArray(
								[
									A2(
									$elm$svg$Svg$rect,
									_List_fromArray(
										[
											$elm$svg$Svg$Attributes$x('0'),
											$elm$svg$Svg$Attributes$y('0'),
											$elm$svg$Svg$Attributes$width('4'),
											$elm$svg$Svg$Attributes$height('4'),
											$elm$svg$Svg$Attributes$fill('currentColor'),
											$author$project$Libs$Svg$Attributes$css(
											_List_fromArray(
												['text-gray-200']))
										]),
									_List_Nil)
								]))
						])),
					A2(
					$elm$svg$Svg$rect,
					_List_fromArray(
						[
							$elm$svg$Svg$Attributes$width(
							$elm$core$String$fromInt(dotsWidth)),
							$elm$svg$Svg$Attributes$height(
							$elm$core$String$fromInt(dotsHeight)),
							$elm$svg$Svg$Attributes$fill('url(#' + (patternId + ')'))
						]),
					_List_Nil)
				]));
	});
var $author$project$Components$Atoms$Dots$dotsBottomRight = F2(
	function (id, height) {
		return A4($author$project$Components$Atoms$Dots$dots, id, 404, height, 'bottom-12 left-full translate-x-32');
	});
var $author$project$Components$Atoms$Dots$dotsMiddleLeft = F2(
	function (id, height) {
		return A4($author$project$Components$Atoms$Dots$dots, id, 404, height, 'top-1/2 right-full -translate-y-1/2 -translate-x-32');
	});
var $author$project$Components$Atoms$Dots$dotsTopRight = F2(
	function (id, height) {
		return A4($author$project$Components$Atoms$Dots$dots, id, 404, height, 'top-12 left-full translate-x-32');
	});
var $author$project$Components$Slices$Content$centered = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['relative py-16 bg-white overflow-hidden']))
			]),
		_List_fromArray(
			[
				A3(
				$author$project$Libs$Bool$cond,
				model.dB,
				A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'hidden',
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['block absolute inset-y-0 h-full w-full']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['relative h-full text-lg max-w-prose mx-auto'])),
									$author$project$Libs$Html$Attributes$ariaHidden(true)
								]),
							_List_fromArray(
								[
									A2($author$project$Components$Atoms$Dots$dotsTopRight, '74b3fd99-0a6f-4271-bef2-e80eeafdf357', 384),
									A2($author$project$Components$Atoms$Dots$dotsMiddleLeft, 'f210dbf6-a58d-4871-961e-36d5016a0f49', 384),
									A2($author$project$Components$Atoms$Dots$dotsBottomRight, 'd3eb07ae-5182-43e6-857d-35c643af9034', 384)
								]))
						])),
				A2($elm$html$Html$div, _List_Nil, _List_Nil)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'relative px-4',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['px-6'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-8']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['text-lg max-w-prose mx-auto']))
							]),
						_Utils_ap(
							_List_fromArray(
								[
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['block text-base text-center text-indigo-600 font-semibold tracking-wide uppercase']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(model.et)
										])),
									A2(
									$elm$html$Html$h1,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'mt-2 block text-3xl text-center leading-8 font-extrabold tracking-tight text-gray-900',
													$author$project$Libs$Tailwind$sm(
													_List_fromArray(
														['text-4xl']))
												]))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(model.aj)
										]))
								]),
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (intro) {
									return _List_fromArray(
										[
											A2(
											$elm$html$Html$p,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														['mt-8 text-xl text-gray-500 leading-8']))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(intro)
												]))
										]);
								},
								_List_Nil,
								model.dX))),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['mt-6 prose prose-indigo prose-lg text-gray-500 mx-auto']))
							]),
						model.bI)
					]))
			]));
};
var $elm$html$Html$li = _VirtualDom_node('li');
var $author$project$Components$Atoms$Markdown$defaultOptions = {
	e3: $elm$core$Maybe$Nothing,
	fd: $elm$core$Maybe$Just(
		{gH: true, jr: true}),
	ep: true,
	f5: true
};
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $elm_explorations$markdown$Markdown$toHtmlWith = _Markdown_toHtml;
var $author$project$Components$Atoms$Markdown$render = F3(
	function (options, classes, md) {
		return A3(
			$elm_explorations$markdown$Markdown$toHtmlWith,
			options,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('markdown'),
					$elm$html$Html$Attributes$classList(
					A2(
						$elm$core$List$map,
						function (c) {
							return _Utils_Tuple2(c, true);
						},
						classes))
				]),
			md);
	});
var $author$project$Components$Atoms$Markdown$markdown = F2(
	function (classes, md) {
		return A3($author$project$Components$Atoms$Markdown$render, $author$project$Components$Atoms$Markdown$defaultOptions, classes, md);
	});
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $author$project$PagesComponents$Blog$Slug$View$viewArticle = function (model) {
	return _List_fromArray(
		[
			$author$project$PagesComponents$Helpers$publicHeader,
			function () {
			switch (model.$) {
				case 0:
					return $author$project$Components$Slices$Content$centered(
						{
							bI: _List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('my-64 text-center'),
											A2($elm$html$Html$Attributes$style, 'height', '5000px')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Loading')
										]))
								]),
							dB: false,
							dX: $elm$core$Maybe$Nothing,
							et: 'Loading',
							aj: 'Loading'
						});
				case 1:
					var err = model.a;
					return $author$project$Components$Slices$Content$centered(
						{
							bI: _List_fromArray(
								[
									$elm$html$Html$text(
									$author$project$Libs$Http$errorToString(err))
								]),
							dB: false,
							dX: $elm$core$Maybe$Nothing,
							et: 'Error',
							aj: 'Bad url'
						});
				case 2:
					var errs = model.a;
					return $author$project$Components$Slices$Content$centered(
						{
							bI: _List_fromArray(
								[
									A2(
									$elm$html$Html$ul,
									_List_Nil,
									A2(
										$elm$core$List$map,
										function (err) {
											return A2(
												$elm$html$Html$li,
												_List_Nil,
												_List_fromArray(
													[
														$elm$html$Html$text(err)
													]));
										},
										$author$project$Libs$Nel$toList(errs)))
								]),
							dB: false,
							dX: $elm$core$Maybe$Nothing,
							et: 'Error',
							aj: 'Bad content :('
						});
				default:
					var content = model.a;
					return $author$project$Components$Slices$Content$centered(
						{
							bI: _List_fromArray(
								[
									A2(
									$author$project$Components$Atoms$Markdown$markdown,
									_List_fromArray(
										['blog-article']),
									content.eV)
								]),
							dB: true,
							dX: $elm$core$Maybe$Nothing,
							et: A2($elm$core$Maybe$withDefault, 'Azimutt', content.gJ),
							aj: content.aj
						});
			}
		}(),
			$author$project$PagesComponents$Helpers$newsletterSection,
			$author$project$PagesComponents$Helpers$publicFooter
		]);
};
var $author$project$Pages$Blog$Slug_$view = function (model) {
	return {
		eV: $author$project$PagesComponents$Blog$Slug$View$viewArticle(model),
		aj: function () {
			if (model.$ === 3) {
				var article = model.a;
				return article.aj + ' - Azimutt blog';
			} else {
				return 'Azimutt blog - Explore your database schema';
			}
		}()
	};
};
var $author$project$Pages$Blog$Slug_$page = F2(
	function (_v0, req) {
		return $author$project$Page$element(
			{
				Y: $author$project$Pages$Blog$Slug_$init(
					A3($author$project$Libs$Regex$replace, '[^a-zA-Z0-9_-]', '-', req.iB.cb)),
				ab: $author$project$Pages$Blog$Slug_$subscriptions,
				ac: $author$project$Pages$Blog$Slug_$update,
				eQ: $author$project$Pages$Blog$Slug_$view
			});
	});
var $author$project$PagesComponents$Projects$Id_$Models$CursorSelect = 1;
var $author$project$PagesComponents$Projects$Id_$Models$Noop = function (a) {
	return {$: 58, a: a};
};
var $author$project$Libs$Hotkey$hotkey = {cr: false, gZ: false, bU: '', cU: false, iq: false, fQ: false, aV: false, eI: $elm$core$Maybe$Nothing};
var $author$project$Conf$ids = {gU: 'confirm-dialog', ha: 'erd', hi: 'find-path-dialog', hs: 'help-dialog', hZ: 'modal', ia: 'new-layout-dialog', iM: 'prompt-dialog', i5: 'schema-analysis-dialog', c8: 'app-nav-search', i9: 'selection-box', jb: 'settings-dialog', jd: 'sharing-dialog', jk: 'source-upload-dialog'};
var $author$project$Libs$Hotkey$target = {dv: $elm$core$Maybe$Nothing, t: $elm$core$Maybe$Nothing, eH: $elm$core$Maybe$Nothing};
var $author$project$Conf$hotkeys = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'search-open',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: '/'})
				])),
			_Utils_Tuple2(
			'search-up',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{
						bU: 'ArrowUp',
						eI: $elm$core$Maybe$Just(
							_Utils_update(
								$author$project$Libs$Hotkey$target,
								{
									t: $elm$core$Maybe$Just($author$project$Conf$ids.c8),
									eH: $elm$core$Maybe$Just('input')
								}))
					})
				])),
			_Utils_Tuple2(
			'search-down',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{
						bU: 'ArrowDown',
						eI: $elm$core$Maybe$Just(
							_Utils_update(
								$author$project$Libs$Hotkey$target,
								{
									t: $elm$core$Maybe$Just($author$project$Conf$ids.c8),
									eH: $elm$core$Maybe$Just('input')
								}))
					})
				])),
			_Utils_Tuple2(
			'search-confirm',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{
						bU: 'Enter',
						eI: $elm$core$Maybe$Just(
							_Utils_update(
								$author$project$Libs$Hotkey$target,
								{
									t: $elm$core$Maybe$Just($author$project$Conf$ids.c8),
									eH: $elm$core$Maybe$Just('input')
								}))
					})
				])),
			_Utils_Tuple2(
			'remove',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'd'}),
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'Backspace'}),
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'Delete'})
				])),
			_Utils_Tuple2(
			'save',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 's', iq: true, fQ: true})
				])),
			_Utils_Tuple2(
			'move-up',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowUp'})
				])),
			_Utils_Tuple2(
			'move-right',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowRight'})
				])),
			_Utils_Tuple2(
			'move-down',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowDown'})
				])),
			_Utils_Tuple2(
			'move-left',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowLeft'})
				])),
			_Utils_Tuple2(
			'move-up-big',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowUp', aV: true})
				])),
			_Utils_Tuple2(
			'move-right-big',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowRight', aV: true})
				])),
			_Utils_Tuple2(
			'move-down-big',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowDown', aV: true})
				])),
			_Utils_Tuple2(
			'move-left-big',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'ArrowLeft', aV: true})
				])),
			_Utils_Tuple2(
			'move-forward',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 'ArrowUp'})
				])),
			_Utils_Tuple2(
			'move-backward',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 'ArrowDown'})
				])),
			_Utils_Tuple2(
			'move-to-top',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 'ArrowUp', aV: true})
				])),
			_Utils_Tuple2(
			'move-to-back',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 'ArrowDown', aV: true})
				])),
			_Utils_Tuple2(
			'select-all',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 'a', fQ: true})
				])),
			_Utils_Tuple2(
			'save-layout',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{cr: true, bU: 'l'})
				])),
			_Utils_Tuple2(
			'create-virtual-relation',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{cr: true, bU: 'v'})
				])),
			_Utils_Tuple2(
			'find-path',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{cr: true, bU: 'p'})
				])),
			_Utils_Tuple2(
			'reset-zoom',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: '0'})
				])),
			_Utils_Tuple2(
			'fit-to-screen',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{cr: true, gZ: true, bU: '0'})
				])),
			_Utils_Tuple2(
			'undo',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 'z'})
				])),
			_Utils_Tuple2(
			'redo',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{gZ: true, bU: 'Z', aV: true})
				])),
			_Utils_Tuple2(
			'cancel',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: 'Escape'})
				])),
			_Utils_Tuple2(
			'help',
			_List_fromArray(
				[
					_Utils_update(
					$author$project$Libs$Hotkey$hotkey,
					{bU: '?'})
				]))
		]));
var $author$project$PagesComponents$Projects$Id_$Models$ErdConf$embedDefault = {dy: false, bM: false, dH: true, dM: true, aq: false, as: false, fC: false, eq: false, c9: false, jh: false};
var $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$frozen = 'frozen';
var $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$full = 'full';
var $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$layout = 'layout';
var $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$move = 'move';
var $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$static = 'static';
var $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$all = _List_fromArray(
	[
		{B: $author$project$PagesComponents$Projects$Id_$Models$ErdConf$embedDefault, cE: 'nothing move, like a image', t: $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$frozen},
		{
		B: _Utils_update(
			$author$project$PagesComponents$Projects$Id_$Models$ErdConf$embedDefault,
			{aq: true, c9: true}),
		cE: 'highlight on hover but no move',
		t: $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$static
	},
		{
		B: _Utils_update(
			$author$project$PagesComponents$Projects$Id_$Models$ErdConf$embedDefault,
			{aq: true, fC: true, c9: true}),
		cE: 'can move things but not more',
		t: $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$move
	},
		{
		B: _Utils_update(
			$author$project$PagesComponents$Projects$Id_$Models$ErdConf$embedDefault,
			{aq: true, as: true, fC: true, c9: true}),
		cE: 'can update the layout',
		t: $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$layout
	},
		{
		B: _Utils_update(
			$author$project$PagesComponents$Projects$Id_$Models$ErdConf$embedDefault,
			{bM: true, aq: true, as: true, fC: true, c9: true, jh: true}),
		cE: 'can do anything, except save',
		t: $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$full
	}
	]);
var $author$project$Libs$List$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $author$project$Libs$List$findBy = F3(
	function (matcher, value, list) {
		return A2(
			$author$project$Libs$List$find,
			function (a) {
				return _Utils_eq(
					matcher(a),
					value);
			},
			list);
	});
var $author$project$Pages$Embed$initConf = function (mode) {
	return A3(
		$author$project$Libs$Maybe$mapOrElse,
		function ($) {
			return $.B;
		},
		$author$project$PagesComponents$Projects$Id_$Models$ErdConf$embedDefault,
		A3(
			$author$project$Libs$List$findBy,
			function ($) {
				return $.t;
			},
			mode,
			$author$project$PagesComponents$Projects$Id_$Models$EmbedMode$all));
};
var $author$project$Ports$ListenKeys = function (a) {
	return {$: 17, a: a};
};
var $author$project$Ports$listenHotkeys = function (keys) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$ListenKeys(keys));
};
var $author$project$Ports$LoadRemoteProject = function (a) {
	return {$: 9, a: a};
};
var $author$project$Ports$loadRemoteProject = function (projectUrl) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$LoadRemoteProject(projectUrl));
};
var $author$project$Libs$Task$send = function (msg) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$identity,
		$elm$core$Task$succeed(msg));
};
var $author$project$Libs$Models$Position$zero = {at: 0, aD: 0};
var $author$project$Libs$Models$Size$zero = {ap: 0, aF: 0};
var $author$project$Models$ScreenProps$zero = {iG: $author$project$Libs$Models$Position$zero, l: $author$project$Libs$Models$Size$zero};
var $author$project$Pages$Embed$init = function (query) {
	return _Utils_Tuple2(
		{
			B: $author$project$Pages$Embed$initConf(
				A3($author$project$Libs$Dict$getOrElse, 'mode', 'static', query)),
			a1: $elm$core$Maybe$Nothing,
			gW: $elm$core$Maybe$Nothing,
			g_: 1,
			cF: $elm$core$Maybe$Nothing,
			ha: $elm$core$Maybe$Nothing,
			bM: $elm$core$Maybe$Nothing,
			hr: $elm$core$Maybe$Nothing,
			bP: $elm$core$Maybe$Nothing,
			bR: $elm$core$Maybe$Nothing,
			hL: false,
			h8: {
				bi: false,
				er: {al: 0, dh: ''}
			},
			h9: $elm$core$Maybe$Nothing,
			iw: _List_Nil,
			aR: '',
			c_: '',
			iL: $elm$core$Maybe$Nothing,
			i4: $elm$core$Maybe$Nothing,
			i6: $author$project$Models$ScreenProps$zero,
			i9: $elm$core$Maybe$Nothing,
			dc: $elm$core$Maybe$Nothing,
			jc: $elm$core$Maybe$Nothing,
			jj: $elm$core$Maybe$Nothing,
			jF: 0,
			aW: _List_Nil,
			jI: $elm$core$Maybe$Nothing
		},
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$setClasses(
					{eV: 'h-full', hx: 'h-full'}),
					$author$project$Ports$trackPage('embed'),
					A2(
					$elm$core$Maybe$withDefault,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$Noop('load embed')),
					A2(
						$elm$core$Maybe$map,
						$author$project$Ports$loadRemoteProject,
						A2($elm$core$Dict$get, 'project_url', query))),
					$author$project$Ports$listenHotkeys($author$project$Conf$hotkeys)
				])));
};
var $author$project$PagesComponents$Projects$Id_$Models$ContextMenuClose = {$: 40};
var $author$project$PagesComponents$Projects$Id_$Models$DragEnd = function (a) {
	return {$: 43, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$DragMove = function (a) {
	return {$: 42, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$DropdownToggle = function (a) {
	return {$: 36, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$JsMessage = function (a) {
	return {$: 56, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$VRMove = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$VirtualRelationMsg = function (a) {
	return {$: 24, a: a};
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event = F6(
	function (keys, button, clientPos, offsetPos, pagePos, screenPos) {
		return {bE: button, gQ: clientPos, bf: keys, ik: offsetPos, fK: pagePos, i7: screenPos};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$BackButton = 4;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ErrorButton = 0;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$ForwardButton = 5;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MainButton = 1;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$MiddleButton = 2;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$SecondButton = 3;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId = function (id) {
	switch (id) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 5;
		default:
			return 0;
	}
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder = A2(
	$elm$json$Json$Decode$map,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonFromId,
	A2($elm$json$Json$Decode$field, 'button', $elm$json$Json$Decode$int));
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $mpizenberg$elm_pointer_events$Internal$Decode$clientPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'clientX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'clientY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$Keys = F3(
	function (alt, ctrl, shift) {
		return {cr: alt, gZ: ctrl, aV: shift};
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $mpizenberg$elm_pointer_events$Internal$Decode$keys = A4(
	$elm$json$Json$Decode$map3,
	$mpizenberg$elm_pointer_events$Internal$Decode$Keys,
	A2($elm$json$Json$Decode$field, 'altKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'shiftKey', $elm$json$Json$Decode$bool));
var $elm$json$Json$Decode$map6 = _Json_map6;
var $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'offsetX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'offsetY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$pagePos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Internal$Decode$screenPos = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (a, b) {
			return _Utils_Tuple2(a, b);
		}),
	A2($elm$json$Json$Decode$field, 'screenX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'screenY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder = A7($elm$json$Json$Decode$map6, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$Event, $mpizenberg$elm_pointer_events$Internal$Decode$keys, $mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$buttonDecoder, $mpizenberg$elm_pointer_events$Internal$Decode$clientPos, $mpizenberg$elm_pointer_events$Internal$Decode$offsetPos, $mpizenberg$elm_pointer_events$Internal$Decode$pagePos, $mpizenberg$elm_pointer_events$Internal$Decode$screenPos);
var $author$project$Libs$Models$Position$Position = F2(
	function (left, top) {
		return {at: left, aD: top};
	});
var $author$project$Libs$Models$Position$fromTuple = function (_v0) {
	var left = _v0.a;
	var top = _v0.b;
	return A2($author$project$Libs$Models$Position$Position, left, top);
};
var $elm$browser$Browser$Events$Document = 0;
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {fN: pids, ga: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (!node) {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {e7: event, bU: key};
	});
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (!node) {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.fN,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.bU;
		var event = _v0.e7;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.ga);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onClick = A2($elm$browser$Browser$Events$on, 0, 'click');
var $author$project$Ports$Error = function (a) {
	return {$: 8, a: a};
};
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $author$project$Ports$GotHotkey = function (a) {
	return {$: 5, a: a};
};
var $author$project$Ports$GotKeyHold = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$Ports$GotLocalFile = F5(
	function (a, b, c, d, e) {
		return {$: 2, a: a, b: b, c: c, d: d, e: e};
	});
var $author$project$Ports$GotProjects = function (a) {
	return {$: 1, a: a};
};
var $author$project$Ports$GotRemoteFile = F6(
	function (a, b, c, d, e, f) {
		return {$: 3, a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $author$project$Ports$GotSizes = function (a) {
	return {$: 0, a: a};
};
var $author$project$Ports$GotSourceId = F4(
	function (a, b, c, d) {
		return {$: 4, a: a, b: b, c: c, d: d};
	});
var $author$project$Ports$GotToast = F2(
	function (a, b) {
		return {$: 7, a: a, b: b};
	});
var $author$project$Libs$Models$SizeChange = F4(
	function (id, position, size, seeds) {
		return {t: id, iG: position, i8: seeds, l: size};
	});
var $author$project$Libs$Models$Position$decode = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Libs$Models$Position$Position,
	A2($elm$json$Json$Decode$field, 'left', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'top', $elm$json$Json$Decode$float));
var $author$project$Libs$Models$Size$Size = F2(
	function (width, height) {
		return {ap: height, aF: width};
	});
var $author$project$Libs$Models$Size$decode = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Libs$Models$Size$Size,
	A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$float));
var $author$project$Models$Project$ColumnRef$ColumnRef = F2(
	function (table, column) {
		return {r: column, G: table};
	});
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Models$Project$ColumnName$decode = $elm$json$Json$Decode$string;
var $author$project$Conf$schema = {cD: 'public'};
var $author$project$Models$Project$TableId$fromString = function (id) {
	var _v0 = A2($elm$core$String$split, '.', id);
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var schema = _v0.a;
		var _v1 = _v0.b;
		var table = _v1.a;
		return _Utils_Tuple2(schema, table);
	} else {
		return _Utils_Tuple2($author$project$Conf$schema.cD, id);
	}
};
var $author$project$Models$Project$TableId$decode = A2($elm$json$Json$Decode$map, $author$project$Models$Project$TableId$fromString, $elm$json$Json$Decode$string);
var $author$project$Models$Project$ColumnRef$decode = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Models$Project$ColumnRef$ColumnRef,
	A2($elm$json$Json$Decode$field, 'table', $author$project$Models$Project$TableId$decode),
	A2($elm$json$Json$Decode$field, 'column', $author$project$Models$Project$ColumnName$decode));
var $author$project$Models$Project$SourceId$SourceId = $elm$core$Basics$identity;
var $author$project$Models$Project$SourceId$new = function (id) {
	return id;
};
var $author$project$Models$Project$SourceId$decode = A2($elm$json$Json$Decode$map, $author$project$Models$Project$SourceId$new, $elm$json$Json$Decode$string);
var $mpizenberg$elm_file$FileValue$File = F5(
	function (value, name, mime, size, lastModified) {
		return {hJ: lastModified, fB: mime, cW: name, l: size, eP: value};
	});
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $mpizenberg$elm_file$FileValue$decoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_file$FileValue$File,
	$elm$json$Json$Decode$value,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'size', $elm$json$Json$Decode$int),
	A2(
		$elm$json$Json$Decode$map,
		$elm$time$Time$millisToPosix,
		A2($elm$json$Json$Decode$field, 'lastModified', $elm$json$Json$Decode$int)));
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$map4 = _Json_map4;
var $author$project$Libs$Json$Decode$matchOn = F2(
	function (field, decode) {
		return A2(
			$elm$json$Json$Decode$andThen,
			decode,
			A2($elm$json$Json$Decode$field, field, $elm$json$Json$Decode$string));
	});
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $author$project$Libs$Json$Decode$maybeField = F2(
	function (field, decoder) {
		return $elm$json$Json$Decode$maybe(
			A2($elm$json$Json$Decode$field, field, decoder));
	});
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $author$project$Libs$Json$Decode$customDict = F2(
	function (buildKey, decoder) {
		return A2(
			$elm$json$Json$Decode$map,
			function (d) {
				return $elm$core$Dict$fromList(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var k = _v0.a;
							var a = _v0.b;
							return _Utils_Tuple2(
								buildKey(k),
								a);
						},
						$elm$core$Dict$toList(d)));
			},
			$elm$json$Json$Decode$dict(decoder));
	});
var $author$project$Libs$Time$decode = A2($elm$json$Json$Decode$map, $elm$time$Time$millisToPosix, $elm$json$Json$Decode$int);
var $author$project$Models$Project$Layout$Layout = F5(
	function (canvas, tables, hiddenTables, createdAt, updatedAt) {
		return {dt: canvas, e1: createdAt, dT: hiddenTables, jr: tables, gj: updatedAt};
	});
var $author$project$Models$Project$CanvasProps$CanvasProps = F2(
	function (position, zoom) {
		return {iG: position, dm: zoom};
	});
var $author$project$Libs$Models$ZoomLevel$decode = $elm$json$Json$Decode$float;
var $author$project$Models$Project$CanvasProps$decode = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Models$Project$CanvasProps$CanvasProps,
	A2($elm$json$Json$Decode$field, 'position', $author$project$Libs$Models$Position$decode),
	A2($elm$json$Json$Decode$field, 'zoom', $author$project$Libs$Models$ZoomLevel$decode));
var $author$project$Models$Project$TableProps$TableProps = F7(
	function (id, position, size, color, columns, selected, hiddenColumns) {
		return {n: color, W: columns, X: hiddenColumns, t: id, iG: position, bp: selected, l: size};
	});
var $author$project$Libs$Tailwind$black = 'black';
var $author$project$Libs$Tailwind$default = 'default';
var $author$project$Libs$Tailwind$gray = 'gray';
var $author$project$Libs$Tailwind$amber = 'amber';
var $author$project$Libs$Tailwind$blue = 'blue';
var $author$project$Libs$Tailwind$cyan = 'cyan';
var $author$project$Libs$Tailwind$emerald = 'emerald';
var $author$project$Libs$Tailwind$fuchsia = 'fuchsia';
var $author$project$Libs$Tailwind$green = 'green';
var $author$project$Libs$Tailwind$lime = 'lime';
var $author$project$Libs$Tailwind$orange = 'orange';
var $author$project$Libs$Tailwind$pink = 'pink';
var $author$project$Libs$Tailwind$purple = 'purple';
var $author$project$Libs$Tailwind$red = 'red';
var $author$project$Libs$Tailwind$rose = 'rose';
var $author$project$Libs$Tailwind$sky = 'sky';
var $author$project$Libs$Tailwind$teal = 'teal';
var $author$project$Libs$Tailwind$violet = 'violet';
var $author$project$Libs$Tailwind$yellow = 'yellow';
var $author$project$Libs$Tailwind$list = _List_fromArray(
	[$author$project$Libs$Tailwind$indigo, $author$project$Libs$Tailwind$violet, $author$project$Libs$Tailwind$purple, $author$project$Libs$Tailwind$fuchsia, $author$project$Libs$Tailwind$pink, $author$project$Libs$Tailwind$rose, $author$project$Libs$Tailwind$red, $author$project$Libs$Tailwind$orange, $author$project$Libs$Tailwind$amber, $author$project$Libs$Tailwind$yellow, $author$project$Libs$Tailwind$lime, $author$project$Libs$Tailwind$green, $author$project$Libs$Tailwind$emerald, $author$project$Libs$Tailwind$teal, $author$project$Libs$Tailwind$cyan, $author$project$Libs$Tailwind$sky, $author$project$Libs$Tailwind$blue]);
var $author$project$Libs$Tailwind$primary = 'primary';
var $author$project$Libs$Tailwind$white = 'white';
var $author$project$Libs$Tailwind$all = _Utils_ap(
	$author$project$Libs$Tailwind$list,
	_List_fromArray(
		[$author$project$Libs$Tailwind$primary, $author$project$Libs$Tailwind$default, $author$project$Libs$Tailwind$black, $author$project$Libs$Tailwind$white, $author$project$Libs$Tailwind$gray]));
var $author$project$Libs$Tailwind$decodeColor = A2(
	$elm$json$Json$Decode$andThen,
	function (name) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			$elm$json$Json$Decode$succeed,
			$elm$json$Json$Decode$fail('Unknown color: \'' + (name + '\'')),
			A2(
				$author$project$Libs$List$find,
				function (_v0) {
					var c = _v0;
					return _Utils_eq(c, name);
				},
				$author$project$Libs$Tailwind$all));
	},
	$elm$json$Json$Decode$string);
var $author$project$Libs$Json$Decode$maybeWithDefault = F2(
	function (decoder, a) {
		return A2(
			$elm$json$Json$Decode$map,
			$elm$core$Maybe$withDefault(a),
			$elm$json$Json$Decode$maybe(
				decoder(a)));
	});
var $author$project$Libs$Json$Decode$defaultField = F3(
	function (name, decoder, _default) {
		return A2(
			$author$project$Libs$Json$Decode$maybeWithDefault,
			function (_v0) {
				return A2($elm$json$Json$Decode$field, name, decoder);
			},
			_default);
	});
var $elm$json$Json$Decode$map7 = _Json_map7;
var $author$project$Models$Project$TableProps$decode = A8(
	$elm$json$Json$Decode$map7,
	$author$project$Models$Project$TableProps$TableProps,
	A2($elm$json$Json$Decode$field, 'id', $author$project$Models$Project$TableId$decode),
	A2($elm$json$Json$Decode$field, 'position', $author$project$Libs$Models$Position$decode),
	A3($author$project$Libs$Json$Decode$defaultField, 'size', $author$project$Libs$Models$Size$decode, $author$project$Libs$Models$Size$zero),
	A2($elm$json$Json$Decode$field, 'color', $author$project$Libs$Tailwind$decodeColor),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'columns',
		$elm$json$Json$Decode$list($author$project$Models$Project$ColumnName$decode),
		_List_Nil),
	A3($author$project$Libs$Json$Decode$defaultField, 'selected', $elm$json$Json$Decode$bool, false),
	A3($author$project$Libs$Json$Decode$defaultField, 'hiddenColumns', $elm$json$Json$Decode$bool, false));
var $author$project$Models$Project$Layout$decode = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Models$Project$Layout$Layout,
	A2($elm$json$Json$Decode$field, 'canvas', $author$project$Models$Project$CanvasProps$decode),
	A2(
		$elm$json$Json$Decode$field,
		'tables',
		$elm$json$Json$Decode$list($author$project$Models$Project$TableProps$decode)),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'hiddenTables',
		$elm$json$Json$Decode$list($author$project$Models$Project$TableProps$decode),
		_List_Nil),
	A2($elm$json$Json$Decode$field, 'createdAt', $author$project$Libs$Time$decode),
	A2($elm$json$Json$Decode$field, 'updatedAt', $author$project$Libs$Time$decode));
var $author$project$Models$Project$LayoutName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$ProjectId$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$ProjectName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$ProjectSettings$ProjectSettings = F7(
	function (findPath, removedSchemas, removeViews, removedTables, hiddenColumns, columnOrder, columnBasicTypes) {
		return {bG: columnBasicTypes, bH: columnOrder, bM: findPath, X: hiddenColumns, iV: removeViews, iW: removedSchemas, iX: removedTables};
	});
var $author$project$Models$ColumnOrder$OderByName = 2;
var $author$project$Models$ColumnOrder$OderByType = 3;
var $author$project$Models$ColumnOrder$OrderByIndex = 0;
var $author$project$Models$ColumnOrder$fromString = function (order) {
	switch (order) {
		case 'sql':
			return 0;
		case 'property':
			return 1;
		case 'name':
			return 2;
		case 'type':
			return 3;
		default:
			return 0;
	}
};
var $author$project$Models$ColumnOrder$decode = A2($elm$json$Json$Decode$map, $author$project$Models$ColumnOrder$fromString, $elm$json$Json$Decode$string);
var $author$project$Models$Project$FindPathSettings$decodeColumns = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			$elm$json$Json$Decode$string,
			A2(
			$elm$json$Json$Decode$map,
			$elm$core$String$join(', '),
			$elm$json$Json$Decode$list($author$project$Models$Project$ColumnName$decode))
		]));
var $author$project$Models$Project$TableId$show = function (_v0) {
	var schema = _v0.a;
	var table = _v0.b;
	return _Utils_eq(schema, $author$project$Conf$schema.cD) ? table : (schema + ('.' + table));
};
var $author$project$Models$Project$FindPathSettings$decodeTables = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			$elm$json$Json$Decode$string,
			A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$map($author$project$Models$Project$TableId$show),
				$elm$core$String$join(', ')),
			$elm$json$Json$Decode$list($author$project$Models$Project$TableId$decode))
		]));
var $author$project$Models$Project$FindPathSettings$decode = function (_default) {
	return A4(
		$elm$json$Json$Decode$map3,
		$author$project$Models$Project$FindPathSettings$FindPathSettings,
		A3($author$project$Libs$Json$Decode$defaultField, 'maxPathLength', $elm$json$Json$Decode$int, _default.cT),
		A3($author$project$Libs$Json$Decode$defaultField, 'ignoredTables', $author$project$Models$Project$FindPathSettings$decodeTables, _default.cN),
		A3($author$project$Libs$Json$Decode$defaultField, 'ignoredColumns', $author$project$Models$Project$FindPathSettings$decodeColumns, _default.cM));
};
var $author$project$Models$Project$SchemaName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$ProjectSettings$HiddenColumns = F3(
	function (list, props, relations) {
		return {au: list, aA: props, iU: relations};
	});
var $author$project$Models$Project$ProjectSettings$decodeHiddenColumns = function (_default) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A4(
				$elm$json$Json$Decode$map3,
				$author$project$Models$Project$ProjectSettings$HiddenColumns,
				A3($author$project$Libs$Json$Decode$defaultField, 'list', $elm$json$Json$Decode$string, _default.au),
				A3($author$project$Libs$Json$Decode$defaultField, 'props', $elm$json$Json$Decode$bool, _default.aA),
				A3($author$project$Libs$Json$Decode$defaultField, 'relations', $elm$json$Json$Decode$bool, _default.iU)),
				A2(
				$elm$json$Json$Decode$map,
				function (list) {
					return {au: list, aA: _default.aA, iU: _default.iU};
				},
				$elm$json$Json$Decode$string)
			]));
};
var $author$project$Libs$Json$Decode$defaultFieldDeep = F3(
	function (name, decoder, _default) {
		return A2(
			$author$project$Libs$Json$Decode$maybeWithDefault,
			function (_v0) {
				return A2(
					$elm$json$Json$Decode$field,
					name,
					decoder(_default));
			},
			_default);
	});
var $author$project$Models$Project$ProjectSettings$decode = function (_default) {
	return A8(
		$elm$json$Json$Decode$map7,
		$author$project$Models$Project$ProjectSettings$ProjectSettings,
		A3($author$project$Libs$Json$Decode$defaultFieldDeep, 'findPath', $author$project$Models$Project$FindPathSettings$decode, _default.bM),
		A3(
			$author$project$Libs$Json$Decode$defaultField,
			'removedSchemas',
			$elm$json$Json$Decode$list($author$project$Models$Project$SchemaName$decode),
			_default.iW),
		A3($author$project$Libs$Json$Decode$defaultField, 'removeViews', $elm$json$Json$Decode$bool, _default.iV),
		A3($author$project$Libs$Json$Decode$defaultField, 'removedTables', $elm$json$Json$Decode$string, _default.iX),
		A3($author$project$Libs$Json$Decode$defaultFieldDeep, 'hiddenColumns', $author$project$Models$Project$ProjectSettings$decodeHiddenColumns, _default.X),
		A3($author$project$Libs$Json$Decode$defaultField, 'columnOrder', $author$project$Models$ColumnOrder$decode, _default.bH),
		A3($author$project$Libs$Json$Decode$defaultField, 'columnBasicTypes', $elm$json$Json$Decode$bool, _default.bG));
};
var $author$project$Models$Project$Source$Source = function (id) {
	return function (name) {
		return function (kind) {
			return function (content) {
				return function (tables) {
					return function (relations) {
						return function (enabled) {
							return function (fromSample) {
								return function (createdAt) {
									return function (updatedAt) {
										return {bI: content, e1: createdAt, e6: enabled, fb: fromSample, t: id, S: kind, cW: name, iU: relations, jr: tables, gj: updatedAt};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm$json$Json$Decode$array = _Json_decodeArray;
var $author$project$Models$Project$Origin$Origin = F2(
	function (id, lines) {
		return {t: id, fy: lines};
	});
var $author$project$Libs$Models$FileLineIndex$decode = $elm$json$Json$Decode$int;
var $author$project$Models$Project$Origin$decode = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Models$Project$Origin$Origin,
	A2($elm$json$Json$Decode$field, 'id', $author$project$Models$Project$SourceId$decode),
	A2(
		$elm$json$Json$Decode$field,
		'lines',
		$elm$json$Json$Decode$list($author$project$Libs$Models$FileLineIndex$decode)));
var $author$project$Models$Project$RelationName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$Relation$Relation = F5(
	function (id, name, src, ref, origins) {
		return {t: id, cW: name, aS: origins, fW: ref, de: src};
	});
var $author$project$Models$Project$ColumnId$from = function (ref) {
	return _Utils_Tuple2(ref.G, ref.r);
};
var $author$project$Models$Project$RelationId$new = F2(
	function (src, ref) {
		return _Utils_Tuple2(
			$author$project$Models$Project$ColumnId$from(src),
			$author$project$Models$Project$ColumnId$from(ref));
	});
var $author$project$Models$Project$Relation$new = F4(
	function (name, src, ref, origins) {
		return A5(
			$author$project$Models$Project$Relation$Relation,
			A2($author$project$Models$Project$RelationId$new, src, ref),
			name,
			src,
			ref,
			origins);
	});
var $author$project$Models$Project$Relation$decode = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Models$Project$Relation$new,
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$RelationName$decode),
	A2($elm$json$Json$Decode$field, 'src', $author$project$Models$Project$ColumnRef$decode),
	A2($elm$json$Json$Decode$field, 'ref', $author$project$Models$Project$ColumnRef$decode),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Models$Project$SampleKey$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$SourceKind$LocalFile = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$Models$Project$SourceKind$RemoteFile = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Models$Project$SourceKind$UserDefined = {$: 2};
var $author$project$Libs$Models$FileName$decode = $elm$json$Json$Decode$string;
var $author$project$Libs$Models$FileSize$decode = $elm$json$Json$Decode$int;
var $author$project$Libs$Models$FileUpdatedAt$decode = $author$project$Libs$Time$decode;
var $author$project$Libs$Models$FileUrl$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$SourceKind$decode = A2(
	$author$project$Libs$Json$Decode$matchOn,
	'kind',
	function (kind) {
		switch (kind) {
			case 'LocalFile':
				return A4(
					$elm$json$Json$Decode$map3,
					$author$project$Models$Project$SourceKind$LocalFile,
					A2($elm$json$Json$Decode$field, 'name', $author$project$Libs$Models$FileName$decode),
					A2($elm$json$Json$Decode$field, 'size', $author$project$Libs$Models$FileSize$decode),
					A2($elm$json$Json$Decode$field, 'modified', $author$project$Libs$Models$FileUpdatedAt$decode));
			case 'RemoteFile':
				return A3(
					$elm$json$Json$Decode$map2,
					$author$project$Models$Project$SourceKind$RemoteFile,
					A2($elm$json$Json$Decode$field, 'url', $author$project$Libs$Models$FileUrl$decode),
					A2($elm$json$Json$Decode$field, 'size', $author$project$Libs$Models$FileSize$decode));
			case 'UserDefined':
				return $elm$json$Json$Decode$succeed($author$project$Models$Project$SourceKind$UserDefined);
			default:
				var other = kind;
				return $elm$json$Json$Decode$fail('Not supported kind of SourceKind \'' + (other + '\''));
		}
	});
var $author$project$Models$Project$SourceLine$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$SourceName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$Table$Table = function (id) {
	return function (schema) {
		return function (name) {
			return function (view) {
				return function (columns) {
					return function (primaryKey) {
						return function (uniques) {
							return function (indexes) {
								return function (checks) {
									return function (comment) {
										return function (origins) {
											return {a$: checks, W: columns, cz: comment, t: id, ba: indexes, cW: name, aS: origins, aT: primaryKey, E: schema, bw: uniques, eQ: view};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Models$Project$Check$Check = F4(
	function (name, columns, predicate, origins) {
		return {W: columns, cW: name, aS: origins, em: predicate};
	});
var $author$project$Models$Project$CheckName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$Check$decode = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Models$Project$Check$Check,
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$CheckName$decode),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'columns',
		$elm$json$Json$Decode$list($author$project$Models$Project$ColumnName$decode),
		_List_Nil),
	A2($elm$json$Json$Decode$field, 'predicate', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Models$Project$Column$Column = F7(
	function (index, name, kind, nullable, _default, comment, origins) {
		return {cz: comment, cD: _default, a9: index, S: kind, cW: name, av: nullable, aS: origins};
	});
var $author$project$Models$Project$ColumnType$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$ColumnValue$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$Comment$Comment = F2(
	function (text, origins) {
		return {aS: origins, dh: text};
	});
var $author$project$Models$Project$Comment$decode = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Models$Project$Comment$Comment,
	A2($elm$json$Json$Decode$field, 'text', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Models$Project$Column$decode = A7(
	$elm$json$Json$Decode$map6,
	F6(
		function (n, t, nu, d, c, s) {
			return function (i) {
				return A7($author$project$Models$Project$Column$Column, i, n, t, nu, d, c, s);
			};
		}),
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$ColumnName$decode),
	A2($elm$json$Json$Decode$field, 'type', $author$project$Models$Project$ColumnType$decode),
	A3($author$project$Libs$Json$Decode$defaultField, 'nullable', $elm$json$Json$Decode$bool, false),
	A2($author$project$Libs$Json$Decode$maybeField, 'default', $author$project$Models$Project$ColumnValue$decode),
	A2($author$project$Libs$Json$Decode$maybeField, 'comment', $author$project$Models$Project$Comment$decode),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Models$Project$Index$Index = F4(
	function (name, columns, definition, origins) {
		return {W: columns, aH: definition, cW: name, aS: origins};
	});
var $author$project$Models$Project$IndexName$decode = $elm$json$Json$Decode$string;
var $elm$json$Json$Decode$oneOrMoreHelp = F2(
	function (toValue, xs) {
		if (!xs.b) {
			return $elm$json$Json$Decode$fail('a ARRAY with at least ONE element');
		} else {
			var y = xs.a;
			var ys = xs.b;
			return $elm$json$Json$Decode$succeed(
				A2(toValue, y, ys));
		}
	});
var $elm$json$Json$Decode$oneOrMore = F2(
	function (toValue, decoder) {
		return A2(
			$elm$json$Json$Decode$andThen,
			$elm$json$Json$Decode$oneOrMoreHelp(toValue),
			$elm$json$Json$Decode$list(decoder));
	});
var $author$project$Libs$Json$Decode$nel = function (decoder) {
	return A2($elm$json$Json$Decode$oneOrMore, $author$project$Libs$Nel$Nel, decoder);
};
var $author$project$Models$Project$Index$decode = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Models$Project$Index$Index,
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$IndexName$decode),
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		$author$project$Libs$Json$Decode$nel($author$project$Models$Project$ColumnName$decode)),
	A2($elm$json$Json$Decode$field, 'definition', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Models$Project$PrimaryKey$PrimaryKey = F3(
	function (name, columns, origins) {
		return {W: columns, cW: name, aS: origins};
	});
var $author$project$Models$Project$PrimaryKeyName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$PrimaryKey$decode = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Models$Project$PrimaryKey$PrimaryKey,
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$PrimaryKeyName$decode),
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		$author$project$Libs$Json$Decode$nel($author$project$Models$Project$ColumnName$decode)),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Models$Project$TableName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$Unique$Unique = F4(
	function (name, columns, definition, origins) {
		return {W: columns, aH: definition, cW: name, aS: origins};
	});
var $author$project$Models$Project$UniqueName$decode = $elm$json$Json$Decode$string;
var $author$project$Models$Project$Unique$decode = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Models$Project$Unique$Unique,
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$UniqueName$decode),
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		$author$project$Libs$Json$Decode$nel($author$project$Models$Project$ColumnName$decode)),
	A2($elm$json$Json$Decode$field, 'definition', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Libs$Ned$Ned = F2(
	function (head, tail) {
		return {cK: head, gc: tail};
	});
var $author$project$Libs$Ned$build = F2(
	function (head, tail) {
		return A2(
			$author$project$Libs$Ned$Ned,
			head,
			A2(
				$elm$core$Dict$remove,
				head.a,
				$elm$core$Dict$fromList(tail)));
	});
var $author$project$Libs$Ned$fromNel = function (nel) {
	return A2($author$project$Libs$Ned$build, nel.cK, nel.gc);
};
var $author$project$Libs$Nel$map = F2(
	function (f, xs) {
		return {
			cK: f(xs.cK),
			gc: A2($elm$core$List$map, f, xs.gc)
		};
	});
var $author$project$Libs$Ned$fromNelMap = F2(
	function (getKey, nel) {
		return $author$project$Libs$Ned$fromNel(
			A2(
				$author$project$Libs$Nel$map,
				function (item) {
					return _Utils_Tuple2(
						getKey(item),
						item);
				},
				nel));
	});
var $author$project$Libs$Nel$indexedMap = F2(
	function (f, xs) {
		return {
			cK: A2(f, 0, xs.cK),
			gc: A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, a) {
						return A2(f, i + 1, a);
					}),
				xs.gc)
		};
	});
var $author$project$Libs$Json$Decode$map10 = function (callback) {
	return function (da) {
		return function (db) {
			return function (dc) {
				return function (dd) {
					return function (de) {
						return function (df) {
							return function (dg) {
								return function (dh) {
									return function (di) {
										return function (dj) {
											return A3(
												$elm$json$Json$Decode$map2,
												F2(
													function (_v0, _v3) {
														var _v1 = _v0.a;
														var a = _v1.a;
														var b = _v1.b;
														var c = _v1.c;
														var _v2 = _v0.b;
														var d = _v2.a;
														var e = _v2.b;
														var f = _v2.c;
														var _v4 = _v3.a;
														var g = _v4.a;
														var h = _v4.b;
														var _v5 = _v3.b;
														var i = _v5.a;
														var j = _v5.b;
														return callback(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
													}),
												A7(
													$elm$json$Json$Decode$map6,
													F6(
														function (a, b, c, d, e, f) {
															return _Utils_Tuple2(
																_Utils_Tuple3(a, b, c),
																_Utils_Tuple3(d, e, f));
														}),
													da,
													db,
													dc,
													dd,
													de,
													df),
												A5(
													$elm$json$Json$Decode$map4,
													F4(
														function (g, h, i, j) {
															return _Utils_Tuple2(
																_Utils_Tuple2(g, h),
																_Utils_Tuple2(i, j));
														}),
													dg,
													dh,
													di,
													dj));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Models$Project$Table$decode = $author$project$Libs$Json$Decode$map10(
	function (s) {
		return function (t) {
			return function (v) {
				return function (c) {
					return function (p) {
						return function (u) {
							return function (i) {
								return function (ch) {
									return function (co) {
										return function (so) {
											return $author$project$Models$Project$Table$Table(
												_Utils_Tuple2(s, t))(s)(t)(v)(c)(p)(u)(i)(ch)(co)(so);
										};
									};
								};
							};
						};
					};
				};
			};
		};
	})(
	A2($elm$json$Json$Decode$field, 'schema', $author$project$Models$Project$SchemaName$decode))(
	A2($elm$json$Json$Decode$field, 'table', $author$project$Models$Project$TableName$decode))(
	A3($author$project$Libs$Json$Decode$defaultField, 'view', $elm$json$Json$Decode$bool, false))(
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Libs$Nel$indexedMap(
					F2(
						function (i, c) {
							return c(i);
						})),
				$author$project$Libs$Ned$fromNelMap(
					function ($) {
						return $.cW;
					})),
			$author$project$Libs$Json$Decode$nel($author$project$Models$Project$Column$decode))))(
	A2($author$project$Libs$Json$Decode$maybeField, 'primaryKey', $author$project$Models$Project$PrimaryKey$decode))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'uniques',
		$elm$json$Json$Decode$list($author$project$Models$Project$Unique$decode),
		_List_Nil))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'indexes',
		$elm$json$Json$Decode$list($author$project$Models$Project$Index$decode),
		_List_Nil))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'checks',
		$elm$json$Json$Decode$list($author$project$Models$Project$Check$decode),
		_List_Nil))(
	A2($author$project$Libs$Json$Decode$maybeField, 'comment', $author$project$Models$Project$Comment$decode))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'origins',
		$elm$json$Json$Decode$list($author$project$Models$Project$Origin$decode),
		_List_Nil));
var $author$project$Libs$Dict$fromListMap = F2(
	function (getKey, list) {
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (item) {
					return _Utils_Tuple2(
						getKey(item),
						item);
				},
				list));
	});
var $author$project$Models$Project$Source$decode = $author$project$Libs$Json$Decode$map10($author$project$Models$Project$Source$Source)(
	A2($elm$json$Json$Decode$field, 'id', $author$project$Models$Project$SourceId$decode))(
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$SourceName$decode))(
	A2($elm$json$Json$Decode$field, 'kind', $author$project$Models$Project$SourceKind$decode))(
	A2(
		$elm$json$Json$Decode$field,
		'content',
		$elm$json$Json$Decode$array($author$project$Models$Project$SourceLine$decode)))(
	A2(
		$elm$json$Json$Decode$map,
		$author$project$Libs$Dict$fromListMap(
			function ($) {
				return $.t;
			}),
		A2(
			$elm$json$Json$Decode$field,
			'tables',
			$elm$json$Json$Decode$list($author$project$Models$Project$Table$decode))))(
	A2(
		$elm$json$Json$Decode$field,
		'relations',
		$elm$json$Json$Decode$list($author$project$Models$Project$Relation$decode)))(
	A3($author$project$Libs$Json$Decode$defaultField, 'enabled', $elm$json$Json$Decode$bool, true))(
	A2($author$project$Libs$Json$Decode$maybeField, 'fromSample', $author$project$Models$Project$SampleKey$decode))(
	A2($elm$json$Json$Decode$field, 'createdAt', $author$project$Libs$Time$decode))(
	A2($elm$json$Json$Decode$field, 'updatedAt', $author$project$Libs$Time$decode));
var $author$project$Models$Project$LayoutName$fromString = function (name) {
	return name;
};
var $author$project$Models$Project$CanvasProps$zero = {iG: $author$project$Libs$Models$Position$zero, dm: 1};
var $author$project$Models$Project$Layout$init = function (now) {
	return {dt: $author$project$Models$Project$CanvasProps$zero, e1: now, dT: _List_Nil, jr: _List_Nil, gj: now};
};
var $author$project$Libs$Json$Decode$map9 = function (callback) {
	return function (da) {
		return function (db) {
			return function (dc) {
				return function (dd) {
					return function (de) {
						return function (df) {
							return function (dg) {
								return function (dh) {
									return function (di) {
										return A3(
											$elm$json$Json$Decode$map2,
											F2(
												function (_v0, _v3) {
													var _v1 = _v0.a;
													var a = _v1.a;
													var b = _v1.b;
													var c = _v1.c;
													var _v2 = _v0.b;
													var d = _v2.a;
													var e = _v2.b;
													var f = _v2.c;
													var g = _v3.a;
													var h = _v3.b;
													var i = _v3.c;
													return A9(callback, a, b, c, d, e, f, g, h, i);
												}),
											A7(
												$elm$json$Json$Decode$map6,
												F6(
													function (a, b, c, d, e, f) {
														return _Utils_Tuple2(
															_Utils_Tuple3(a, b, c),
															_Utils_Tuple3(d, e, f));
													}),
												da,
												db,
												dc,
												dd,
												de,
												df),
											A4(
												$elm$json$Json$Decode$map3,
												F3(
													function (g, h, i) {
														return _Utils_Tuple3(g, h, i);
													}),
												dg,
												dh,
												di));
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $author$project$Libs$List$filterNot = F2(
	function (predicate, list) {
		return A2(
			$elm$core$List$filter,
			function (a) {
				return !predicate(a);
			},
			list);
	});
var $author$project$Libs$List$merge = F4(
	function (getKey, mergeValue, l1, l2) {
		return _Utils_ap(
			A2(
				$elm$core$List$map,
				function (a1) {
					return A3(
						$author$project$Libs$Maybe$mapOrElse,
						mergeValue(a1),
						a1,
						A2(
							$author$project$Libs$List$find,
							function (a2) {
								return _Utils_eq(
									getKey(a1),
									getKey(a2));
							},
							l2));
				},
				l1),
			A2(
				$author$project$Libs$List$filterNot,
				function (a2) {
					return A2(
						$elm$core$List$any,
						function (a1) {
							return _Utils_eq(
								getKey(a1),
								getKey(a2));
						},
						l1);
				},
				l2));
	});
var $author$project$Models$Project$Relation$merge = F2(
	function (r1, r2) {
		return {
			t: r1.t,
			cW: r1.cW,
			aS: _Utils_ap(r1.aS, r2.aS),
			fW: r1.fW,
			de: r1.de
		};
	});
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $author$project$Models$Project$shouldDisplayRelation = F2(
	function (tables, relation) {
		return A2($elm$core$Dict$member, relation.de.G, tables) && A2($elm$core$Dict$member, relation.fW.G, tables);
	});
var $author$project$Models$Project$computeRelations = F2(
	function (tables, sources) {
		return A3(
			$elm$core$List$foldr,
			A2(
				$author$project$Libs$List$merge,
				function ($) {
					return $.t;
				},
				$author$project$Models$Project$Relation$merge),
			_List_Nil,
			A2(
				$elm$core$List$map,
				function (s) {
					return A2(
						$elm$core$List$filter,
						$author$project$Models$Project$shouldDisplayRelation(tables),
						s.iU);
				},
				A2(
					$elm$core$List$filter,
					function ($) {
						return $.e6;
					},
					sources)));
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $author$project$Libs$Dict$fuse = F3(
	function (mergeValue, d1, d2) {
		return A6(
			$elm$core$Dict$merge,
			$elm$core$Dict$insert,
			F4(
				function (k, a1, a2, acc) {
					return A3(
						$elm$core$Dict$insert,
						k,
						A2(mergeValue, a1, a2),
						acc);
				}),
			$elm$core$Dict$insert,
			d1,
			d2,
			$elm$core$Dict$empty);
	});
var $author$project$Libs$Maybe$orElse = F2(
	function (other, item) {
		var _v0 = _Utils_Tuple2(item, other);
		if (!_v0.a.$) {
			var a1 = _v0.a.a;
			return $elm$core$Maybe$Just(a1);
		} else {
			var _v1 = _v0.a;
			var res = _v0.b;
			return res;
		}
	});
var $author$project$Libs$Maybe$merge = F3(
	function (mergeValue, m1, m2) {
		return A2(
			$author$project$Libs$Maybe$orElse,
			m2,
			A2(
				$elm$core$Maybe$map,
				function (a1) {
					return A3(
						$author$project$Libs$Maybe$mapOrElse,
						mergeValue(a1),
						a1,
						m2);
				},
				m1));
	});
var $author$project$Libs$Ned$fromDict = function (dict) {
	var _v0 = $elm$core$Dict$toList(dict);
	if (_v0.b) {
		var head = _v0.a;
		var tail = _v0.b;
		return $elm$core$Maybe$Just(
			A2($author$project$Libs$Ned$build, head, tail));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Libs$Ned$toDict = function (ned) {
	return A3($elm$core$Dict$insert, ned.cK.a, ned.cK.b, ned.gc);
};
var $author$project$Libs$Ned$merge = F3(
	function (mergeValue, d1, d2) {
		return A2(
			$elm$core$Maybe$withDefault,
			d1,
			$author$project$Libs$Ned$fromDict(
				A6(
					$elm$core$Dict$merge,
					$elm$core$Dict$insert,
					F4(
						function (k, a1, a2, acc) {
							return A3(
								$elm$core$Dict$insert,
								k,
								A2(mergeValue, a1, a2),
								acc);
						}),
					$elm$core$Dict$insert,
					$author$project$Libs$Ned$toDict(d1),
					$author$project$Libs$Ned$toDict(d2),
					$elm$core$Dict$empty)));
	});
var $author$project$Models$Project$ColumnName$merge = F2(
	function (n1, _v0) {
		return n1;
	});
var $author$project$Models$Project$Check$merge = F2(
	function (c1, c2) {
		return {
			W: A4($author$project$Libs$List$merge, $elm$core$Basics$identity, $author$project$Models$Project$ColumnName$merge, c1.W, c2.W),
			cW: c1.cW,
			aS: _Utils_ap(c1.aS, c2.aS),
			em: c1.em
		};
	});
var $author$project$Models$Project$ColumnValue$merge = F2(
	function (v1, _v0) {
		return v1;
	});
var $author$project$Models$Project$Comment$merge = F2(
	function (c1, c2) {
		return {
			aS: _Utils_ap(c1.aS, c2.aS),
			dh: c1.dh
		};
	});
var $author$project$Models$Project$Column$merge = F2(
	function (c1, c2) {
		return {
			cz: A3($author$project$Libs$Maybe$merge, $author$project$Models$Project$Comment$merge, c1.cz, c2.cz),
			cD: A3($author$project$Libs$Maybe$merge, $author$project$Models$Project$ColumnValue$merge, c1.cD, c2.cD),
			a9: c1.a9,
			S: c1.S,
			cW: c1.cW,
			av: c1.av && c2.av,
			aS: _Utils_ap(c1.aS, c2.aS)
		};
	});
var $author$project$Libs$Nel$merge = F4(
	function (getKey, mergeValue, l1, l2) {
		return A2(
			$elm$core$Maybe$withDefault,
			l1,
			$author$project$Libs$Nel$fromList(
				A4(
					$author$project$Libs$List$merge,
					getKey,
					mergeValue,
					$author$project$Libs$Nel$toList(l1),
					$author$project$Libs$Nel$toList(l2))));
	});
var $author$project$Models$Project$Index$merge = F2(
	function (i1, i2) {
		return {
			W: A4($author$project$Libs$Nel$merge, $elm$core$Basics$identity, $author$project$Models$Project$ColumnName$merge, i1.W, i2.W),
			aH: i1.aH,
			cW: i1.cW,
			aS: _Utils_ap(i1.aS, i2.aS)
		};
	});
var $author$project$Models$Project$PrimaryKey$merge = F2(
	function (pk1, pk2) {
		return {
			W: A4($author$project$Libs$Nel$merge, $elm$core$Basics$identity, $author$project$Models$Project$ColumnName$merge, pk1.W, pk2.W),
			cW: pk1.cW,
			aS: _Utils_ap(pk1.aS, pk2.aS)
		};
	});
var $author$project$Models$Project$Unique$merge = F2(
	function (u1, u2) {
		return {
			W: A4($author$project$Libs$Nel$merge, $elm$core$Basics$identity, $author$project$Models$Project$ColumnName$merge, u1.W, u2.W),
			aH: u1.aH,
			cW: u1.cW,
			aS: _Utils_ap(u1.aS, u2.aS)
		};
	});
var $author$project$Models$Project$Table$merge = F2(
	function (t1, t2) {
		return {
			a$: A4(
				$author$project$Libs$List$merge,
				function ($) {
					return $.cW;
				},
				$author$project$Models$Project$Check$merge,
				t1.a$,
				t2.a$),
			W: A3($author$project$Libs$Ned$merge, $author$project$Models$Project$Column$merge, t1.W, t2.W),
			cz: A3($author$project$Libs$Maybe$merge, $author$project$Models$Project$Comment$merge, t1.cz, t2.cz),
			t: t1.t,
			ba: A4(
				$author$project$Libs$List$merge,
				function ($) {
					return $.cW;
				},
				$author$project$Models$Project$Index$merge,
				t1.ba,
				t2.ba),
			cW: t1.cW,
			aS: _Utils_ap(t1.aS, t2.aS),
			aT: A3($author$project$Libs$Maybe$merge, $author$project$Models$Project$PrimaryKey$merge, t1.aT, t2.aT),
			E: t1.E,
			bw: A4(
				$author$project$Libs$List$merge,
				function ($) {
					return $.cW;
				},
				$author$project$Models$Project$Unique$merge,
				t1.bw,
				t2.bw),
			eQ: t1.eQ
		};
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$regex$Regex$contains = _Regex_contains;
var $author$project$Libs$Regex$match = F2(
	function (regex, text) {
		return function (r) {
			return A2($elm$regex$Regex$contains, r, text);
		}(
			$author$project$Libs$Regex$asRegex(regex));
	});
var $author$project$Models$Project$ProjectSettings$removeTable = function (removedTables) {
	var names = A2(
		$author$project$Libs$List$filterNot,
		$elm$core$String$isEmpty,
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ',', removedTables)));
	return function (_v0) {
		var tableName = _v0.b;
		return A2(
			$elm$core$List$any,
			function (name) {
				return _Utils_eq(tableName, name) || A2($author$project$Libs$Regex$match, '^' + (name + '$'), tableName);
			},
			names);
	};
};
var $author$project$Models$Project$shouldDisplayTable = F2(
	function (settings, table) {
		var isViewRemoved = table.eQ && settings.iV;
		var isTableRemoved = A2($author$project$Models$Project$ProjectSettings$removeTable, settings.iX, table.t);
		var isSchemaRemoved = A2($elm$core$List$member, table.E, settings.iW);
		return (!isSchemaRemoved) && ((!isViewRemoved) && (!isTableRemoved));
	});
var $author$project$Models$Project$computeTables = F2(
	function (settings, sources) {
		return A3(
			$elm$core$List$foldr,
			$author$project$Libs$Dict$fuse($author$project$Models$Project$Table$merge),
			$elm$core$Dict$empty,
			A2(
				$elm$core$List$map,
				function (s) {
					return A2(
						$elm$core$Dict$filter,
						function (_v0) {
							return $author$project$Models$Project$shouldDisplayTable(settings);
						},
						s.jr);
				},
				A2(
					$elm$core$List$filter,
					function ($) {
						return $.e6;
					},
					sources)));
	});
var $author$project$Models$Project$compute = function (project) {
	return function (tables) {
		return _Utils_update(
			project,
			{
				iU: A2($author$project$Models$Project$computeRelations, tables, project.cc),
				jr: tables
			});
	}(
		A2($author$project$Models$Project$computeTables, project.dc, project.cc));
};
var $author$project$Models$Project$new = F9(
	function (id, name, sources, layout, usedLayout, layouts, settings, createdAt, updatedAt) {
		return $author$project$Models$Project$compute(
			{e1: createdAt, t: id, as: layout, d_: layouts, cW: name, iU: _List_Nil, dc: settings, cc: sources, jr: $elm$core$Dict$empty, gj: updatedAt, eO: usedLayout});
	});
var $author$project$Models$Project$decode = $author$project$Libs$Json$Decode$map9($author$project$Models$Project$new)(
	A2($elm$json$Json$Decode$field, 'id', $author$project$Models$Project$ProjectId$decode))(
	A2($elm$json$Json$Decode$field, 'name', $author$project$Models$Project$ProjectName$decode))(
	A2(
		$elm$json$Json$Decode$field,
		'sources',
		$elm$json$Json$Decode$list($author$project$Models$Project$Source$decode)))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'layout',
		$author$project$Models$Project$Layout$decode,
		$author$project$Models$Project$Layout$init(
			$elm$time$Time$millisToPosix(0))))(
	A2($author$project$Libs$Json$Decode$maybeField, 'usedLayout', $author$project$Models$Project$LayoutName$decode))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'layouts',
		A2($author$project$Libs$Json$Decode$customDict, $author$project$Models$Project$LayoutName$fromString, $author$project$Models$Project$Layout$decode),
		$elm$core$Dict$empty))(
	A3($author$project$Libs$Json$Decode$defaultFieldDeep, 'settings', $author$project$Models$Project$ProjectSettings$decode, $author$project$Models$Project$ProjectSettings$init))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'createdAt',
		$author$project$Libs$Time$decode,
		$elm$time$Time$millisToPosix(0)))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'updatedAt',
		$author$project$Libs$Time$decode,
		$elm$time$Time$millisToPosix(0)));
var $author$project$Storage$ProjectV1$ProjectV1 = function (id) {
	return function (name) {
		return function (sources) {
			return function (schema) {
				return function (layouts) {
					return function (currentLayout) {
						return function (settings) {
							return function (createdAt) {
								return function (updatedAt) {
									return function (fromSample) {
										return {e1: createdAt, e2: currentLayout, fb: fromSample, t: id, d_: layouts, cW: name, E: schema, dc: settings, cc: sources, gj: updatedAt};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Storage$ProjectV1$LayoutV1 = F5(
	function (canvas, tables, hiddenTables, createdAt, updatedAt) {
		return {dt: canvas, e1: createdAt, dT: hiddenTables, jr: tables, gj: updatedAt};
	});
var $author$project$Storage$ProjectV1$TablePropsV1 = F5(
	function (id, position, color, columns, selected) {
		return {n: color, W: columns, t: id, iG: position, bp: selected};
	});
var $author$project$Storage$ProjectV1$stringAsTableId = function (id) {
	var _v0 = A2($elm$core$String$split, '.', id);
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var schema = _v0.a;
		var _v1 = _v0.b;
		var table = _v1.a;
		return _Utils_Tuple2(schema, table);
	} else {
		return _Utils_Tuple2($author$project$Conf$schema.cD, id);
	}
};
var $author$project$Storage$ProjectV1$decodeTableId = A2($elm$json$Json$Decode$map, $author$project$Storage$ProjectV1$stringAsTableId, $elm$json$Json$Decode$string);
var $author$project$Storage$ProjectV1$decodeTableProps = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Storage$ProjectV1$TablePropsV1,
	A2($elm$json$Json$Decode$field, 'id', $author$project$Storage$ProjectV1$decodeTableId),
	A2($elm$json$Json$Decode$field, 'position', $author$project$Libs$Models$Position$decode),
	A2($elm$json$Json$Decode$field, 'color', $author$project$Libs$Tailwind$decodeColor),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'columns',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
		_List_Nil),
	A3($author$project$Libs$Json$Decode$defaultField, 'selected', $elm$json$Json$Decode$bool, false));
var $author$project$Storage$ProjectV1$decodeLayout = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Storage$ProjectV1$LayoutV1,
	A2($elm$json$Json$Decode$field, 'canvas', $author$project$Models$Project$CanvasProps$decode),
	A2(
		$elm$json$Json$Decode$field,
		'tables',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeTableProps)),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'hiddenTables',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeTableProps),
		_List_Nil),
	A2($elm$json$Json$Decode$field, 'createdAt', $author$project$Libs$Time$decode),
	A2($elm$json$Json$Decode$field, 'updatedAt', $author$project$Libs$Time$decode));
var $author$project$Storage$ProjectV1$ProjectSettingsV1 = function (findPath) {
	return {bM: findPath};
};
var $author$project$Storage$ProjectV1$FindPathSettingsV1 = F3(
	function (maxPathLength, ignoredTables, ignoredColumns) {
		return {cM: ignoredColumns, cN: ignoredTables, cT: maxPathLength};
	});
var $author$project$Storage$ProjectV1$decodeFindPathSettings = function (_default) {
	return A4(
		$elm$json$Json$Decode$map3,
		$author$project$Storage$ProjectV1$FindPathSettingsV1,
		A3($author$project$Libs$Json$Decode$defaultField, 'maxPathLength', $elm$json$Json$Decode$int, _default.cT),
		A3(
			$author$project$Libs$Json$Decode$defaultField,
			'ignoredTables',
			$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeTableId),
			_default.cN),
		A3(
			$author$project$Libs$Json$Decode$defaultField,
			'ignoredColumns',
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
			_default.cM));
};
var $author$project$Storage$ProjectV1$decodeProjectSettings = function (_default) {
	return A2(
		$elm$json$Json$Decode$map,
		$author$project$Storage$ProjectV1$ProjectSettingsV1,
		A3($author$project$Libs$Json$Decode$defaultFieldDeep, 'findPath', $author$project$Storage$ProjectV1$decodeFindPathSettings, _default.bM));
};
var $author$project$Storage$ProjectV1$ProjectSourceV1 = F5(
	function (id, name, source, createdAt, updatedAt) {
		return {e1: createdAt, t: id, cW: name, F: source, gj: updatedAt};
	});
var $author$project$Storage$ProjectV1$LocalFileV1 = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$Storage$ProjectV1$RemoteFileV1 = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Storage$ProjectV1$decodeProjectSourceContent = A2(
	$author$project$Libs$Json$Decode$matchOn,
	'kind',
	function (kind) {
		switch (kind) {
			case 'LocalFile':
				return A4(
					$elm$json$Json$Decode$map3,
					$author$project$Storage$ProjectV1$LocalFileV1,
					A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'size', $elm$json$Json$Decode$int),
					A2($elm$json$Json$Decode$field, 'lastModified', $author$project$Libs$Time$decode));
			case 'RemoteFile':
				return A3(
					$elm$json$Json$Decode$map2,
					$author$project$Storage$ProjectV1$RemoteFileV1,
					A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'size', $elm$json$Json$Decode$int));
			default:
				var other = kind;
				return $elm$json$Json$Decode$fail('Not supported kind of ProjectSourceContent \'' + (other + '\''));
		}
	});
var $author$project$Storage$ProjectV1$decodeProjectSource = A6(
	$elm$json$Json$Decode$map5,
	$author$project$Storage$ProjectV1$ProjectSourceV1,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'source', $author$project$Storage$ProjectV1$decodeProjectSourceContent),
	A2($elm$json$Json$Decode$field, 'createdAt', $author$project$Libs$Time$decode),
	A2($elm$json$Json$Decode$field, 'updatedAt', $author$project$Libs$Time$decode));
var $author$project$Storage$ProjectV1$SchemaV1 = F3(
	function (tables, relations, layout) {
		return {as: layout, iU: relations, jr: tables};
	});
var $author$project$Storage$ProjectV1$RelationV1 = F4(
	function (name, src, ref, sources) {
		return {cW: name, fW: ref, cc: sources, de: src};
	});
var $author$project$Storage$ProjectV1$ColumnRefV1 = F2(
	function (table, column) {
		return {r: column, G: table};
	});
var $author$project$Storage$ProjectV1$decodeColumnRef = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Storage$ProjectV1$ColumnRefV1,
	A2($elm$json$Json$Decode$field, 'table', $author$project$Storage$ProjectV1$decodeTableId),
	A2($elm$json$Json$Decode$field, 'column', $elm$json$Json$Decode$string));
var $author$project$Storage$ProjectV1$SourceV1 = F2(
	function (id, lines) {
		return {t: id, fy: lines};
	});
var $author$project$Storage$ProjectV1$SourceLineV1 = F2(
	function (no, text) {
		return {ea: no, dh: text};
	});
var $author$project$Storage$ProjectV1$decodeSourceLine = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Storage$ProjectV1$SourceLineV1,
	A2($elm$json$Json$Decode$field, 'no', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'text', $elm$json$Json$Decode$string));
var $author$project$Storage$ProjectV1$decodeSource = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Storage$ProjectV1$SourceV1,
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'lines',
		$author$project$Libs$Json$Decode$nel($author$project$Storage$ProjectV1$decodeSourceLine)));
var $author$project$Storage$ProjectV1$decodeRelation = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Storage$ProjectV1$RelationV1,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'src', $author$project$Storage$ProjectV1$decodeColumnRef),
	A2($elm$json$Json$Decode$field, 'ref', $author$project$Storage$ProjectV1$decodeColumnRef),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$TableV1 = function (id) {
	return function (schema) {
		return function (name) {
			return function (columns) {
				return function (primaryKey) {
					return function (uniques) {
						return function (indexes) {
							return function (checks) {
								return function (comment) {
									return function (sources) {
										return {a$: checks, W: columns, cz: comment, t: id, ba: indexes, cW: name, aT: primaryKey, E: schema, cc: sources, bw: uniques};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$Storage$ProjectV1$CheckV1 = F4(
	function (name, columns, predicate, sources) {
		return {W: columns, cW: name, em: predicate, cc: sources};
	});
var $author$project$Storage$ProjectV1$decodeCheck = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Storage$ProjectV1$CheckV1,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'columns',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string),
		_List_Nil),
	A2($elm$json$Json$Decode$field, 'predicate', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$ColumnV1 = F7(
	function (index, name, kind, nullable, _default, comment, sources) {
		return {cz: comment, cD: _default, a9: index, S: kind, cW: name, av: nullable, cc: sources};
	});
var $author$project$Storage$ProjectV1$CommentV1 = F2(
	function (text, sources) {
		return {cc: sources, dh: text};
	});
var $author$project$Storage$ProjectV1$decodeComment = A3(
	$elm$json$Json$Decode$map2,
	$author$project$Storage$ProjectV1$CommentV1,
	A2($elm$json$Json$Decode$field, 'text', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$decodeColumn = A7(
	$elm$json$Json$Decode$map6,
	F6(
		function (n, t, nu, d, c, s) {
			return function (i) {
				return A7($author$project$Storage$ProjectV1$ColumnV1, i, n, t, nu, d, c, s);
			};
		}),
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string),
	A3($author$project$Libs$Json$Decode$defaultField, 'nullable', $elm$json$Json$Decode$bool, false),
	A2($author$project$Libs$Json$Decode$maybeField, 'default', $elm$json$Json$Decode$string),
	A2($author$project$Libs$Json$Decode$maybeField, 'comment', $author$project$Storage$ProjectV1$decodeComment),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$IndexV1 = F4(
	function (name, columns, definition, sources) {
		return {W: columns, aH: definition, cW: name, cc: sources};
	});
var $author$project$Storage$ProjectV1$decodeIndex = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Storage$ProjectV1$IndexV1,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		$author$project$Libs$Json$Decode$nel($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'definition', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$PrimaryKeyV1 = F3(
	function (name, columns, sources) {
		return {W: columns, cW: name, cc: sources};
	});
var $author$project$Storage$ProjectV1$decodePrimaryKey = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Storage$ProjectV1$PrimaryKeyV1,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		$author$project$Libs$Json$Decode$nel($elm$json$Json$Decode$string)),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$UniqueV1 = F4(
	function (name, columns, definition, sources) {
		return {W: columns, aH: definition, cW: name, cc: sources};
	});
var $author$project$Storage$ProjectV1$decodeUnique = A5(
	$elm$json$Json$Decode$map4,
	$author$project$Storage$ProjectV1$UniqueV1,
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		$author$project$Libs$Json$Decode$nel($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'definition', $elm$json$Json$Decode$string),
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$decodeTable = $author$project$Libs$Json$Decode$map9(
	F9(
		function (s, t, c, p, u, i, ch, co, so) {
			return $author$project$Storage$ProjectV1$TableV1(
				_Utils_Tuple2(s, t))(s)(t)(c)(p)(u)(i)(ch)(co)(so);
		}))(
	A2($elm$json$Json$Decode$field, 'schema', $elm$json$Json$Decode$string))(
	A2($elm$json$Json$Decode$field, 'table', $elm$json$Json$Decode$string))(
	A2(
		$elm$json$Json$Decode$field,
		'columns',
		A2(
			$elm$json$Json$Decode$map,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Libs$Nel$indexedMap(
					F2(
						function (i, c) {
							return c(i);
						})),
				$author$project$Libs$Ned$fromNelMap(
					function ($) {
						return $.cW;
					})),
			$author$project$Libs$Json$Decode$nel($author$project$Storage$ProjectV1$decodeColumn))))(
	A2($author$project$Libs$Json$Decode$maybeField, 'primaryKey', $author$project$Storage$ProjectV1$decodePrimaryKey))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'uniques',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeUnique),
		_List_Nil))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'indexes',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeIndex),
		_List_Nil))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'checks',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeCheck),
		_List_Nil))(
	A2($author$project$Libs$Json$Decode$maybeField, 'comment', $author$project$Storage$ProjectV1$decodeComment))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'sources',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeSource),
		_List_Nil));
var $author$project$Storage$ProjectV1$defaultTime = $elm$time$Time$millisToPosix(0);
var $author$project$Storage$ProjectV1$initLayout = function (now) {
	return {dt: $author$project$Models$Project$CanvasProps$zero, e1: now, dT: _List_Nil, jr: _List_Nil, gj: now};
};
var $author$project$Storage$ProjectV1$defaultLayout = $author$project$Storage$ProjectV1$initLayout($author$project$Storage$ProjectV1$defaultTime);
var $author$project$Storage$ProjectV1$decodeSchema = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Storage$ProjectV1$SchemaV1,
	A2(
		$elm$json$Json$Decode$map,
		$author$project$Libs$Dict$fromListMap(
			function ($) {
				return $.t;
			}),
		A2(
			$elm$json$Json$Decode$field,
			'tables',
			$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeTable))),
	A2(
		$elm$json$Json$Decode$field,
		'relations',
		$elm$json$Json$Decode$list($author$project$Storage$ProjectV1$decodeRelation)),
	A3($author$project$Libs$Json$Decode$defaultField, 'layout', $author$project$Storage$ProjectV1$decodeLayout, $author$project$Storage$ProjectV1$defaultLayout));
var $author$project$Storage$ProjectV1$defaultProjectSettings = {
	bM: A3($author$project$Storage$ProjectV1$FindPathSettingsV1, 3, _List_Nil, _List_Nil)
};
var $author$project$Storage$ProjectV1$stringAsLayoutName = function (name) {
	return name;
};
var $author$project$Storage$ProjectV1$decodeProject = $author$project$Libs$Json$Decode$map10($author$project$Storage$ProjectV1$ProjectV1)(
	A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string))(
	A2($elm$json$Json$Decode$field, 'name', $elm$json$Json$Decode$string))(
	A2(
		$elm$json$Json$Decode$field,
		'sources',
		$author$project$Libs$Json$Decode$nel($author$project$Storage$ProjectV1$decodeProjectSource)))(
	A2($elm$json$Json$Decode$field, 'schema', $author$project$Storage$ProjectV1$decodeSchema))(
	A3(
		$author$project$Libs$Json$Decode$defaultField,
		'layouts',
		A2($author$project$Libs$Json$Decode$customDict, $author$project$Storage$ProjectV1$stringAsLayoutName, $author$project$Storage$ProjectV1$decodeLayout),
		$elm$core$Dict$empty))(
	A2($author$project$Libs$Json$Decode$maybeField, 'currentLayout', $elm$json$Json$Decode$string))(
	A3($author$project$Libs$Json$Decode$defaultFieldDeep, 'settings', $author$project$Storage$ProjectV1$decodeProjectSettings, $author$project$Storage$ProjectV1$defaultProjectSettings))(
	A3($author$project$Libs$Json$Decode$defaultField, 'createdAt', $author$project$Libs$Time$decode, $author$project$Storage$ProjectV1$defaultTime))(
	A3($author$project$Libs$Json$Decode$defaultField, 'updatedAt', $author$project$Libs$Time$decode, $author$project$Storage$ProjectV1$defaultTime))(
	A2($author$project$Libs$Json$Decode$maybeField, 'fromSample', $elm$json$Json$Decode$string));
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $author$project$Storage$ProjectV1$upgradeFindPath = function (fp) {
	return {
		cM: A2($elm$core$String$join, ', ', fp.cM),
		cN: A2(
			$elm$core$String$join,
			', ',
			A2($elm$core$List$map, $author$project$Models$Project$TableId$show, fp.cN)),
		cT: fp.cT
	};
};
var $author$project$Storage$ProjectV1$upgradeTableProps = function (props) {
	return {n: props.n, W: props.W, X: false, t: props.t, iG: props.iG, bp: props.bp, l: $author$project$Libs$Models$Size$zero};
};
var $author$project$Storage$ProjectV1$upgradeLayout = function (layout) {
	return {
		dt: layout.dt,
		e1: layout.e1,
		dT: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeTableProps, layout.dT),
		jr: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeTableProps, layout.jr),
		gj: layout.gj
	};
};
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{y: nodeList, v: nodeListSize, gc: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $author$project$Storage$ProjectV1$upgradeSource = function (source) {
	return {
		t: $author$project$Models$Project$SourceId$new(source.t),
		fy: A2(
			$elm$core$List$map,
			function ($) {
				return $.ea;
			},
			$author$project$Libs$Nel$toList(source.fy))
	};
};
var $author$project$Storage$ProjectV1$upgradeRelation = function (relation) {
	return A4(
		$author$project$Models$Project$Relation$new,
		relation.cW,
		relation.de,
		relation.fW,
		A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, relation.cc));
};
var $author$project$Libs$Ned$map = F2(
	function (f, xs) {
		return {
			cK: function (_v0) {
				var k = _v0.a;
				var a = _v0.b;
				return _Utils_Tuple2(
					k,
					A2(f, k, a));
			}(xs.cK),
			gc: A2($elm$core$Dict$map, f, xs.gc)
		};
	});
var $author$project$Storage$ProjectV1$upgradeCheck = function (check) {
	return {
		W: check.W,
		cW: check.cW,
		aS: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, check.cc),
		em: check.em
	};
};
var $author$project$Storage$ProjectV1$upgradeComment = function (comment) {
	return {
		aS: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, comment.cc),
		dh: comment.dh
	};
};
var $author$project$Storage$ProjectV1$upgradeColumn = function (column) {
	return {
		cz: A2($elm$core$Maybe$map, $author$project$Storage$ProjectV1$upgradeComment, column.cz),
		cD: column.cD,
		a9: column.a9,
		S: column.S,
		cW: column.cW,
		av: column.av,
		aS: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, column.cc)
	};
};
var $author$project$Storage$ProjectV1$upgradeIndex = function (index) {
	return {
		W: index.W,
		aH: index.aH,
		cW: index.cW,
		aS: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, index.cc)
	};
};
var $author$project$Storage$ProjectV1$upgradePrimaryKey = function (pk) {
	return {
		W: pk.W,
		cW: pk.cW,
		aS: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, pk.cc)
	};
};
var $author$project$Storage$ProjectV1$upgradeUnique = function (unique) {
	return {
		W: unique.W,
		aH: unique.aH,
		cW: unique.cW,
		aS: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, unique.cc)
	};
};
var $author$project$Storage$ProjectV1$upgradeTable = function (table) {
	return {
		a$: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeCheck, table.a$),
		W: A2(
			$author$project$Libs$Ned$map,
			function (_v0) {
				return $author$project$Storage$ProjectV1$upgradeColumn;
			},
			table.W),
		cz: A2($elm$core$Maybe$map, $author$project$Storage$ProjectV1$upgradeComment, table.cz),
		t: table.t,
		ba: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeIndex, table.ba),
		cW: table.cW,
		aS: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeSource, table.cc),
		aT: A2($elm$core$Maybe$map, $author$project$Storage$ProjectV1$upgradePrimaryKey, table.aT),
		E: table.E,
		bw: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeUnique, table.bw),
		eQ: false
	};
};
var $author$project$Storage$ProjectV1$upgradeProjectSource = F4(
	function (tables, relations, fromSample, source) {
		return {
			bI: function () {
				var sources = $elm$core$Dict$fromList(
					A2(
						$elm$core$List$map,
						function (s) {
							return _Utils_Tuple2(s.ea, s.dh);
						},
						A2(
							$elm$core$List$concatMap,
							function (s) {
								return $author$project$Libs$Nel$toList(s.fy);
							},
							A2(
								$elm$core$List$concatMap,
								function ($) {
									return $.cc;
								},
								$elm$core$Dict$values(tables)))));
				var max = A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (i) {
						return i + 1;
					},
					0,
					$elm$core$List$maximum(
						$elm$core$Dict$keys(sources)));
				return $elm$core$Array$fromList(
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, a) {
								return A3($author$project$Libs$Dict$getOrElse, i, a, sources);
							}),
						A2($elm$core$List$repeat, max, '')));
			}(),
			e1: source.e1,
			e6: true,
			fb: fromSample,
			t: $author$project$Models$Project$SourceId$new(source.t),
			S: function () {
				var _v0 = source.F;
				if (!_v0.$) {
					var name = _v0.a;
					var size = _v0.b;
					var modified = _v0.c;
					return A3($author$project$Models$Project$SourceKind$LocalFile, name, size, modified);
				} else {
					var url = _v0.a;
					var size = _v0.b;
					return A2($author$project$Models$Project$SourceKind$RemoteFile, url, size);
				}
			}(),
			cW: source.cW,
			iU: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeRelation, relations),
			jr: A2(
				$elm$core$Dict$map,
				function (_v1) {
					return $author$project$Storage$ProjectV1$upgradeTable;
				},
				tables),
			gj: source.gj
		};
	});
var $author$project$Storage$ProjectV1$upgrade = function (project) {
	return {
		e1: project.e1,
		t: project.t,
		as: $author$project$Storage$ProjectV1$upgradeLayout(project.E.as),
		d_: A2(
			$elm$core$Dict$map,
			function (_v0) {
				return $author$project$Storage$ProjectV1$upgradeLayout;
			},
			project.d_),
		cW: project.cW,
		iU: A2($elm$core$List$map, $author$project$Storage$ProjectV1$upgradeRelation, project.E.iU),
		dc: function (s) {
			return _Utils_update(
				s,
				{
					bM: $author$project$Storage$ProjectV1$upgradeFindPath(project.dc.bM)
				});
		}($author$project$Models$Project$ProjectSettings$init),
		cc: A2(
			$elm$core$List$map,
			A3($author$project$Storage$ProjectV1$upgradeProjectSource, project.E.jr, project.E.iU, project.fb),
			$author$project$Libs$Nel$toList(project.cc)),
		jr: A2(
			$elm$core$Dict$map,
			function (_v1) {
				return $author$project$Storage$ProjectV1$upgradeTable;
			},
			project.E.jr),
		gj: project.gj,
		eO: project.e2
	};
};
var $author$project$Storage$ProjectV2$decodeProject = A2(
	$elm$json$Json$Decode$andThen,
	function (v) {
		if (v === 1) {
			return A2($elm$json$Json$Decode$map, $author$project$Storage$ProjectV1$upgrade, $author$project$Storage$ProjectV1$decodeProject);
		} else {
			return $author$project$Models$Project$decode;
		}
	},
	A2($elm$json$Json$Decode$field, 'version', $elm$json$Json$Decode$int));
var $author$project$Libs$List$resultCollect = function (list) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (r, _v0) {
				var errs = _v0.a;
				var res = _v0.b;
				if (!r.$) {
					var a = r.a;
					return _Utils_Tuple2(
						errs,
						A2($elm$core$List$cons, a, res));
				} else {
					var e = r.a;
					return _Utils_Tuple2(
						A2($elm$core$List$cons, e, errs),
						res);
				}
			}),
		_Utils_Tuple2(_List_Nil, _List_Nil),
		list);
};
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $author$project$Libs$Json$Decode$tuple = F2(
	function (aDecoder, bDecoder) {
		return A3(
			$elm$json$Json$Decode$map2,
			$elm$core$Tuple$pair,
			A2($elm$json$Json$Decode$index, 0, aDecoder),
			A2($elm$json$Json$Decode$index, 1, bDecoder));
	});
var $author$project$Ports$projectsDecoder = A2(
	$elm$json$Json$Decode$map,
	function (list) {
		return $author$project$Libs$List$resultCollect(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var k = _v0.a;
					var v = _v0.b;
					return A2(
						$elm$core$Result$mapError,
						function (e) {
							return _Utils_Tuple2(k, e);
						},
						A2($elm$json$Json$Decode$decodeValue, $author$project$Storage$ProjectV2$decodeProject, v));
				},
				list));
	},
	$elm$json$Json$Decode$list(
		A2($author$project$Libs$Json$Decode$tuple, $elm$json$Json$Decode$string, $elm$json$Json$Decode$value)));
var $author$project$Ports$jsDecoder = A2(
	$author$project$Libs$Json$Decode$matchOn,
	'kind',
	function (kind) {
		switch (kind) {
			case 'GotSizes':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Ports$GotSizes,
					A2(
						$elm$json$Json$Decode$field,
						'sizes',
						$elm$json$Json$Decode$list(
							A5(
								$elm$json$Json$Decode$map4,
								$author$project$Libs$Models$SizeChange,
								A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string),
								A2($elm$json$Json$Decode$field, 'position', $author$project$Libs$Models$Position$decode),
								A2($elm$json$Json$Decode$field, 'size', $author$project$Libs$Models$Size$decode),
								A2($elm$json$Json$Decode$field, 'seeds', $author$project$Libs$Models$Position$decode)))));
			case 'GotProjects':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Ports$GotProjects,
					A2($elm$json$Json$Decode$field, 'projects', $author$project$Ports$projectsDecoder));
			case 'GotLocalFile':
				return A6(
					$elm$json$Json$Decode$map5,
					$author$project$Ports$GotLocalFile,
					A2(
						$elm$json$Json$Decode$map,
						$elm$time$Time$millisToPosix,
						A2($elm$json$Json$Decode$field, 'now', $elm$json$Json$Decode$int)),
					A2($elm$json$Json$Decode$field, 'projectId', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'sourceId', $author$project$Models$Project$SourceId$decode),
					A2($elm$json$Json$Decode$field, 'file', $mpizenberg$elm_file$FileValue$decoder),
					A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string));
			case 'GotRemoteFile':
				return A7(
					$elm$json$Json$Decode$map6,
					$author$project$Ports$GotRemoteFile,
					A2(
						$elm$json$Json$Decode$map,
						$elm$time$Time$millisToPosix,
						A2($elm$json$Json$Decode$field, 'now', $elm$json$Json$Decode$int)),
					A2($elm$json$Json$Decode$field, 'projectId', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'sourceId', $author$project$Models$Project$SourceId$decode),
					A2($elm$json$Json$Decode$field, 'url', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'content', $elm$json$Json$Decode$string),
					A2($author$project$Libs$Json$Decode$maybeField, 'sample', $elm$json$Json$Decode$string));
			case 'GotSourceId':
				return A5(
					$elm$json$Json$Decode$map4,
					$author$project$Ports$GotSourceId,
					A2(
						$elm$json$Json$Decode$map,
						$elm$time$Time$millisToPosix,
						A2($elm$json$Json$Decode$field, 'now', $elm$json$Json$Decode$int)),
					A2($elm$json$Json$Decode$field, 'sourceId', $author$project$Models$Project$SourceId$decode),
					A2($elm$json$Json$Decode$field, 'src', $author$project$Models$Project$ColumnRef$decode),
					A2($elm$json$Json$Decode$field, 'ref', $author$project$Models$Project$ColumnRef$decode));
			case 'GotHotkey':
				return A2(
					$elm$json$Json$Decode$map,
					$author$project$Ports$GotHotkey,
					A2($elm$json$Json$Decode$field, 'id', $elm$json$Json$Decode$string));
			case 'GotKeyHold':
				return A3(
					$elm$json$Json$Decode$map2,
					$author$project$Ports$GotKeyHold,
					A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'start', $elm$json$Json$Decode$bool));
			case 'GotToast':
				return A3(
					$elm$json$Json$Decode$map2,
					$author$project$Ports$GotToast,
					A2($elm$json$Json$Decode$field, 'level', $elm$json$Json$Decode$string),
					A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string));
			default:
				var other = kind;
				return $elm$json$Json$Decode$fail('Not supported kind of JsMsg \'' + (other + '\''));
		}
	});
var $author$project$Ports$jsToElm = _Platform_incomingPort('jsToElm', $elm$json$Json$Decode$value);
var $author$project$Ports$onJsMessage = function (callback) {
	return $author$project$Ports$jsToElm(
		function (value) {
			var _v0 = A2($elm$json$Json$Decode$decodeValue, $author$project$Ports$jsDecoder, value);
			if (!_v0.$) {
				var message = _v0.a;
				return callback(message);
			} else {
				var error = _v0.a;
				return callback(
					$author$project$Ports$Error(error));
			}
		});
};
var $elm$browser$Browser$Events$onMouseMove = A2($elm$browser$Browser$Events$on, 0, 'mousemove');
var $elm$browser$Browser$Events$onMouseUp = A2($elm$browser$Browser$Events$on, 0, 'mouseup');
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $author$project$Libs$Json$Decode$filter = F2(
	function (predicate, decoder) {
		return A2(
			$elm$json$Json$Decode$andThen,
			function (a) {
				return predicate(a) ? $elm$json$Json$Decode$succeed(a) : $elm$json$Json$Decode$fail('Invalid predicate');
			},
			decoder);
	});
var $author$project$PagesComponents$Projects$Id_$Subscriptions$targetIdDecoder = A2(
	$elm$json$Json$Decode$field,
	'target',
	$elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$author$project$Libs$Json$Decode$filter,
				function (id) {
					return id !== '';
				},
				A2(
					$elm$json$Json$Decode$at,
					_List_fromArray(
						['id']),
					$elm$json$Json$Decode$string)),
				A2(
				$author$project$Libs$Json$Decode$filter,
				function (id) {
					return id !== '';
				},
				A2(
					$elm$json$Json$Decode$at,
					_List_fromArray(
						['parentElement', 'id']),
					$elm$json$Json$Decode$string)),
				A2(
				$author$project$Libs$Json$Decode$filter,
				function (id) {
					return id !== '';
				},
				A2(
					$elm$json$Json$Decode$at,
					_List_fromArray(
						['parentElement', 'parentElement', 'id']),
					$elm$json$Json$Decode$string)),
				A2(
				$author$project$Libs$Json$Decode$filter,
				function (id) {
					return id !== '';
				},
				A2(
					$elm$json$Json$Decode$at,
					_List_fromArray(
						['parentElement', 'parentElement', 'parentElement', 'id']),
					$elm$json$Json$Decode$string)),
				A2(
				$author$project$Libs$Json$Decode$filter,
				function (id) {
					return id !== '';
				},
				A2(
					$elm$json$Json$Decode$at,
					_List_fromArray(
						['parentElement', 'parentElement', 'parentElement', 'parentElement', 'id']),
					$elm$json$Json$Decode$string)),
				A2(
				$author$project$Libs$Json$Decode$filter,
				function (id) {
					return id !== '';
				},
				A2(
					$elm$json$Json$Decode$at,
					_List_fromArray(
						['parentElement', 'parentElement', 'parentElement', 'parentElement', 'parentElement', 'id']),
					$elm$json$Json$Decode$string)),
				$elm$json$Json$Decode$succeed('')
			])));
var $author$project$PagesComponents$Projects$Id_$Subscriptions$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_Utils_ap(
			_List_fromArray(
				[
					$author$project$Ports$onJsMessage($author$project$PagesComponents$Projects$Id_$Models$JsMessage)
				]),
			_Utils_ap(
				A3(
					$author$project$Libs$Bool$cond,
					model.aR === '',
					_List_Nil,
					_List_fromArray(
						[
							$elm$browser$Browser$Events$onClick(
							A2(
								$elm$json$Json$Decode$map,
								function (id) {
									return A3(
										$author$project$Libs$Bool$cond,
										_Utils_eq(id, model.aR),
										$author$project$PagesComponents$Projects$Id_$Models$Noop('dropdown opened twice'),
										$author$project$PagesComponents$Projects$Id_$Models$DropdownToggle(id));
								},
								$author$project$PagesComponents$Projects$Id_$Subscriptions$targetIdDecoder))
						])),
				_Utils_ap(
					A3(
						$author$project$Libs$Bool$cond,
						_Utils_eq(model.gW, $elm$core$Maybe$Nothing),
						_List_Nil,
						_List_fromArray(
							[
								$elm$browser$Browser$Events$onClick(
								$elm$json$Json$Decode$succeed($author$project$PagesComponents$Projects$Id_$Models$ContextMenuClose))
							])),
					_Utils_ap(
						A3(
							$author$project$Libs$Maybe$mapOrElse,
							function (_v0) {
								return _List_fromArray(
									[
										$elm$browser$Browser$Events$onMouseMove(
										A2(
											$elm$json$Json$Decode$map,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.fK;
												},
												A2($elm$core$Basics$composeR, $author$project$Libs$Models$Position$fromTuple, $author$project$PagesComponents$Projects$Id_$Models$DragMove)),
											$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder)),
										$elm$browser$Browser$Events$onMouseUp(
										A2(
											$elm$json$Json$Decode$map,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.fK;
												},
												A2($elm$core$Basics$composeR, $author$project$Libs$Models$Position$fromTuple, $author$project$PagesComponents$Projects$Id_$Models$DragEnd)),
											$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder))
									]);
							},
							_List_Nil,
							model.cF),
						A3(
							$author$project$Libs$Maybe$mapOrElse,
							function (_v1) {
								return _List_fromArray(
									[
										$elm$browser$Browser$Events$onMouseMove(
										A2(
											$elm$json$Json$Decode$map,
											A2(
												$elm$core$Basics$composeR,
												function ($) {
													return $.fK;
												},
												A2(
													$elm$core$Basics$composeR,
													$author$project$Libs$Models$Position$fromTuple,
													A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$VRMove, $author$project$PagesComponents$Projects$Id_$Models$VirtualRelationMsg))),
											$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder))
									]);
							},
							_List_Nil,
							model.jI))))));
};
var $author$project$PagesComponents$Projects$Id_$Models$ContextMenuShow = {$: 39};
var $author$project$PagesComponents$Projects$Id_$Models$ModalOpen = function (a) {
	return {$: 54, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ToastHide = function (a) {
	return {$: 47, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ToastRemove = function (a) {
	return {$: 48, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ToastShow = F2(
	function (a, b) {
		return {$: 46, a: a, b: b};
	});
var $author$project$Ports$GetSourceId = F2(
	function (a, b) {
		return {$: 15, a: a, b: b};
	});
var $author$project$Ports$getSourceId = F2(
	function (src, ref) {
		return $author$project$Ports$messageToJs(
			A2($author$project$Ports$GetSourceId, src, ref));
	});
var $author$project$Services$Lenses$map = F4(
	function (get, update, transform, item) {
		return A2(
			update,
			transform(
				get(item)),
			item);
	});
var $author$project$Services$Lenses$set = F4(
	function (get, update, value, item) {
		return _Utils_eq(
			get(item),
			value) ? item : A2(update, value, item);
	});
var $author$project$Services$Lenses$setRelations = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iU;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iU: value});
		}));
var $author$project$Services$Lenses$mapRelations = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.iU;
	},
	$author$project$Services$Lenses$setRelations);
var $author$project$PagesComponents$Projects$Id_$Models$ErdRelationProps$create = F2(
	function (shownTables, id) {
		return {
			f4: A2(
				$elm$core$List$any,
				function (t) {
					return _Utils_eq(t, id);
				},
				shownTables)
		};
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$buildRelatedTables = F3(
	function (tableRelations, shownTables, table) {
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$filterMap,
				function (r) {
					return _Utils_eq(r.de.G, table) ? $elm$core$Maybe$Just(
						_Utils_Tuple2(
							r.fW.G,
							A2($author$project$PagesComponents$Projects$Id_$Models$ErdRelationProps$create, shownTables, r.fW.G))) : (_Utils_eq(r.fW.G, table) ? $elm$core$Maybe$Just(
						_Utils_Tuple2(
							r.de.G,
							A2($author$project$PagesComponents$Projects$Id_$Models$ErdRelationProps$create, shownTables, r.de.G))) : $elm$core$Maybe$Nothing);
				},
				tableRelations));
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$buildRelationsByTable = function (relations) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (rel, dict) {
				return _Utils_eq(rel.de.G, rel.fW.G) ? A3(
					$elm$core$Dict$update,
					rel.de.G,
					A2(
						$elm$core$Basics$composeR,
						A2(
							$author$project$Libs$Maybe$mapOrElse,
							function (rels) {
								return A2($elm$core$List$cons, rel, rels);
							},
							_List_fromArray(
								[rel])),
						$elm$core$Maybe$Just),
					dict) : A3(
					$elm$core$Dict$update,
					rel.fW.G,
					A2(
						$elm$core$Basics$composeR,
						A2(
							$author$project$Libs$Maybe$mapOrElse,
							function (rels) {
								return A2($elm$core$List$cons, rel, rels);
							},
							_List_fromArray(
								[rel])),
						$elm$core$Maybe$Just),
					A3(
						$elm$core$Dict$update,
						rel.de.G,
						A2(
							$elm$core$Basics$composeR,
							A2(
								$author$project$Libs$Maybe$mapOrElse,
								function (rels) {
									return A2($elm$core$List$cons, rel, rels);
								},
								_List_fromArray(
									[rel])),
							$elm$core$Maybe$Just),
						dict));
			}),
		$elm$core$Dict$empty,
		relations);
};
var $author$project$Libs$Ned$get = F2(
	function (key, ned) {
		return _Utils_eq(ned.cK.a, key) ? $elm$core$Maybe$Just(ned.cK.b) : A2($elm$core$Dict$get, key, ned.gc);
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$create = F2(
	function (tables, ref) {
		return {
			r: ref.r,
			av: A3(
				$author$project$Libs$Maybe$mapOrElse,
				function ($) {
					return $.av;
				},
				false,
				A2(
					$elm$core$Maybe$andThen,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.W;
						},
						$author$project$Libs$Ned$get(ref.r)),
					A2($elm$core$Dict$get, ref.G, tables))),
			G: ref.G
		};
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdRelation$create = F2(
	function (tables, relation) {
		return {
			t: relation.t,
			cW: relation.cW,
			aS: relation.aS,
			fW: A2($author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$create, tables, relation.fW),
			de: A2($author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$create, tables, relation.de)
		};
	});
var $author$project$Libs$List$has = F2(
	function (item, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, item);
			},
			xs);
	});
var $author$project$Libs$Nel$has = F2(
	function (value, nel) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, value);
			},
			$author$project$Libs$Nel$toList(nel));
	});
var $author$project$Models$Project$Table$hasColumn = F2(
	function (column, columns) {
		return A2(
			$elm$core$List$any,
			function (c) {
				return _Utils_eq(c, column);
			},
			columns);
	});
var $author$project$Models$Project$Table$inPrimaryKey = F2(
	function (table, column) {
		return A2(
			$author$project$Libs$Maybe$filter,
			function (_v0) {
				var columns = _v0.W;
				return A2(
					$author$project$Models$Project$Table$hasColumn,
					column,
					$author$project$Libs$Nel$toList(columns));
			},
			table.aT);
	});
var $author$project$Libs$Maybe$isNothing = function (maybe) {
	return _Utils_eq(maybe, $elm$core$Maybe$Nothing);
};
var $author$project$Libs$Maybe$isJust = function (maybe) {
	return !$author$project$Libs$Maybe$isNothing(maybe);
};
var $author$project$PagesComponents$Projects$Id_$Models$ErdColumn$create = F4(
	function (tables, columnRelations, table, column) {
		return {
			a$: A2(
				$elm$core$List$map,
				function (c) {
					return c.cW;
				},
				A2(
					$elm$core$List$filter,
					function (c) {
						return A2($author$project$Libs$List$has, column.cW, c.W);
					},
					table.a$)),
			cz: column.cz,
			cD: column.cD,
			a8: A2(
				$elm$core$List$map,
				$author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$create(tables),
				A2(
					$elm$core$List$map,
					function ($) {
						return $.de;
					},
					A2(
						$elm$core$List$filter,
						function (r) {
							return _Utils_eq(r.fW.G, table.t) && _Utils_eq(r.fW.r, column.cW);
						},
						columnRelations))),
			a9: column.a9,
			ba: A2(
				$elm$core$List$map,
				function (i) {
					return i.cW;
				},
				A2(
					$elm$core$List$filter,
					function (i) {
						return A2($author$project$Libs$Nel$has, column.cW, i.W);
					},
					table.ba)),
			bd: $author$project$Libs$Maybe$isJust(
				A2($author$project$Models$Project$Table$inPrimaryKey, table, column.cW)),
			S: column.S,
			cW: column.cW,
			av: column.av,
			aS: table.aS,
			ay: A2(
				$elm$core$List$map,
				$author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$create(tables),
				A2(
					$elm$core$List$map,
					function ($) {
						return $.fW;
					},
					A2(
						$elm$core$List$filter,
						function (r) {
							return _Utils_eq(r.de.G, table.t) && _Utils_eq(r.de.r, column.cW);
						},
						columnRelations))),
			bw: A2(
				$elm$core$List$map,
				function (u) {
					return u.cW;
				},
				A2(
					$elm$core$List$filter,
					function (u) {
						return A2($author$project$Libs$Nel$has, column.cW, u.W);
					},
					table.bw))
		};
	});
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $author$project$Libs$Models$HtmlId$encode = function (text) {
	return $elm$url$Url$percentEncode(text);
};
var $author$project$Models$Project$TableId$toHtmlId = function (_v0) {
	var schema = _v0.a;
	var table = _v0.b;
	return 'table-' + (schema + ('-' + $author$project$Libs$Models$HtmlId$encode(table)));
};
var $author$project$PagesComponents$Projects$Id_$Models$ErdTable$create = F3(
	function (tables, tableRelations, table) {
		var relationsByColumn = A3(
			$elm$core$List$foldr,
			F2(
				function (rel, dict) {
					return (_Utils_eq(rel.de.G, table.t) && _Utils_eq(rel.fW.G, table.t)) ? A3(
						$elm$core$Dict$update,
						rel.fW.r,
						A2(
							$elm$core$Basics$composeR,
							A2(
								$author$project$Libs$Maybe$mapOrElse,
								function (relations) {
									return A2($elm$core$List$cons, rel, relations);
								},
								_List_fromArray(
									[rel])),
							$elm$core$Maybe$Just),
						A3(
							$elm$core$Dict$update,
							rel.de.r,
							A2(
								$elm$core$Basics$composeR,
								A2(
									$author$project$Libs$Maybe$mapOrElse,
									function (relations) {
										return A2($elm$core$List$cons, rel, relations);
									},
									_List_fromArray(
										[rel])),
								$elm$core$Maybe$Just),
							dict)) : (_Utils_eq(rel.de.G, table.t) ? A3(
						$elm$core$Dict$update,
						rel.de.r,
						A2(
							$elm$core$Basics$composeR,
							A2(
								$author$project$Libs$Maybe$mapOrElse,
								function (relations) {
									return A2($elm$core$List$cons, rel, relations);
								},
								_List_fromArray(
									[rel])),
							$elm$core$Maybe$Just),
						dict) : (_Utils_eq(rel.fW.G, table.t) ? A3(
						$elm$core$Dict$update,
						rel.fW.r,
						A2(
							$elm$core$Basics$composeR,
							A2(
								$author$project$Libs$Maybe$mapOrElse,
								function (relations) {
									return A2($elm$core$List$cons, rel, relations);
								},
								_List_fromArray(
									[rel])),
							$elm$core$Maybe$Just),
						dict) : dict));
				}),
			$elm$core$Dict$empty,
			tableRelations);
		return {
			a$: table.a$,
			W: A2(
				$author$project$Libs$Ned$map,
				function (name) {
					return A3(
						$author$project$PagesComponents$Projects$Id_$Models$ErdColumn$create,
						tables,
						A3($author$project$Libs$Dict$getOrElse, name, _List_Nil, relationsByColumn),
						table);
				},
				table.W),
			cz: table.cz,
			fl: $author$project$Models$Project$TableId$toHtmlId(table.t),
			t: table.t,
			ba: table.ba,
			bV: $author$project$Models$Project$TableId$show(table.t),
			cW: table.cW,
			aS: table.aS,
			aT: table.aT,
			E: table.E,
			bw: table.bw,
			eQ: table.eQ
		};
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$computeSchema = function (erd) {
	var tables = A2($author$project$Models$Project$computeTables, erd.dc, erd.cc);
	var relations = A2($author$project$Models$Project$computeRelations, tables, erd.cc);
	var relationsByTable = $author$project$PagesComponents$Projects$Id_$Models$Erd$buildRelationsByTable(relations);
	var tableProps = A2(
		$elm$core$Dict$map,
		F2(
			function (_v0, p) {
				return _Utils_update(
					p,
					{
						iS: A3(
							$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$buildRelatedTables,
							A3($author$project$Libs$Dict$getOrElse, p.t, _List_Nil, relationsByTable),
							erd.ca,
							p.t)
					});
			}),
		erd.bu);
	return _Utils_update(
		erd,
		{
			iU: A2(
				$elm$core$List$map,
				$author$project$PagesComponents$Projects$Id_$Models$ErdRelation$create(tables),
				relations),
			en: relationsByTable,
			bu: tableProps,
			jr: A2(
				$elm$core$Dict$map,
				function (id) {
					return A2(
						$author$project$PagesComponents$Projects$Id_$Models$ErdTable$create,
						tables,
						A3($author$project$Libs$Dict$getOrElse, id, _List_Nil, relationsByTable));
				},
				tables)
		});
};
var $author$project$PagesComponents$Projects$Id_$Models$Erd$setSources = F2(
	function (sources, erd) {
		return _Utils_eq(erd.cc, sources) ? erd : $author$project$PagesComponents$Projects$Id_$Models$Erd$computeSchema(
			_Utils_update(
				erd,
				{cc: sources}));
	});
var $author$project$Libs$List$updateBy = F4(
	function (matcher, value, transform, list) {
		return A2(
			$elm$core$List$map,
			function (a) {
				return _Utils_eq(
					matcher(a),
					value) ? transform(a) : a;
			},
			list);
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$mapSource = F3(
	function (id, transform, erd) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$Erd$setSources,
			A4(
				$author$project$Libs$List$updateBy,
				function ($) {
					return $.t;
				},
				id,
				transform,
				erd.cc),
			erd);
	});
var $author$project$Components$Atoms$Icon$InformationCircle = 121;
var $author$project$Components$Molecules$Toast$Simple = $elm$core$Basics$identity;
var $author$project$PagesComponents$Projects$Id_$Models$ToastAdd = F2(
	function (a, b) {
		return {$: 45, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$toastInfo = function (message) {
	return A2(
		$author$project$PagesComponents$Projects$Id_$Models$ToastAdd,
		$elm$core$Maybe$Just(8000),
		{n: $author$project$Libs$Tailwind$blue, D: 121, bg: '', aj: message});
};
var $author$project$Models$Project$Relation$virtual = F3(
	function (src, ref, source) {
		return A4(
			$author$project$Models$Project$Relation$new,
			'virtual relation',
			src,
			ref,
			_List_fromArray(
				[
					A2($author$project$Models$Project$Origin$Origin, source, _List_Nil)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Source$addRelation = F3(
	function (src, ref, erd) {
		var _v0 = A2(
			$author$project$Libs$List$find,
			function (s) {
				return _Utils_eq(s.S, $author$project$Models$Project$SourceKind$UserDefined);
			},
			erd.cc);
		if (!_v0.$) {
			var source = _v0.a;
			return _Utils_Tuple2(
				A3(
					$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSource,
					source.t,
					$author$project$Services$Lenses$mapRelations(
						function (relations) {
							return _Utils_ap(
								relations,
								_List_fromArray(
									[
										A3($author$project$Models$Project$Relation$virtual, src, ref, source.t)
									]));
						}),
					erd),
				$author$project$Libs$Task$send(
					$author$project$PagesComponents$Projects$Id_$Models$toastInfo(
						'Relation ' + ($author$project$Models$Project$TableId$show(src.G) + (' → ' + ($author$project$Models$Project$TableId$show(ref.G) + (' added to ' + (source.cW + ' source.'))))))));
		} else {
			return _Utils_Tuple2(
				erd,
				A2($author$project$Ports$getSourceId, src, ref));
		}
	});
var $author$project$Libs$Dict$alter = F3(
	function (key, transform, dict) {
		return A3(
			$elm$core$Dict$update,
			key,
			$elm$core$Maybe$map(transform),
			dict);
	});
var $author$project$Libs$Maybe$any = F2(
	function (predicate, maybe) {
		return A2(
			$elm$core$Maybe$withDefault,
			false,
			A2($elm$core$Maybe$map, predicate, maybe));
	});
var $author$project$Ports$AutofocusWithin = function (a) {
	return {$: 7, a: a};
};
var $author$project$Ports$autofocusWithin = function (id) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$AutofocusWithin(id));
};
var $author$project$Libs$Models$Position$add = F2(
	function (delta, pos) {
		return A2($author$project$Libs$Models$Position$Position, pos.at + delta.at, pos.aD + delta.aD);
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$area = function (props) {
	return {iG: props.iG, l: props.l};
};
var $author$project$Libs$Models$Size$div = F2(
	function (factor, size) {
		return A2($author$project$Libs$Models$Size$Size, size.aF / factor, size.ap / factor);
	});
var $author$project$Libs$Models$Size$toTuple = function (pos) {
	return _Utils_Tuple2(pos.aF, pos.ap);
};
var $author$project$Libs$Area$center = function (area) {
	return A2(
		$author$project$Libs$Models$Position$add,
		$author$project$Libs$Models$Position$fromTuple(
			$author$project$Libs$Models$Size$toTuple(
				A2($author$project$Libs$Models$Size$div, 2, area.l))),
		area.iG);
};
var $author$project$Conf$canvas = {
	jg: 20,
	jK: {jr: 10},
	dm: {hT: 5, hX: 0.05, jl: 0.001}
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $author$project$Libs$Models$Size$ratio = F2(
	function (a, b) {
		return A2($author$project$Libs$Models$Size$Size, b.aF / a.aF, b.ap / a.ap);
	});
var $author$project$Libs$Models$Size$sub = F2(
	function (amount, size) {
		return A2($author$project$Libs$Models$Size$Size, size.aF - amount, size.ap - amount);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Canvas$computeZoom = F4(
	function (viewport, padding, content, zoom) {
		var viewportSize = A2($author$project$Libs$Models$Size$sub, (2 * padding) / zoom, viewport.l);
		var grow = A2($author$project$Libs$Models$Size$ratio, content.l, viewportSize);
		var newZoom = A3(
			$elm$core$Basics$clamp,
			$author$project$Conf$canvas.dm.hX,
			1,
			zoom * A2($elm$core$Basics$min, grow.aF, grow.ap));
		return newZoom;
	});
var $author$project$Libs$Area$Area = F2(
	function (position, size) {
		return {iG: position, l: size};
	});
var $author$project$Libs$Models$Position$div = F2(
	function (factor, pos) {
		return A2($author$project$Libs$Models$Position$Position, pos.at / factor, pos.aD / factor);
	});
var $author$project$Libs$Area$div = F2(
	function (factor, area) {
		return A2(
			$author$project$Libs$Area$Area,
			A2($author$project$Libs$Models$Position$div, factor, area.iG),
			A2($author$project$Libs$Models$Size$div, factor, area.l));
	});
var $author$project$Libs$Models$Position$sub = F2(
	function (delta, pos) {
		return A2($author$project$Libs$Models$Position$Position, pos.at - delta.at, pos.aD - delta.aD);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Canvas$computeFit = F4(
	function (viewport, padding, content, zoom) {
		var newZoom = A4($author$project$PagesComponents$Projects$Id_$Updates$Canvas$computeZoom, viewport, padding, content, zoom);
		var newContentCenter = $author$project$Libs$Area$center(content);
		var growFactor = newZoom / zoom;
		var newViewport = A2($author$project$Libs$Area$div, growFactor, viewport);
		var newViewportCenter = A2(
			$author$project$Libs$Models$Position$sub,
			newViewport.iG,
			$author$project$Libs$Area$center(newViewport));
		var offset = A2($author$project$Libs$Models$Position$sub, newContentCenter, newViewportCenter);
		return _Utils_Tuple2(newZoom, offset);
	});
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === -2) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Services$Lenses$setCanvas = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.dt;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{dt: value});
		}));
var $author$project$Services$Lenses$mapCanvas = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.dt;
	},
	$author$project$Services$Lenses$setCanvas);
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setPosition = F2(
	function (position, props) {
		return _Utils_eq(props.iG, position) ? props : _Utils_update(
			props,
			{
				gS: A2(
					$elm$core$Dict$map,
					F2(
						function (_v0, p) {
							return _Utils_update(
								p,
								{iG: position});
						}),
					props.gS),
				iG: position
			});
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapPosition = F2(
	function (transform, props) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setPosition,
			transform(props.iG),
			props);
	});
var $author$project$Services$Lenses$setTableProps = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bu;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bu: value});
		}));
var $author$project$Services$Lenses$mapTableProps = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.bu;
	},
	$author$project$Services$Lenses$setTableProps);
var $elm$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					if (md.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var d = md.a;
						return $elm$core$Maybe$Just(
							A4(func, a, b, c, d));
					}
				}
			}
		}
	});
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Libs$Area$merge = function (areas) {
	return A5(
		$elm$core$Maybe$map4,
		F4(
			function (left, top, right, bottom) {
				return A2(
					$author$project$Libs$Area$Area,
					A2($author$project$Libs$Models$Position$Position, left, top),
					A2($author$project$Libs$Models$Size$Size, right - left, bottom - top));
			}),
		$elm$core$List$minimum(
			A2(
				$elm$core$List$map,
				function (area) {
					return area.iG.at;
				},
				areas)),
		$elm$core$List$minimum(
			A2(
				$elm$core$List$map,
				function (area) {
					return area.iG.aD;
				},
				areas)),
		$elm$core$List$maximum(
			A2(
				$elm$core$List$map,
				function (area) {
					return area.iG.at + area.l.aF;
				},
				areas)),
		$elm$core$List$maximum(
			A2(
				$elm$core$List$map,
				function (area) {
					return area.iG.aD + area.l.ap;
				},
				areas)));
};
var $author$project$Services$Lenses$setPosition = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iG;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iG: value});
		}));
var $author$project$Services$Lenses$setZoom = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.dm;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{dm: value});
		}));
var $author$project$Libs$Models$Position$negate = function (pos) {
	return A2($author$project$Libs$Models$Position$Position, -pos.at, -pos.aD);
};
var $author$project$Models$Project$CanvasProps$viewport = F2(
	function (screen, canvas) {
		return A2(
			$author$project$Libs$Area$div,
			canvas.dm,
			A2(
				$author$project$Libs$Area$Area,
				$author$project$Libs$Models$Position$negate(canvas.iG),
				screen.l));
	});
var $author$project$Libs$Area$zero = {iG: $author$project$Libs$Models$Position$zero, l: $author$project$Libs$Models$Size$zero};
var $author$project$PagesComponents$Projects$Id_$Updates$Canvas$fitCanvas = F2(
	function (screen, erd) {
		var selectedTables = A2(
			$elm$core$Dict$filter,
			F2(
				function (_v2, p) {
					return p.bp;
				}),
			erd.bu);
		var tables = A3(
			$author$project$Libs$Bool$cond,
			$elm$core$Dict$isEmpty(selectedTables),
			erd.bu,
			selectedTables);
		var tablesArea = A2(
			$elm$core$Maybe$withDefault,
			$author$project$Libs$Area$zero,
			$author$project$Libs$Area$merge(
				A2(
					$elm$core$List$map,
					$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$area,
					$elm$core$Dict$values(tables))));
		var padding = 20;
		var _v0 = A4(
			$author$project$PagesComponents$Projects$Id_$Updates$Canvas$computeFit,
			A2($author$project$Models$Project$CanvasProps$viewport, screen, erd.dt),
			padding,
			tablesArea,
			erd.dt.dm);
		var newZoom = _v0.a;
		var centerOffset = _v0.b;
		return A2(
			$author$project$Services$Lenses$mapTableProps,
			$elm$core$Dict$map(
				function (_v1) {
					return $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapPosition(
						$author$project$Libs$Models$Position$add(centerOffset));
				}),
			A2(
				$author$project$Services$Lenses$mapCanvas,
				A2(
					$elm$core$Basics$composeR,
					$author$project$Services$Lenses$setPosition($author$project$Libs$Models$Position$zero),
					$author$project$Services$Lenses$setZoom(newZoom)),
				erd));
	});
var $author$project$Ports$Focus = function (a) {
	return {$: 2, a: a};
};
var $author$project$Ports$focus = function (id) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$Focus(id));
};
var $author$project$Ports$Fullscreen = function (a) {
	return {$: 5, a: a};
};
var $author$project$Ports$fullscreen = function (maybeId) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$Fullscreen(maybeId));
};
var $elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var $author$project$Libs$Area$from = F2(
	function (p1, p2) {
		return {
			iG: A2(
				$author$project$Libs$Models$Position$Position,
				A2($elm$core$Basics$min, p1.at, p2.at),
				A2($elm$core$Basics$min, p1.aD, p2.aD)),
			l: A2(
				$author$project$Libs$Models$Size$Size,
				$elm$core$Basics$abs(p2.at - p1.at),
				$elm$core$Basics$abs(p2.aD - p1.aD))
		};
	});
var $author$project$Libs$Area$move = F2(
	function (vector, area) {
		return A2(
			$author$project$Libs$Area$Area,
			A2($author$project$Libs$Models$Position$add, vector, area.iG),
			area.l);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Drag$buildSelectionArea = F3(
	function (screen, canvas, dragState) {
		return A2(
			$author$project$Libs$Area$div,
			canvas.dm,
			A2(
				$author$project$Libs$Area$move,
				$author$project$Libs$Models$Position$negate(
					A2($author$project$Libs$Models$Position$add, canvas.iG, screen.iG)),
				A2($author$project$Libs$Area$from, dragState.Y, dragState.fw)));
	});
var $author$project$Services$Lenses$mapM = F4(
	function (get, update, transform, item) {
		return A2(
			update,
			A2(
				$elm$core$Maybe$map,
				transform,
				get(item)),
			item);
	});
var $author$project$Services$Lenses$setErd = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.ha;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{ha: value});
		}));
var $author$project$Services$Lenses$mapErdM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.ha;
	},
	$author$project$Services$Lenses$setErd);
var $author$project$Services$Lenses$mapPosition = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.iG;
	},
	$author$project$Services$Lenses$setPosition);
var $author$project$PagesComponents$Projects$Id_$Updates$Drag$move = F3(
	function (drag, zoom, position) {
		return A2(
			$author$project$Libs$Models$Position$add,
			A2(
				$author$project$Libs$Models$Position$div,
				zoom,
				A2($author$project$Libs$Models$Position$sub, drag.Y, drag.fw)),
			position);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Drag$moveCanvas = F2(
	function (drag, canvas) {
		return A2(
			$author$project$Services$Lenses$mapPosition,
			A2($author$project$PagesComponents$Projects$Id_$Updates$Drag$move, drag, 1),
			canvas);
	});
var $author$project$Libs$Models$HtmlId$decode = function (text) {
	return A2(
		$elm$core$Maybe$withDefault,
		text,
		$elm$url$Url$percentDecode(text));
};
var $author$project$Models$Project$TableId$fromHtmlId = function (id) {
	var _v0 = A2($elm$core$String$split, '-', id);
	if ((((_v0.b && (_v0.a === 'table')) && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
		var _v1 = _v0.b;
		var schema = _v1.a;
		var _v2 = _v1.b;
		var table = _v2.a;
		return _Utils_Tuple2(
			schema,
			$author$project$Libs$Models$HtmlId$decode(table));
	} else {
		return _Utils_Tuple2($author$project$Conf$schema.cD, id);
	}
};
var $author$project$PagesComponents$Projects$Id_$Updates$Drag$moveTables = F3(
	function (drag, zoom, tables) {
		var tableId = $author$project$Models$Project$TableId$fromHtmlId(drag.t);
		var dragSelected = A3(
			$author$project$Libs$Maybe$mapOrElse,
			function ($) {
				return $.bp;
			},
			false,
			A2($elm$core$Dict$get, tableId, tables));
		return A2(
			$elm$core$Dict$map,
			F2(
				function (id, p) {
					return (_Utils_eq(tableId, id) || (dragSelected && p.bp)) ? A2(
						$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setPosition,
						A3($author$project$PagesComponents$Projects$Id_$Updates$Drag$move, drag, zoom, p.iG),
						p) : p;
				}),
			tables);
	});
var $author$project$Libs$Area$overlap = F2(
	function (area1, area2) {
		return !((_Utils_cmp(area2.iG.at + area2.l.aF, area1.iG.at) < 1) || ((_Utils_cmp(area2.iG.at, area1.iG.at + area1.l.aF) > -1) || ((_Utils_cmp(area2.iG.aD, area1.iG.aD + area1.l.ap) > -1) || (_Utils_cmp(area2.iG.aD + area2.l.ap, area1.iG.aD) < 1))));
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setSelected = F2(
	function (selected, props) {
		return _Utils_eq(props.bp, selected) ? props : _Utils_update(
			props,
			{
				gS: A2(
					$elm$core$Dict$map,
					F2(
						function (_v0, p) {
							return _Utils_update(
								p,
								{bp: selected});
						}),
					props.gS),
				bp: selected
			});
	});
var $author$project$Services$Lenses$setSelectionBox = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.i9;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{i9: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Updates$Drag$handleDrag = F3(
	function (drag, isEnd, model) {
		var canvas = A3(
			$author$project$Libs$Maybe$mapOrElse,
			function ($) {
				return $.dt;
			},
			$author$project$Models$Project$CanvasProps$zero,
			model.ha);
		return _Utils_eq(drag.t, $author$project$Conf$ids.ha) ? (isEnd ? A2(
			$author$project$Services$Lenses$mapErdM,
			$author$project$Services$Lenses$mapCanvas(
				$author$project$PagesComponents$Projects$Id_$Updates$Drag$moveCanvas(drag)),
			model) : model) : (_Utils_eq(drag.t, $author$project$Conf$ids.i9) ? (isEnd ? A2($author$project$Services$Lenses$setSelectionBox, $elm$core$Maybe$Nothing, model) : function (area) {
			return A2(
				$author$project$Services$Lenses$mapErdM,
				$author$project$Services$Lenses$mapTableProps(
					$elm$core$Dict$map(
						F2(
							function (_v0, p) {
								return A2(
									$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setSelected,
									A2(
										$author$project$Libs$Area$overlap,
										area,
										$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$area(p)),
									p);
							}))),
				A2(
					$author$project$Services$Lenses$setSelectionBox,
					$elm$core$Maybe$Just(area),
					model));
		}(
			A3($author$project$PagesComponents$Projects$Id_$Updates$Drag$buildSelectionArea, model.i6, canvas, drag))) : (isEnd ? A2(
			$author$project$Services$Lenses$mapErdM,
			$author$project$Services$Lenses$mapTableProps(
				A2($author$project$PagesComponents$Projects$Id_$Updates$Drag$moveTables, drag, canvas.dm)),
			model) : model));
	});
var $author$project$PagesComponents$Projects$Id_$Models$FindPathState$Empty = {$: 0};
var $author$project$PagesComponents$Projects$Id_$Models$FPCompute = F5(
	function (a, b, c, d, e) {
		return {$: 5, a: a, b: b, c: c, d: d, e: e};
	});
var $author$project$PagesComponents$Projects$Id_$Models$FindPathMsg = function (a) {
	return {$: 25, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$FindPathState$Found = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$FindPathState$Searching = {$: 1};
var $author$project$PagesComponents$Projects$Id_$Models$FindPathStepDir$Left = 1;
var $author$project$PagesComponents$Projects$Id_$Models$FindPathStepDir$Right = 0;
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _v0) {
				var trues = _v0.a;
				var falses = _v0.b;
				return pred(x) ? _Utils_Tuple2(
					A2($elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2($elm$core$List$cons, x, falses));
			});
		return A3(
			$elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$FindPath$buildPaths = F6(
	function (tables, relations, settings, tableId, isDone, curPath) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (table) {
				return isDone(table) ? A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (p) {
						return _List_fromArray(
							[p]);
					},
					_List_Nil,
					$author$project$Libs$Nel$fromList(curPath)) : function (_v0) {
					var tableRelations = _v0.a;
					var otherRelations = _v0.b;
					return ($elm$core$List$isEmpty(tableRelations) || (_Utils_cmp(
						$elm$core$List$length(curPath),
						settings.cT) > 0)) ? _List_Nil : A2(
						$elm$core$List$concatMap,
						function (r) {
							return _Utils_eq(r.de.G, tableId) ? A6(
								$author$project$PagesComponents$Projects$Id_$Updates$FindPath$buildPaths,
								A2($elm$core$Dict$remove, tableId, tables),
								otherRelations,
								settings,
								r.fW.G,
								isDone,
								_Utils_ap(
									curPath,
									_List_fromArray(
										[
											{ao: 0, iT: r}
										]))) : A6(
								$author$project$PagesComponents$Projects$Id_$Updates$FindPath$buildPaths,
								A2($elm$core$Dict$remove, tableId, tables),
								otherRelations,
								settings,
								r.de.G,
								isDone,
								_Utils_ap(
									curPath,
									_List_fromArray(
										[
											{ao: 1, iT: r}
										])));
						},
						tableRelations);
				}(
					A2(
						$elm$core$List$partition,
						function (r) {
							return _Utils_eq(r.de.G, tableId) || _Utils_eq(r.fW.G, tableId);
						},
						relations));
			},
			_List_Nil,
			A2($elm$core$Dict$get, tableId, tables));
	});
var $author$project$Models$Project$ProjectSettings$removeColumn = function (hiddenColumns) {
	var names = A2(
		$author$project$Libs$List$filterNot,
		$elm$core$String$isEmpty,
		A2(
			$elm$core$List$map,
			$elm$core$String$trim,
			A2($elm$core$String$split, ',', hiddenColumns)));
	return function (column) {
		return A2(
			$elm$core$List$any,
			function (name) {
				return _Utils_eq(column, name) || A2($author$project$Libs$Regex$match, '^' + (name + '$'), column);
			},
			names);
	};
};
var $author$project$PagesComponents$Projects$Id_$Updates$FindPath$filterRelations = F2(
	function (settings, relations) {
		var removeTable = $author$project$Models$Project$ProjectSettings$removeTable(settings.cN);
		var removeColumn = $author$project$Models$Project$ProjectSettings$removeColumn(settings.cM);
		return A2(
			$author$project$Libs$List$filterNot,
			function (r) {
				return removeTable(r.de.G) || (removeTable(r.fW.G) || (removeColumn(r.de.r) || removeColumn(r.fW.r)));
			},
			relations);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$FindPath$computeFindPath = F5(
	function (tables, relations, from, to, settings) {
		return {
			hn: from,
			b0: $elm$core$Maybe$Nothing,
			iD: A6(
				$author$project$PagesComponents$Projects$Id_$Updates$FindPath$buildPaths,
				tables,
				A2($author$project$PagesComponents$Projects$Id_$Updates$FindPath$filterRelations, settings, relations),
				settings,
				from,
				function (t) {
					return _Utils_eq(t.t, to);
				},
				_List_Nil),
			dc: settings,
			jy: to
		};
	});
var $author$project$Services$Lenses$setFindPath = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bM;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bM: value});
		}));
var $author$project$Services$Lenses$mapFindPath = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.bM;
	},
	$author$project$Services$Lenses$setFindPath);
var $author$project$Libs$String$orElse = F2(
	function (other, str) {
		return (str === '') ? other : str;
	});
var $author$project$Services$Lenses$setIgnoredColumns = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.cM;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{cM: value});
		}));
var $author$project$Services$Lenses$setIgnoredTables = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.cN;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{cN: value});
		}));
var $author$project$Models$Project$ProjectSettings$fillFindPath = function (settings) {
	return A2(
		$author$project$Services$Lenses$mapFindPath,
		function (fp) {
			return A2(
				$author$project$Services$Lenses$setIgnoredColumns,
				A2($author$project$Libs$String$orElse, settings.X.au, fp.cM),
				A2(
					$author$project$Services$Lenses$setIgnoredTables,
					A2($author$project$Libs$String$orElse, settings.iX, fp.cN),
					fp));
		},
		settings);
};
var $author$project$Track$findPathResults = function (result) {
	return {
		g6: _List_fromArray(
			[
				_Utils_Tuple2(
				'found-paths',
				$elm$core$String$fromInt(
					$elm$core$List$length(result.iD))),
				_Utils_Tuple2(
				'ignored-columns',
				$elm$core$String$fromInt(
					$elm$core$List$length(
						A2($elm$core$String$split, ',', result.dc.cM)))),
				_Utils_Tuple2(
				'ignored-tables',
				$elm$core$String$fromInt(
					$elm$core$List$length(
						A2($elm$core$String$split, ',', result.dc.cN)))),
				_Utils_Tuple2(
				'max-path-length',
				$elm$core$String$fromInt(result.dc.cT))
			]),
		e6: true,
		cW: 'find-path-results'
	};
};
var $author$project$Track$findPathResult = $author$project$Track$findPathResults;
var $author$project$PagesComponents$Projects$Id_$Models$FindPathState$map = F2(
	function (f, state) {
		switch (state.$) {
			case 0:
				return $author$project$PagesComponents$Projects$Id_$Models$FindPathState$Empty;
			case 1:
				return $author$project$PagesComponents$Projects$Id_$Models$FindPathState$Searching;
			default:
				var result = state.a;
				return $author$project$PagesComponents$Projects$Id_$Models$FindPathState$Found(
					f(result));
		}
	});
var $author$project$Services$Lenses$mapFindPathM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.bM;
	},
	$author$project$Services$Lenses$setFindPath);
var $author$project$Services$Lenses$setOpened = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.b0;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{b0: value});
		}));
var $author$project$Services$Lenses$mapOpened = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.b0;
	},
	$author$project$Services$Lenses$setOpened);
var $author$project$Services$Lenses$setResult = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.i_;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{i_: value});
		}));
var $author$project$Services$Lenses$mapResult = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.i_;
	},
	$author$project$Services$Lenses$setResult);
var $author$project$Services$Lenses$setSettings = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.dc;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{dc: value});
		}));
var $author$project$Services$Lenses$mapSettings = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.dc;
	},
	$author$project$Services$Lenses$setSettings);
var $author$project$Services$Lenses$setShowSettings = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.ji;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{ji: value});
		}));
var $author$project$Services$Lenses$mapShowSettings = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.ji;
	},
	$author$project$Services$Lenses$setShowSettings);
var $author$project$Track$openFindPath = {g6: _List_Nil, e6: true, cW: 'open-find-path'};
var $elm$core$Process$sleep = _Process_sleep;
var $author$project$Libs$Task$sendAfter = F2(
	function (millis, msg) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always(msg),
			$elm$core$Process$sleep(millis));
	});
var $author$project$Services$Lenses$setFrom = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.hn;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{hn: value});
		}));
var $author$project$Services$Lenses$setTo = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.jy;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{jy: value});
		}));
var $author$project$Ports$TrackEvent = F2(
	function (a, b) {
		return {$: 19, a: a, b: b};
	});
var $author$project$Ports$track = function (event) {
	return event.e6 ? $author$project$Ports$messageToJs(
		A2(
			$author$project$Ports$TrackEvent,
			event.cW,
			$elm$json$Json$Encode$object(
				A2(
					$elm$core$List$map,
					function (_v0) {
						var k = _v0.a;
						var v = _v0.b;
						return _Utils_Tuple2(
							k,
							$elm$json$Json$Encode$string(v));
					},
					event.g6)))) : $elm$core$Platform$Cmd$none;
};
var $elm$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 1) {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					return $elm$core$Maybe$Just(
						A3(func, a, b, c));
				}
			}
		}
	});
var $author$project$Libs$Maybe$zip3 = F3(
	function (maybeA, maybeB, maybeC) {
		return A4(
			$elm$core$Maybe$map3,
			F3(
				function (a, b, c) {
					return _Utils_Tuple3(a, b, c);
				}),
			maybeA,
			maybeB,
			maybeC);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$FindPath$handleFindPath = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var from = msg.a;
				var to = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapSettings($author$project$Models$Project$ProjectSettings$fillFindPath),
						A2(
							$author$project$Services$Lenses$setFindPath,
							$elm$core$Maybe$Just(
								{hn: from, t: $author$project$Conf$ids.hi, i_: $author$project$PagesComponents$Projects$Id_$Models$FindPathState$Empty, ji: false, jy: to}),
							model)),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$Libs$Task$sendAfter,
								1,
								$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.hi)),
								$author$project$Ports$track($author$project$Track$openFindPath)
							])));
			case 1:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapFindPathM,
						$author$project$Services$Lenses$mapShowSettings($elm$core$Basics$not),
						model),
					$elm$core$Platform$Cmd$none);
			case 2:
				var from = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapFindPathM,
						$author$project$Services$Lenses$setFrom(from),
						model),
					$elm$core$Platform$Cmd$none);
			case 3:
				var to = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapFindPathM,
						$author$project$Services$Lenses$setTo(to),
						model),
					$elm$core$Platform$Cmd$none);
			case 4:
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (_v1) {
						var e = _v1.a;
						var from = _v1.b;
						var to = _v1.c;
						return _Utils_Tuple2(
							A2(
								$author$project$Services$Lenses$mapFindPathM,
								$author$project$Services$Lenses$setResult($author$project$PagesComponents$Projects$Id_$Models$FindPathState$Searching),
								model),
							A2(
								$author$project$Libs$Task$sendAfter,
								300,
								$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
									A5($author$project$PagesComponents$Projects$Id_$Models$FPCompute, e.jr, e.iU, from, to, e.dc.bM))));
					},
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Maybe$andThen,
						function (fp) {
							return A3($author$project$Libs$Maybe$zip3, model.ha, fp.hn, fp.jy);
						},
						model.bM));
			case 5:
				var tables = msg.a;
				var relations = msg.b;
				var from = msg.c;
				var to = msg.d;
				var settings = msg.e;
				return function (result) {
					return _Utils_Tuple2(
						A2(
							$author$project$Services$Lenses$mapFindPathM,
							$author$project$Services$Lenses$setResult(
								$author$project$PagesComponents$Projects$Id_$Models$FindPathState$Found(result)),
							model),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$Ports$track(
									$author$project$Track$findPathResult(result))
								])));
				}(
					A5($author$project$PagesComponents$Projects$Id_$Updates$FindPath$computeFindPath, tables, relations, from, to, settings));
			case 6:
				var index = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapFindPathM,
						$author$project$Services$Lenses$mapResult(
							$author$project$PagesComponents$Projects$Id_$Models$FindPathState$map(
								$author$project$Services$Lenses$mapOpened(
									function (o) {
										return A3(
											$author$project$Libs$Bool$cond,
											_Utils_eq(
												o,
												$elm$core$Maybe$Just(index)),
											$elm$core$Maybe$Nothing,
											$elm$core$Maybe$Just(index));
									}))),
						model),
					$elm$core$Platform$Cmd$none);
			case 7:
				var settings = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapSettings(
							$author$project$Services$Lenses$setFindPath(settings)),
						model),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setFindPath, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Track$openHelp = {g6: _List_Nil, e6: true, cW: 'open-help'};
var $author$project$PagesComponents$Projects$Id_$Updates$Help$setHelp = F2(
	function (transform, item) {
		return _Utils_update(
			item,
			{
				hr: A2($elm$core$Maybe$map, transform, item.hr)
			});
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Help$setOpenedSection = F2(
	function (transform, item) {
		return _Utils_update(
			item,
			{
				ix: transform(item.ix)
			});
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Help$handleHelp = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var section = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hr: $elm$core$Maybe$Just(
								{t: $author$project$Conf$ids.hs, ix: section})
						}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$Libs$Task$sendAfter,
								1,
								$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.hs)),
								$author$project$Ports$track($author$project$Track$openHelp)
							])));
			case 1:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{hr: $elm$core$Maybe$Nothing}),
					$elm$core$Platform$Cmd$none);
			default:
				var section = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Help$setHelp,
						$author$project$PagesComponents$Projects$Id_$Updates$Help$setOpenedSection(
							function (s) {
								return A3(
									$author$project$Libs$Bool$cond,
									_Utils_eq(s, section),
									'',
									section);
							}),
						model),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$PagesComponents$Projects$Id_$Models$CreateRelation = F2(
	function (a, b) {
		return {$: 21, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$CursorDrag = 0;
var $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg = function (a) {
	return {$: 6, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg = function (a) {
	return {$: 28, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ProjectInfo$create = function (project) {
	return {e1: project.e1, t: project.t, cW: project.cW, gj: project.gj};
};
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdColumnProps$create = F7(
	function (column, index, position, size, color, highlightedColumns, selected) {
		return {
			n: color,
			r: column,
			fj: A2($elm$core$Set$member, column, highlightedColumns),
			a9: index,
			iG: position,
			bp: selected,
			l: size
		};
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdColumnProps$createAll = F6(
	function (position, size, color, highlightedColumns, selected, columns) {
		return $elm$core$Dict$fromList(
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, c) {
						return _Utils_Tuple2(
							c,
							A7($author$project$PagesComponents$Projects$Id_$Models$ErdColumnProps$create, c, i, position, size, color, highlightedColumns, selected));
					}),
				columns));
	});
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$create = F4(
	function (tableRelations, shownTables, hint, props) {
		return {
			n: props.n,
			gS: A6($author$project$PagesComponents$Projects$Id_$Models$ErdColumnProps$createAll, props.iG, props.l, props.n, $elm$core$Set$empty, props.bp, props.W),
			bN: $elm$core$Set$empty,
			t: props.t,
			aM: false,
			iG: props.iG,
			fP: hint,
			iS: A3($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$buildRelatedTables, tableRelations, shownTables, props.t),
			bp: props.bp,
			aC: props.X,
			bq: props.W,
			l: props.l
		};
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$createLayout = F2(
	function (relationsByTable, layout) {
		var layoutProps = _Utils_ap(layout.jr, layout.dT);
		return _Utils_Tuple3(
			layout.dt,
			$elm$core$Dict$fromList(
				A2(
					$elm$core$List$map,
					function (p) {
						return _Utils_Tuple2(
							p.t,
							A4(
								$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$create,
								A3($author$project$Libs$Dict$getOrElse, p.t, _List_Nil, relationsByTable),
								A2(
									$elm$core$List$map,
									function ($) {
										return $.t;
									},
									layout.jr),
								$elm$core$Maybe$Nothing,
								p));
					},
					layoutProps)),
			A2(
				$elm$core$List$map,
				function ($) {
					return $.t;
				},
				layout.jr));
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$create = F2(
	function (allProjects, project) {
		var relationsByTable = $author$project$PagesComponents$Projects$Id_$Models$Erd$buildRelationsByTable(project.iU);
		var _v0 = A2($author$project$PagesComponents$Projects$Id_$Models$Erd$createLayout, relationsByTable, project.as);
		var canvas = _v0.a;
		var tableProps = _v0.b;
		var shownTables = _v0.c;
		return $author$project$PagesComponents$Projects$Id_$Models$Erd$computeSchema(
			{
				dt: canvas,
				d_: project.d_,
				fJ: A2(
					$elm$core$List$sortBy,
					function (p) {
						return -$elm$time$Time$posixToMillis(p.gj);
					},
					A2(
						$elm$core$List$map,
						$author$project$PagesComponents$Projects$Id_$Models$ProjectInfo$create,
						A2(
							$elm$core$List$filter,
							function (p) {
								return !_Utils_eq(p.t, project.t);
							},
							allProjects))),
				bm: $author$project$PagesComponents$Projects$Id_$Models$ProjectInfo$create(project),
				iU: A2(
					$elm$core$List$map,
					$author$project$PagesComponents$Projects$Id_$Models$ErdRelation$create(project.jr),
					project.iU),
				en: relationsByTable,
				dc: project.dc,
				ca: shownTables,
				cc: project.cc,
				bu: tableProps,
				jr: A2(
					$elm$core$Dict$map,
					function (id) {
						return A2(
							$author$project$PagesComponents$Projects$Id_$Models$ErdTable$create,
							project.jr,
							A3($author$project$Libs$Dict$getOrElse, id, _List_Nil, relationsByTable));
					},
					project.jr),
				eO: project.eO
			});
	});
var $author$project$Libs$Json$Decode$errorToHtml = function (error) {
	return '<pre>' + ($elm$json$Json$Decode$errorToString(error) + '</pre>');
};
var $author$project$Services$SqlSourceUpload$FileLoaded = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $author$project$Models$SourceInfo$SourceInfo = F7(
	function (id, name, kind, enabled, fromSample, createdAt, updatedAt) {
		return {e1: createdAt, e6: enabled, fb: fromSample, t: id, S: kind, cW: name, gj: updatedAt};
	});
var $author$project$Services$SqlSourceUpload$localSource = function (file) {
	return A3($author$project$Models$Project$SourceKind$LocalFile, file.cW, file.l, file.hJ);
};
var $author$project$Services$SqlSourceUpload$gotLocalFile = F5(
	function (now, projectId, sourceId, file, content) {
		return A3(
			$author$project$Services$SqlSourceUpload$FileLoaded,
			projectId,
			A7(
				$author$project$Models$SourceInfo$SourceInfo,
				sourceId,
				file.cW,
				$author$project$Services$SqlSourceUpload$localSource(file),
				true,
				$elm$core$Maybe$Nothing,
				now,
				now),
			content);
	});
var $author$project$Libs$List$last = function (list) {
	last:
	while (true) {
		if (!list.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!list.b.b) {
				var a = list.a;
				return $elm$core$Maybe$Just(a);
			} else {
				var tail = list.b;
				var $temp$list = tail;
				list = $temp$list;
				continue last;
			}
		}
	}
};
var $author$project$Libs$Models$FileUrl$filename = function (url) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		$author$project$Libs$List$last(
			A2(
				$elm$core$List$filter,
				function (p) {
					return !(p === '');
				},
				A2(
					$elm$core$String$split,
					'/',
					A2(
						$elm$core$Maybe$withDefault,
						'',
						$elm$core$List$head(
							A2(
								$elm$core$List$filter,
								function (p) {
									return !(p === '');
								},
								A2(
									$elm$core$String$split,
									'#',
									A2(
										$elm$core$Maybe$withDefault,
										'',
										$elm$core$List$head(
											A2(
												$elm$core$List$filter,
												function (p) {
													return !(p === '');
												},
												A2($elm$core$String$split, '?', url))))))))))));
};
var $author$project$Services$SqlSourceUpload$remoteSource = F2(
	function (url, content) {
		return A2(
			$author$project$Models$Project$SourceKind$RemoteFile,
			url,
			$elm$core$String$length(content));
	});
var $author$project$Services$SqlSourceUpload$gotRemoteFile = F6(
	function (now, projectId, sourceId, url, content, sample) {
		return A3(
			$author$project$Services$SqlSourceUpload$FileLoaded,
			projectId,
			A7(
				$author$project$Models$SourceInfo$SourceInfo,
				sourceId,
				$author$project$Libs$Models$FileUrl$filename(url),
				A2($author$project$Services$SqlSourceUpload$remoteSource, url, content),
				true,
				sample,
				now,
				now),
			content);
	});
var $author$project$PagesComponents$Projects$Id_$Models$FPClose = {$: 8};
var $author$project$PagesComponents$Projects$Id_$Models$FPOpen = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$FitContent = {$: 31};
var $author$project$PagesComponents$Projects$Id_$Models$HClose = {$: 1};
var $author$project$PagesComponents$Projects$Id_$Models$HOpen = function (a) {
	return {$: 0, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$HelpMsg = function (a) {
	return {$: 29, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$LOpen = {$: 0};
var $author$project$PagesComponents$Projects$Id_$Models$LayoutMsg = function (a) {
	return {$: 23, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$SaveProject = {$: 2};
var $author$project$PagesComponents$Projects$Id_$Models$VRCancel = {$: 3};
var $author$project$PagesComponents$Projects$Id_$Models$VRCreate = {$: 0};
var $author$project$PagesComponents$Projects$Id_$Models$Zoom = function (a) {
	return {$: 34, a: a};
};
var $author$project$Ports$Blur = function (a) {
	return {$: 3, a: a};
};
var $author$project$Ports$blur = function (id) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$Blur(id));
};
var $author$project$PagesComponents$Projects$Id_$Models$ConfirmAnswer = F2(
	function (a, b) {
		return {$: 50, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$DragCancel = {$: 44};
var $author$project$PagesComponents$Projects$Id_$Models$LCancel = {$: 3};
var $author$project$PagesComponents$Projects$Id_$Models$ModalClose = function (a) {
	return {$: 55, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$PSClose = {$: 1};
var $author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadClose = {$: 5};
var $author$project$PagesComponents$Projects$Id_$Models$SAClose = {$: 2};
var $author$project$PagesComponents$Projects$Id_$Models$SClose = {$: 1};
var $author$project$PagesComponents$Projects$Id_$Models$SchemaAnalysisMsg = function (a) {
	return {$: 26, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$SelectTable = F2(
	function (a, b) {
		return {$: 14, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$SharingMsg = function (a) {
	return {$: 27, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Updates$Hotkey$cancelElement = function (model) {
	return $author$project$Libs$Task$send(
		A2(
			$elm$core$Maybe$withDefault,
			$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Nothing to cancel'),
			A2(
				$author$project$Libs$Maybe$orElse,
				A2(
					$elm$core$Maybe$map,
					function (p) {
						return A2($author$project$PagesComponents$Projects$Id_$Models$SelectTable, p.t, false);
					},
					A2(
						$elm$core$Maybe$andThen,
						function (e) {
							return A2(
								$author$project$Libs$List$find,
								function (p) {
									return p.bp;
								},
								$elm$core$Dict$values(e.bu));
						},
						model.ha)),
				A2(
					$author$project$Libs$Maybe$orElse,
					A2(
						$elm$core$Maybe$map,
						function (_v9) {
							return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
								$author$project$PagesComponents$Projects$Id_$Models$HelpMsg($author$project$PagesComponents$Projects$Id_$Models$HClose));
						},
						model.hr),
					A2(
						$author$project$Libs$Maybe$orElse,
						A2(
							$elm$core$Maybe$map,
							function (_v8) {
								return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
									$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSClose));
							},
							model.dc),
						A2(
							$author$project$Libs$Maybe$orElse,
							A2(
								$elm$core$Maybe$map,
								function (_v7) {
									return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
										$author$project$PagesComponents$Projects$Id_$Models$SharingMsg($author$project$PagesComponents$Projects$Id_$Models$SClose));
								},
								model.jc),
							A2(
								$author$project$Libs$Maybe$orElse,
								A2(
									$elm$core$Maybe$map,
									function (_v6) {
										return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
											$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadClose));
									},
									model.jj),
								A2(
									$author$project$Libs$Maybe$orElse,
									A2(
										$elm$core$Maybe$map,
										function (_v5) {
											return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
												$author$project$PagesComponents$Projects$Id_$Models$SchemaAnalysisMsg($author$project$PagesComponents$Projects$Id_$Models$SAClose));
										},
										model.i4),
									A2(
										$author$project$Libs$Maybe$orElse,
										A2(
											$elm$core$Maybe$map,
											function (_v4) {
												return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
													$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg($author$project$PagesComponents$Projects$Id_$Models$FPClose));
											},
											model.bM),
										A2(
											$author$project$Libs$Maybe$orElse,
											A2(
												$elm$core$Maybe$map,
												function (_v3) {
													return $author$project$PagesComponents$Projects$Id_$Models$VirtualRelationMsg($author$project$PagesComponents$Projects$Id_$Models$VRCancel);
												},
												model.jI),
											A2(
												$author$project$Libs$Maybe$orElse,
												A2(
													$elm$core$Maybe$map,
													function (_v2) {
														return $author$project$PagesComponents$Projects$Id_$Models$DragCancel;
													},
													model.cF),
												A2(
													$author$project$Libs$Maybe$orElse,
													A2(
														$elm$core$Maybe$map,
														function (_v1) {
															return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
																$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg($author$project$PagesComponents$Projects$Id_$Models$LCancel));
														},
														model.h9),
													A2(
														$author$project$Libs$Maybe$orElse,
														A2(
															$elm$core$Maybe$map,
															function (c) {
																return $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
																	A2($author$project$PagesComponents$Projects$Id_$Models$ConfirmAnswer, false, c.bI.bk));
															},
															model.a1),
														A2(
															$elm$core$Maybe$map,
															function (_v0) {
																return $author$project$PagesComponents$Projects$Id_$Models$ContextMenuClose;
															},
															model.gW))))))))))))));
};
var $author$project$Services$Lenses$setActive = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.al;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{al: value});
		}));
var $author$project$Services$Lenses$mapActive = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.al;
	},
	$author$project$Services$Lenses$setActive);
var $author$project$Services$Lenses$setNavbar = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.h8;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{h8: value});
		}));
var $author$project$Services$Lenses$mapNavbar = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.h8;
	},
	$author$project$Services$Lenses$setNavbar);
var $author$project$Services$Lenses$setSearch = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.er;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{er: value});
		}));
var $author$project$Services$Lenses$mapSearch = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.er;
	},
	$author$project$Services$Lenses$setSearch);
var $author$project$Ports$MouseDown = function (a) {
	return {$: 1, a: a};
};
var $author$project$Ports$mouseDown = function (id) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$MouseDown(id));
};
var $author$project$PagesComponents$Projects$Id_$Models$TableMove = F2(
	function (a, b) {
		return {$: 15, a: a, b: b};
	});
var $author$project$Libs$List$nonEmpty = function (list) {
	return !$elm$core$List$isEmpty(list);
};
var $author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables = F2(
	function (delta, model) {
		var selectedTables = A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (e) {
				return A2(
					$elm$core$List$filter,
					function ($) {
						return $.bp;
					},
					A2(
						$elm$core$List$filterMap,
						function (id) {
							return A2($elm$core$Dict$get, id, e.bu);
						},
						e.ca));
			},
			_List_Nil,
			model.ha);
		return $author$project$Libs$List$nonEmpty(selectedTables) ? $elm$core$Platform$Cmd$batch(
			A2(
				$elm$core$List$map,
				function (t) {
					return $author$project$Libs$Task$send(
						A2($author$project$PagesComponents$Projects$Id_$Models$TableMove, t.t, delta));
				},
				selectedTables)) : $elm$core$Platform$Cmd$none;
	});
var $author$project$PagesComponents$Projects$Id_$Models$TableOrder = F2(
	function (a, b) {
		return {$: 16, a: a, b: b};
	});
var $author$project$Libs$List$findIndexInner = F3(
	function (index, predicate, list) {
		findIndexInner:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(index);
				} else {
					var $temp$index = index + 1,
						$temp$predicate = predicate,
						$temp$list = rest;
					index = $temp$index;
					predicate = $temp$predicate;
					list = $temp$list;
					continue findIndexInner;
				}
			}
		}
	});
var $author$project$Libs$List$findIndex = $author$project$Libs$List$findIndexInner(0);
var $author$project$Libs$List$findIndexBy = F3(
	function (matcher, value, list) {
		return A2(
			$author$project$Libs$List$findIndex,
			function (a) {
				return _Utils_eq(
					matcher(a),
					value);
			},
			list);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTablesOrder = F2(
	function (delta, model) {
		var tables = A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (e) {
				return A2(
					$elm$core$List$filterMap,
					function (id) {
						return A2($elm$core$Dict$get, id, e.bu);
					},
					e.ca);
			},
			_List_Nil,
			model.ha);
		var selectedTables = A2(
			$elm$core$List$filter,
			function (_v2) {
				var t = _v2.b;
				return t.bp;
			},
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, t) {
						return _Utils_Tuple2(i, t);
					}),
				tables));
		return $author$project$Libs$List$nonEmpty(selectedTables) ? $elm$core$Platform$Cmd$batch(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var i = _v0.a;
					var t = _v0.b;
					return $author$project$Libs$Task$send(
						A2(
							$author$project$PagesComponents$Projects$Id_$Models$TableOrder,
							t.t,
							(($elm$core$List$length(tables) - 1) - i) + delta));
				},
				selectedTables)) : A2(
			$elm$core$Maybe$withDefault,
			$author$project$Libs$Task$send(
				$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Can\'t find an element to move :(')),
			A2(
				$elm$core$Maybe$map,
				function (_v1) {
					var id = _v1.a;
					var i = _v1.b;
					return $author$project$Libs$Task$send(
						A2(
							$author$project$PagesComponents$Projects$Id_$Models$TableOrder,
							id,
							(($elm$core$List$length(tables) - 1) - i) + delta));
				},
				A2(
					$elm$core$Maybe$andThen,
					function (id) {
						return A2(
							$elm$core$Maybe$map,
							function (i) {
								return _Utils_Tuple2(id, i);
							},
							A3(
								$author$project$Libs$List$findIndexBy,
								function ($) {
									return $.t;
								},
								id,
								tables));
					},
					model.bR)));
	});
var $author$project$PagesComponents$Projects$Id_$Models$HideColumn = function (a) {
	return {$: 10, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$HideTable = function (a) {
	return {$: 7, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ResetCanvas = {$: 22};
var $author$project$PagesComponents$Projects$Id_$Models$ConfirmOpen = function (a) {
	return {$: 49, a: a};
};
var $author$project$Components$Atoms$Icon$QuestionMarkCircle = 167;
var $author$project$PagesComponents$Projects$Id_$Models$confirm = F3(
	function (title, content, message) {
		return $author$project$PagesComponents$Projects$Id_$Models$ConfirmOpen(
			{
				aZ: 'Nope',
				n: $author$project$Libs$Tailwind$blue,
				a1: 'Yes!',
				D: 167,
				bg: content,
				bk: $author$project$Libs$Task$send(message),
				aj: title
			});
	});
var $author$project$PagesComponents$Projects$Id_$Models$resetCanvas = A3(
	$author$project$PagesComponents$Projects$Id_$Models$confirm,
	'Reset canvas?',
	$elm$html$Html$text('You will lose your current canvas state.'),
	$author$project$PagesComponents$Projects$Id_$Models$ResetCanvas);
var $author$project$PagesComponents$Projects$Id_$Updates$Hotkey$removeElement = function (model) {
	return A2(
		$elm$core$Maybe$withDefault,
		$author$project$Libs$Task$send(
			$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Can\'t find an element to remove :(')),
		A2(
			$author$project$Libs$Maybe$orElse,
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					return $author$project$Libs$Task$send($author$project$PagesComponents$Projects$Id_$Models$resetCanvas);
				},
				A2(
					$author$project$Libs$Maybe$filter,
					function (e) {
						return $author$project$Libs$List$nonEmpty(e.ca);
					},
					model.ha)),
			A2(
				$author$project$Libs$Maybe$orElse,
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$HideTable, $author$project$Libs$Task$send),
					model.bR),
				A2(
					$elm$core$Maybe$map,
					A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$HideColumn, $author$project$Libs$Task$send),
					model.bP))));
};
var $author$project$Ports$ScrollTo = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$Ports$scrollTo = F2(
	function (id, position) {
		return $author$project$Ports$messageToJs(
			A2($author$project$Ports$ScrollTo, id, position));
	});
var $author$project$Components$Atoms$Icon$ExclamationCircle = 96;
var $author$project$PagesComponents$Projects$Id_$Models$toastWarning = function (message) {
	return A2(
		$author$project$PagesComponents$Projects$Id_$Models$ToastAdd,
		$elm$core$Maybe$Just(8000),
		{n: $author$project$Libs$Tailwind$yellow, D: 96, bg: '', aj: message});
};
var $author$project$PagesComponents$Projects$Id_$Updates$Hotkey$handleHotkey = F2(
	function (model, hotkey) {
		switch (hotkey) {
			case 'search-open':
				return _Utils_Tuple2(
					model,
					$author$project$Ports$focus($author$project$Conf$ids.c8));
			case 'search-up':
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapNavbar,
						$author$project$Services$Lenses$mapSearch(
							$author$project$Services$Lenses$mapActive(
								function (a) {
									return a - 1;
								})),
						model),
					A2($author$project$Ports$scrollTo, $author$project$Conf$ids.c8 + '-active-item', 'end'));
			case 'search-down':
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapNavbar,
						$author$project$Services$Lenses$mapSearch(
							$author$project$Services$Lenses$mapActive(
								function (a) {
									return a + 1;
								})),
						model),
					A2($author$project$Ports$scrollTo, $author$project$Conf$ids.c8 + '-active-item', 'end'));
			case 'search-confirm':
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$mouseDown($author$project$Conf$ids.c8 + '-active-item'),
								$author$project$Ports$blur($author$project$Conf$ids.c8)
							])));
			case 'remove':
				return _Utils_Tuple2(
					model,
					$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$removeElement(model));
			case 'save':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send($author$project$PagesComponents$Projects$Id_$Models$SaveProject));
			case 'move-up':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: 0, cI: -1},
						model));
			case 'move-right':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: 1, cI: 0},
						model));
			case 'move-down':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: 0, cI: 1},
						model));
			case 'move-left':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: -1, cI: 0},
						model));
			case 'move-up-big':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: 0, cI: -10},
						model));
			case 'move-right-big':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: 10, cI: 0},
						model));
			case 'move-down-big':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: 0, cI: 10},
						model));
			case 'move-left-big':
				return _Utils_Tuple2(
					model,
					A2(
						$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTables,
						{cH: -10, cI: 0},
						model));
			case 'move-forward':
				return _Utils_Tuple2(
					model,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTablesOrder, 1, model));
			case 'move-backward':
				return _Utils_Tuple2(
					model,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTablesOrder, -1, model));
			case 'move-to-top':
				return _Utils_Tuple2(
					model,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTablesOrder, 1000, model));
			case 'move-to-back':
				return _Utils_Tuple2(
					model,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Hotkey$moveTablesOrder, -1000, model));
			case 'select-all':
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapTableProps(
							$elm$core$Dict$map(
								function (_v1) {
									return $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setSelected(true);
								})),
						model),
					$elm$core$Platform$Cmd$none);
			case 'save-layout':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg($author$project$PagesComponents$Projects$Id_$Models$LOpen)));
			case 'create-virtual-relation':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$VirtualRelationMsg(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (_v2) {
									return $author$project$PagesComponents$Projects$Id_$Models$VRCancel;
								},
								$author$project$PagesComponents$Projects$Id_$Models$VRCreate,
								model.jI))));
			case 'find-path':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (_v3) {
									return $author$project$PagesComponents$Projects$Id_$Models$FPClose;
								},
								A2($author$project$PagesComponents$Projects$Id_$Models$FPOpen, model.bR, $elm$core$Maybe$Nothing),
								model.bM))));
			case 'reset-zoom':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$Zoom(
							1 - A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (erd) {
									return erd.dt.dm;
								},
								0,
								model.ha))));
			case 'fit-to-screen':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send($author$project$PagesComponents$Projects$Id_$Models$FitContent));
			case 'undo':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Undo action not handled yet')));
			case 'redo':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Redo action not handled yet')));
			case 'cancel':
				return _Utils_Tuple2(
					model,
					$author$project$PagesComponents$Projects$Id_$Updates$Hotkey$cancelElement(model));
			case 'help':
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$HelpMsg(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (_v4) {
									return $author$project$PagesComponents$Projects$Id_$Models$HClose;
								},
								$author$project$PagesComponents$Projects$Id_$Models$HOpen(''),
								model.hr))));
			default:
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$toastWarning('Unhandled hotkey \'' + (hotkey + '\''))));
		}
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$mapSources = F2(
	function (transform, erd) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$Erd$setSources,
			transform(erd.cc),
			erd);
	});
var $author$project$Ports$ObserveSizes = function (a) {
	return {$: 16, a: a};
};
var $author$project$Ports$observeSizes = function (ids) {
	return $elm$core$List$isEmpty(ids) ? $elm$core$Platform$Cmd$none : $author$project$Ports$messageToJs(
		$author$project$Ports$ObserveSizes(ids));
};
var $author$project$Ports$observeSize = function (id) {
	return $author$project$Ports$observeSizes(
		_List_fromArray(
			[id]));
};
var $author$project$Ports$observeTablesSize = function (ids) {
	return $author$project$Ports$observeSizes(
		A2($elm$core$List$map, $author$project$Models$Project$TableId$toHtmlId, ids));
};
var $author$project$Services$Lenses$setCursorMode = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.g_;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{g_: value});
		}));
var $author$project$Components$Atoms$Icon$Exclamation = 95;
var $author$project$PagesComponents$Projects$Id_$Models$toastError = function (message) {
	return A2(
		$author$project$PagesComponents$Projects$Id_$Models$ToastAdd,
		$elm$core$Maybe$Nothing,
		{n: $author$project$Libs$Tailwind$red, D: 95, bg: '', aj: message});
};
var $author$project$Components$Atoms$Icon$CheckCircle = 43;
var $author$project$PagesComponents$Projects$Id_$Models$toastSuccess = function (message) {
	return A2(
		$author$project$PagesComponents$Projects$Id_$Models$ToastAdd,
		$elm$core$Maybe$Just(8000),
		{n: $author$project$Libs$Tailwind$green, D: 43, bg: '', aj: message});
};
var $author$project$Ports$TrackError = F2(
	function (a, b) {
		return {$: 20, a: a, b: b};
	});
var $author$project$Ports$trackJsonError = F2(
	function (name, error) {
		return $author$project$Ports$messageToJs(
			A2(
				$author$project$Ports$TrackError,
				name,
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'message',
							$elm$json$Json$Encode$string(
								$elm$json$Json$Decode$errorToString(error)))
						]))));
	});
var $author$project$Services$Lenses$setConf = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.B;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{B: value});
		}));
var $author$project$Services$Lenses$mapConf = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.B;
	},
	$author$project$Services$Lenses$setConf);
var $author$project$Services$Lenses$setScreen = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.i6;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{i6: value});
		}));
var $author$project$Services$Lenses$mapScreen = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.i6;
	},
	$author$project$Services$Lenses$setScreen);
var $author$project$Services$Lenses$setSize = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.l;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{l: value});
		}));
var $author$project$Services$Lenses$setTop = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.aD;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{aD: value});
		}));
var $author$project$Services$Lenses$mapTop = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.aD;
	},
	$author$project$Services$Lenses$setTop);
var $author$project$PagesComponents$Projects$Id_$Updates$isSameTopRight = F2(
	function (a, b) {
		return _Utils_eq(a.iG.aD, b.iG.aD) && _Utils_eq(a.iG.at + a.l.aF, b.iG.at + b.l.aF);
	});
var $author$project$Conf$ui = {gR: 300, iv: 200, jp: 24, jq: 45};
var $author$project$PagesComponents$Projects$Id_$Updates$moveDownIfExists = F3(
	function (allProps, size, position) {
		return A2(
			$elm$core$List$any,
			function (p) {
				return _Utils_eq(p.iG, position) || A2(
					$author$project$PagesComponents$Projects$Id_$Updates$isSameTopRight,
					p,
					A2($author$project$Libs$Area$Area, position, size));
			},
			allProps) ? A3(
			$author$project$PagesComponents$Projects$Id_$Updates$moveDownIfExists,
			allProps,
			size,
			A2(
				$author$project$Libs$Models$Position$add,
				{at: 0, aD: $author$project$Conf$ui.jq},
				position)) : position;
	});
var $author$project$PagesComponents$Projects$Id_$Updates$computeInitialPosition = F4(
	function (allProps, viewport, change, hint) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (h) {
				if (!h.$) {
					var position = h.a;
					return A3(
						$author$project$PagesComponents$Projects$Id_$Updates$moveDownIfExists,
						$elm$core$Dict$values(allProps),
						change.l,
						A2(
							$author$project$Libs$Models$Position$sub,
							{at: change.l.aF + 50, aD: 0},
							position));
				} else {
					var position = h.a;
					var size = h.b;
					return A3(
						$author$project$PagesComponents$Projects$Id_$Updates$moveDownIfExists,
						$elm$core$Dict$values(allProps),
						change.l,
						A2(
							$author$project$Libs$Models$Position$add,
							{at: size.aF + 50, aD: 0},
							position));
				}
			},
			$elm$core$Dict$isEmpty(
				A2(
					$elm$core$Dict$filter,
					F2(
						function (_v1, p) {
							return !_Utils_eq(p.l, $author$project$Libs$Models$Size$zero);
						}),
					allProps)) ? A2(
				$author$project$Services$Lenses$mapTop,
				$elm$core$Basics$max(viewport.iG.aD),
				A2(
					$author$project$Libs$Models$Position$sub,
					$author$project$Libs$Area$center(change),
					$author$project$Libs$Area$center(viewport))) : {
				at: viewport.iG.at + (change.i8.at * A2($elm$core$Basics$max, 0, viewport.l.aF - change.l.aF)),
				aD: viewport.iG.aD + (change.i8.aD * A2($elm$core$Basics$max, 0, viewport.l.ap - change.l.ap))
			},
			hint);
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setSize = F2(
	function (size, props) {
		return _Utils_eq(props.l, size) ? props : _Utils_update(
			props,
			{
				gS: A2(
					$elm$core$Dict$map,
					F2(
						function (_v0, p) {
							return _Utils_update(
								p,
								{l: size});
						}),
					props.gS),
				l: size
			});
	});
var $author$project$PagesComponents$Projects$Id_$Updates$updateTable = F4(
	function (allProps, viewport, change, props) {
		return (_Utils_eq(props.l, $author$project$Libs$Models$Size$zero) && _Utils_eq(props.iG, $author$project$Libs$Models$Position$zero)) ? A2(
			$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setPosition,
			A4($author$project$PagesComponents$Projects$Id_$Updates$computeInitialPosition, allProps, viewport, change, props.fP),
			A2($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setSize, change.l, props)) : A2($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setSize, change.l, props);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$updateSize = F2(
	function (change, model) {
		return _Utils_eq(change.t, $author$project$Conf$ids.ha) ? A2(
			$author$project$Services$Lenses$mapScreen,
			A2(
				$elm$core$Basics$composeR,
				$author$project$Services$Lenses$setPosition(change.iG),
				$author$project$Services$Lenses$setSize(change.l)),
			model) : function (_v0) {
			var tableId = _v0.a;
			var viewport = _v0.b;
			return A2(
				$author$project$Services$Lenses$mapErdM,
				$author$project$Services$Lenses$mapTableProps(
					function (props) {
						return A3(
							$author$project$Libs$Dict$alter,
							tableId,
							A3($author$project$PagesComponents$Projects$Id_$Updates$updateTable, props, viewport, change),
							props);
					}),
				model);
		}(
			_Utils_Tuple2(
				$author$project$Models$Project$TableId$fromHtmlId(change.t),
				A3(
					$author$project$Libs$Maybe$mapOrElse,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.dt;
						},
						$author$project$Models$Project$CanvasProps$viewport(model.i6)),
					$author$project$Libs$Area$zero,
					model.ha)));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$updateSizes = F2(
	function (changes, model) {
		var modelWithSizes = A3(
			$elm$core$List$foldl,
			$author$project$PagesComponents$Projects$Id_$Updates$updateSize,
			model,
			A2(
				$elm$core$List$sortBy,
				function (c) {
					return A3(
						$author$project$Libs$Bool$cond,
						_Utils_eq(c.t, $author$project$Conf$ids.ha),
						0,
						1);
				},
				changes));
		return model.B.dH ? _Utils_Tuple2(
			A2(
				$author$project$Services$Lenses$mapConf,
				function (c) {
					return _Utils_update(
						c,
						{dH: false});
				},
				modelWithSizes),
			$author$project$Libs$Task$send($author$project$PagesComponents$Projects$Id_$Models$FitContent)) : _Utils_Tuple2(modelWithSizes, $elm$core$Platform$Cmd$none);
	});
var $author$project$Models$Project$Source$user = F4(
	function (id, tables, relations, now) {
		return {bI: $elm$core$Array$empty, e1: now, e6: true, fb: $elm$core$Maybe$Nothing, t: id, S: $author$project$Models$Project$SourceKind$UserDefined, cW: 'User', iU: relations, jr: tables, gj: now};
	});
var $author$project$PagesComponents$Projects$Id_$Updates$handleJsMessage = F4(
	function (currentProject, currentLayout, msg, model) {
		switch (msg.$) {
			case 0:
				var sizes = msg.a;
				return A2($author$project$PagesComponents$Projects$Id_$Updates$updateSizes, sizes, model);
			case 1:
				var _v1 = msg.a;
				var errors = _v1.a;
				var projects = _v1.b;
				var project = A2(
					$elm$core$Maybe$map,
					function (p) {
						return A3(
							$author$project$Libs$Maybe$mapOrElse,
							function (l) {
								return _Utils_update(
									p,
									{
										as: A3($author$project$Libs$Dict$getOrElse, l, p.as, p.d_),
										eO: $elm$core$Maybe$Just(l)
									});
							},
							p,
							currentLayout);
					},
					A3(
						$author$project$Libs$Maybe$mapOrElse,
						function (id) {
							return A2(
								$author$project$Libs$List$find,
								function (p) {
									return _Utils_eq(p.t, id);
								},
								projects);
						},
						$elm$core$List$head(projects),
						currentProject));
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							ha: A2(
								$author$project$Libs$Maybe$orElse,
								A2(
									$elm$core$Maybe$map,
									$author$project$PagesComponents$Projects$Id_$Models$Erd$create(projects),
									project),
								model.ha),
							hL: true
						}),
					$elm$core$Platform$Cmd$batch(
						_Utils_ap(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (_v2) {
									return _List_Nil;
								},
								_List_fromArray(
									[
										$author$project$Ports$observeSize($author$project$Conf$ids.ha),
										$author$project$Ports$observeTablesSize(
										A2(
											$elm$core$List$map,
											function ($) {
												return $.t;
											},
											A3(
												$author$project$Libs$Maybe$mapOrElse,
												A2(
													$elm$core$Basics$composeR,
													function ($) {
														return $.as;
													},
													function ($) {
														return $.jr;
													}),
												_List_Nil,
												project)))
									]),
								model.ha),
							A2(
								$elm$core$List$concatMap,
								function (_v3) {
									var name = _v3.a;
									var err = _v3.b;
									return _List_fromArray(
										[
											$author$project$Libs$Task$send(
											$author$project$PagesComponents$Projects$Id_$Models$toastError(
												'Unable to read project ' + (name + (': ' + $author$project$Libs$Json$Decode$errorToHtml(err))))),
											A2($author$project$Ports$trackJsonError, 'decode-project', err)
										]);
								},
								errors))));
			case 2:
				var now = msg.a;
				var projectId = msg.b;
				var sourceId = msg.c;
				var file = msg.d;
				var content = msg.e;
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
							$author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg(
								A5($author$project$Services$SqlSourceUpload$gotLocalFile, now, projectId, sourceId, file, content)))));
			case 3:
				var now = msg.a;
				var projectId = msg.b;
				var sourceId = msg.c;
				var url = msg.d;
				var content = msg.e;
				var sample = msg.f;
				return _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
							$author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg(
								A6($author$project$Services$SqlSourceUpload$gotRemoteFile, now, projectId, sourceId, url, content, sample)))));
			case 4:
				var now = msg.a;
				var sourceId = msg.b;
				var src = msg.c;
				var ref = msg.d;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSources(
							function (sources) {
								return _Utils_ap(
									sources,
									_List_fromArray(
										[
											A4($author$project$Models$Project$Source$user, sourceId, $elm$core$Dict$empty, _List_Nil, now)
										]));
							}),
						model),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Created a user source to add the relation.')),
								$author$project$Libs$Task$send(
								A2($author$project$PagesComponents$Projects$Id_$Models$CreateRelation, src, ref))
							])));
			case 5:
				var hotkey = msg.a;
				return A2($author$project$PagesComponents$Projects$Id_$Updates$Hotkey$handleHotkey, model, hotkey);
			case 6:
				var key = msg.a;
				var start = msg.b;
				return ((key === 'Space') && model.B.fC) ? (start ? _Utils_Tuple2(
					A2($author$project$Services$Lenses$setCursorMode, 0, model),
					$elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					A2($author$project$Services$Lenses$setCursorMode, 1, model),
					$elm$core$Platform$Cmd$none)) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 7:
				var level = msg.a;
				var message = msg.b;
				switch (level) {
					case 'success':
						return _Utils_Tuple2(
							model,
							$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastSuccess(message)));
					case 'info':
						return _Utils_Tuple2(
							model,
							$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastInfo(message)));
					case 'warning':
						return _Utils_Tuple2(
							model,
							$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastWarning(message)));
					default:
						return _Utils_Tuple2(
							model,
							$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastError(message)));
				}
			default:
				var err = msg.a;
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastError(
									'Unable to decode JavaScript message: ' + $author$project$Libs$Json$Decode$errorToHtml(err))),
								A2($author$project$Ports$trackJsonError, 'js-message', err)
							])));
		}
	});
var $author$project$Track$layoutEvent = F2(
	function (eventName, layout) {
		return {
			g6: _List_fromArray(
				[
					_Utils_Tuple2(
					'table-count',
					$elm$core$String$fromInt(
						$elm$core$List$length(layout.jr)))
				]),
			e6: true,
			cW: eventName + '-layout'
		};
	});
var $author$project$Track$createLayout = $author$project$Track$layoutEvent('create');
var $author$project$Services$Lenses$setLayouts = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.d_;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{d_: value});
		}));
var $author$project$Services$Lenses$mapLayouts = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.d_;
	},
	$author$project$Services$Lenses$setLayouts);
var $author$project$Services$Lenses$setUsedLayout = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.eO;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{eO: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$unpack = function (props) {
	return {n: props.n, W: props.bq, X: props.aC, t: props.t, iG: props.iG, bp: props.bp, l: props.l};
};
var $author$project$PagesComponents$Projects$Id_$Models$Erd$unpackLayout = F5(
	function (canvas, tableProps, shownTables, createdAt, updatedAt) {
		var _v0 = A2(
			$elm$core$List$partition,
			function (id) {
				return A2($elm$core$List$member, id, shownTables);
			},
			$elm$core$Dict$keys(tableProps));
		var tables = _v0.a;
		var hiddenTables = _v0.b;
		return {
			dt: canvas,
			e1: createdAt,
			dT: A2(
				$elm$core$List$filterMap,
				function (id) {
					return A2(
						$elm$core$Maybe$map,
						$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$unpack,
						A2($elm$core$Dict$get, id, tableProps));
				},
				hiddenTables),
			jr: A2(
				$elm$core$List$filterMap,
				function (id) {
					return A2(
						$elm$core$Maybe$map,
						$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$unpack,
						A2($elm$core$Dict$get, id, tableProps));
				},
				tables),
			gj: updatedAt
		};
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Layout$createLayout = F3(
	function (name, now, erd) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (_v0) {
				return _Utils_Tuple2(
					erd,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastError('Layout ' + (name + ' already exists')))
							])));
			},
			function () {
				var layout = A5($author$project$PagesComponents$Projects$Id_$Models$Erd$unpackLayout, erd.dt, erd.bu, erd.ca, now, now);
				return function (newErd) {
					return _Utils_Tuple2(
						newErd,
						$author$project$Ports$track(
							$author$project$Track$createLayout(layout)));
				}(
					A2(
						$author$project$Services$Lenses$mapLayouts,
						A2($elm$core$Dict$insert, name, layout),
						A2(
							$author$project$Services$Lenses$setUsedLayout,
							$elm$core$Maybe$Just(name),
							erd)));
			}(),
			A2(
				$elm$core$Maybe$andThen,
				function (l) {
					return A2($elm$core$Dict$get, l, erd.d_);
				},
				erd.eO));
	});
var $author$project$Track$deleteLayout = $author$project$Track$layoutEvent('delete');
var $author$project$Services$Lenses$mapUsedLayout = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.eO;
	},
	$author$project$Services$Lenses$setUsedLayout);
var $author$project$PagesComponents$Projects$Id_$Updates$Layout$deleteLayout = F2(
	function (name, erd) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (l) {
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapLayouts,
						$elm$core$Dict$remove(name),
						A2(
							$author$project$Services$Lenses$mapUsedLayout,
							$author$project$Libs$Maybe$filter(
								function (n) {
									return !_Utils_eq(n, name);
								}),
							erd)),
					$author$project$Ports$track(
						$author$project$Track$deleteLayout(l)));
			},
			_Utils_Tuple2(erd, $elm$core$Platform$Cmd$none),
			A2($elm$core$Dict$get, name, erd.d_));
	});
var $author$project$Track$loadLayout = $author$project$Track$layoutEvent('load');
var $author$project$Services$Lenses$setShownTables = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.ca;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{ca: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Updates$Layout$loadLayout = F2(
	function (name, erd) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (layout) {
				var _v0 = A2($author$project$PagesComponents$Projects$Id_$Models$Erd$createLayout, erd.en, layout);
				var canvas = _v0.a;
				var tableProps = _v0.b;
				var shownTables = _v0.c;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setShownTables,
						shownTables,
						A2(
							$author$project$Services$Lenses$setTableProps,
							tableProps,
							A2(
								$author$project$Services$Lenses$setCanvas,
								canvas,
								A2(
									$author$project$Services$Lenses$setUsedLayout,
									$elm$core$Maybe$Just(name),
									erd)))),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$observeTablesSize(shownTables),
								$author$project$Ports$track(
								$author$project$Track$loadLayout(layout))
							])));
			},
			_Utils_Tuple2(erd, $elm$core$Platform$Cmd$none),
			A2($elm$core$Dict$get, name, erd.d_));
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $author$project$Services$Lenses$mapMCmd = F4(
	function (get, update, transform, item) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			A2(
				$elm$core$Basics$composeR,
				transform,
				$elm$core$Tuple$mapFirst(
					function (value) {
						return A2(
							update,
							$elm$core$Maybe$Just(value),
							item);
					})),
			_Utils_Tuple2(item, $elm$core$Platform$Cmd$none),
			get(item));
	});
var $author$project$Services$Lenses$mapErdMCmd = A2(
	$author$project$Services$Lenses$mapMCmd,
	function ($) {
		return $.ha;
	},
	$author$project$Services$Lenses$setErd);
var $author$project$Services$Lenses$setNewLayout = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.h9;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{h9: value});
		}));
var $author$project$Services$Lenses$mapNewLayoutM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.h9;
	},
	$author$project$Services$Lenses$setNewLayout);
var $author$project$Track$openSaveLayout = {g6: _List_Nil, e6: true, cW: 'open-save-layout'};
var $author$project$Services$Lenses$setName = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.cW;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{cW: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Updates$Layout$unloadLayout = function (erd) {
	return A2($author$project$Services$Lenses$setUsedLayout, $elm$core$Maybe$Nothing, erd);
};
var $author$project$Track$notFoundLayout = function (_v0) {
	return {g6: _List_Nil, e6: true, cW: 'not-found-layout'};
};
var $author$project$Track$updateLayout = $author$project$Track$layoutEvent('update');
var $author$project$PagesComponents$Projects$Id_$Updates$Layout$updateLayout = F3(
	function (name, now, erd) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (layout) {
				var newLayout = A5($author$project$PagesComponents$Projects$Id_$Models$Erd$unpackLayout, erd.dt, erd.bu, erd.ca, layout.e1, now);
				return function (newErd) {
					return _Utils_Tuple2(
						newErd,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$Libs$Task$send(
									$author$project$PagesComponents$Projects$Id_$Models$toastSuccess('Saved to layout ' + name)),
									$author$project$Ports$track(
									$author$project$Track$updateLayout(newLayout))
								])));
				}(
					A2(
						$author$project$Services$Lenses$mapLayouts,
						A2($elm$core$Dict$insert, name, newLayout),
						A2(
							$author$project$Services$Lenses$setUsedLayout,
							$elm$core$Maybe$Just(name),
							erd)));
			},
			_Utils_Tuple2(
				erd,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$Libs$Task$send(
							$author$project$PagesComponents$Projects$Id_$Models$toastError('Can\'t find layout ' + name)),
							$author$project$Ports$track(
							$author$project$Track$notFoundLayout(name))
						]))),
			A2(
				$elm$core$Maybe$andThen,
				function (l) {
					return A2($elm$core$Dict$get, l, erd.d_);
				},
				erd.eO));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Layout$handleLayout = F3(
	function (now, msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setNewLayout,
						$elm$core$Maybe$Just(
							{t: $author$project$Conf$ids.ia, cW: ''}),
						model),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$Libs$Task$sendAfter,
								1,
								$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.ia)),
								$author$project$Ports$track($author$project$Track$openSaveLayout)
							])));
			case 1:
				var name = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapNewLayoutM,
						$author$project$Services$Lenses$setName(name),
						model),
					$elm$core$Platform$Cmd$none);
			case 2:
				var name = msg.a;
				return A2(
					$author$project$Services$Lenses$mapErdMCmd,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Layout$createLayout, name, now),
					A2($author$project$Services$Lenses$setNewLayout, $elm$core$Maybe$Nothing, model));
			case 3:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setNewLayout, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
			case 4:
				var name = msg.a;
				return A2(
					$author$project$Services$Lenses$mapErdMCmd,
					$author$project$PagesComponents$Projects$Id_$Updates$Layout$loadLayout(name),
					model);
			case 5:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$mapErdM, $author$project$PagesComponents$Projects$Id_$Updates$Layout$unloadLayout, model),
					$elm$core$Platform$Cmd$none);
			case 6:
				var name = msg.a;
				return A2(
					$author$project$Services$Lenses$mapErdMCmd,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Layout$updateLayout, name, now),
					model);
			default:
				var name = msg.a;
				return A2(
					$author$project$Services$Lenses$mapErdMCmd,
					$author$project$PagesComponents$Projects$Id_$Updates$Layout$deleteLayout(name),
					model);
		}
	});
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === -2) {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $author$project$Track$sourceEvent = F2(
	function (eventName, source) {
		return {
			g6: _List_fromArray(
				[
					_Utils_Tuple2(
					'table-count',
					$elm$core$String$fromInt(
						$elm$core$Dict$size(source.jr))),
					_Utils_Tuple2(
					'relation-count',
					$elm$core$String$fromInt(
						$elm$core$List$length(source.iU)))
				]),
			e6: true,
			cW: eventName + '-source'
		};
	});
var $author$project$Track$addSource = $author$project$Track$sourceEvent('add');
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setShownColumns = F2(
	function (shownColumns, props) {
		return _Utils_eq(props.bq, shownColumns) ? props : _Utils_update(
			props,
			{
				gS: A2(
					$elm$core$Dict$map,
					F2(
						function (c, p) {
							return A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (prev) {
									return A3(
										$author$project$Libs$Bool$cond,
										_Utils_eq(p, prev),
										prev,
										p);
								},
								p,
								A2($elm$core$Dict$get, c, props.gS));
						}),
					A6($author$project$PagesComponents$Projects$Id_$Models$ErdColumnProps$createAll, props.iG, props.l, props.n, props.bN, props.bp, shownColumns)),
				bq: shownColumns
			});
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShownColumns = F2(
	function (transform, props) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setShownColumns,
			transform(props.bq),
			props);
	});
var $author$project$Models$Project$ProjectSettings$hasProperty = function (c) {
	return c.bd || ($author$project$Libs$List$nonEmpty(c.a8) || ($author$project$Libs$List$nonEmpty(c.ay) || ($author$project$Libs$List$nonEmpty(c.bw) || ($author$project$Libs$List$nonEmpty(c.ba) || $author$project$Libs$List$nonEmpty(c.a$)))));
};
var $author$project$Models$Project$ProjectSettings$hasRelation = function (column) {
	return $author$project$Libs$List$nonEmpty(column.a8) || $author$project$Libs$List$nonEmpty(column.ay);
};
var $author$project$Models$Project$ProjectSettings$hideColumn = F2(
	function (hiddenColumns, column) {
		return A2($author$project$Models$Project$ProjectSettings$removeColumn, hiddenColumns.au, column.cW) || ((hiddenColumns.iU && (!$author$project$Models$Project$ProjectSettings$hasRelation(column))) || (hiddenColumns.aA && (!$author$project$Models$Project$ProjectSettings$hasProperty(column))));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$shouldHideColumns = F3(
	function (hiddenColumns, table, columns) {
		return A2(
			$elm$core$List$map,
			function ($) {
				return $.cW;
			},
			A2(
				$author$project$Libs$List$filterNot,
				$author$project$Models$Project$ProjectSettings$hideColumn(hiddenColumns),
				A2(
					$elm$core$List$filterMap,
					function (c) {
						return A2($author$project$Libs$Ned$get, c, table.W);
					},
					columns)));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$hideColumns = F3(
	function (tables, hiddenColumns, tableProps) {
		return A2(
			$elm$core$Dict$map,
			F2(
				function (tableId, props) {
					return A3(
						$author$project$Libs$Maybe$mapOrElse,
						function (table) {
							return A2(
								$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShownColumns,
								A2($author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$shouldHideColumns, hiddenColumns, table),
								props);
						},
						props,
						A2($elm$core$Dict$get, tableId, tables));
				}),
			tableProps);
	});
var $author$project$Services$SqlSourceUpload$init = F2(
	function (project, source) {
		return {hM: $elm$core$Maybe$Nothing, c0: $elm$core$Maybe$Nothing, ej: $elm$core$Maybe$Nothing, bm: project, da: $elm$core$Maybe$Nothing, f1: $elm$core$Maybe$Nothing, F: source};
	});
var $author$project$Services$Lenses$setColumnBasicTypes = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bG;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bG: value});
		}));
var $author$project$Services$Lenses$mapColumnBasicTypes = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.bG;
	},
	$author$project$Services$Lenses$setColumnBasicTypes);
var $author$project$Services$Lenses$setEnabled = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.e6;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{e6: value});
		}));
var $author$project$Services$Lenses$mapEnabled = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.e6;
	},
	$author$project$Services$Lenses$setEnabled);
var $author$project$Services$Lenses$setHiddenColumns = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.X;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{X: value});
		}));
var $author$project$Services$Lenses$mapHiddenColumns = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.X;
	},
	$author$project$Services$Lenses$setHiddenColumns);
var $author$project$Services$Lenses$mapCmd = F4(
	function (get, update, transform, item) {
		return A2(
			$elm$core$Tuple$mapFirst,
			function (value) {
				return A2(update, value, item);
			},
			transform(
				get(item)));
	});
var $author$project$Services$Lenses$setParsing = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iC;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iC: value});
		}));
var $author$project$Services$Lenses$mapParsingCmd = A2(
	$author$project$Services$Lenses$mapCmd,
	function ($) {
		return $.iC;
	},
	$author$project$Services$Lenses$setParsing);
var $author$project$Services$Lenses$setProps = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.aA;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{aA: value});
		}));
var $author$project$Services$Lenses$mapProps = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.aA;
	},
	$author$project$Services$Lenses$setProps);
var $author$project$Services$Lenses$setRemoveViews = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iV;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iV: value});
		}));
var $author$project$Services$Lenses$mapRemoveViews = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.iV;
	},
	$author$project$Services$Lenses$setRemoveViews);
var $author$project$Services$Lenses$setRemovedSchemas = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iW;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iW: value});
		}));
var $author$project$Services$Lenses$mapRemovedSchemas = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.iW;
	},
	$author$project$Services$Lenses$setRemovedSchemas);
var $author$project$PagesComponents$Projects$Id_$Models$Erd$setSettings = F2(
	function (settings, erd) {
		return _Utils_eq(erd.dc, settings) ? erd : $author$project$PagesComponents$Projects$Id_$Models$Erd$computeSchema(
			_Utils_update(
				erd,
				{dc: settings}));
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings = F2(
	function (transform, erd) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$Erd$setSettings,
			transform(erd.dc),
			erd);
	});
var $author$project$Services$Lenses$setSourceUpload = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.jj;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{jj: value});
		}));
var $author$project$Services$Lenses$mapSourceUploadMCmd = A2(
	$author$project$Services$Lenses$mapMCmd,
	function ($) {
		return $.jj;
	},
	$author$project$Services$Lenses$setSourceUpload);
var $author$project$Track$openSettings = {g6: _List_Nil, e6: true, cW: 'open-settings'};
var $author$project$Track$refreshSource = $author$project$Track$sourceEvent('refresh');
var $author$project$Models$Project$SourceKind$same = F2(
	function (k2, k1) {
		var _v0 = _Utils_Tuple2(k1, k2);
		_v0$3:
		while (true) {
			switch (_v0.a.$) {
				case 0:
					if (!_v0.b.$) {
						var _v1 = _v0.a;
						var _v2 = _v0.b;
						return true;
					} else {
						break _v0$3;
					}
				case 1:
					if (_v0.b.$ === 1) {
						var _v3 = _v0.a;
						var _v4 = _v0.b;
						return true;
					} else {
						break _v0$3;
					}
				default:
					if (_v0.b.$ === 2) {
						var _v5 = _v0.a;
						var _v6 = _v0.b;
						return true;
					} else {
						break _v0$3;
					}
			}
		}
		return false;
	});
var $author$project$Models$Project$Source$refreshWith = F2(
	function (_new, current) {
		return (_Utils_eq(_new.t, current.t) && A2($author$project$Models$Project$SourceKind$same, current.S, _new.S)) ? _Utils_update(
			current,
			{bI: _new.bI, S: _new.S, iU: _new.iU, jr: _new.jr, gj: _new.gj}) : current;
	});
var $author$project$Services$Lenses$setColumnOrder = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bH;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bH: value});
		}));
var $author$project$Services$Lenses$setList = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.au;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{au: value});
		}));
var $author$project$Services$Lenses$setRemovedTables = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iX;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iX: value});
		}));
var $author$project$Models$Project$Table$inIndexes = F2(
	function (table, column) {
		return A2(
			$elm$core$List$filter,
			function (i) {
				return A2(
					$author$project$Models$Project$Table$hasColumn,
					column,
					$author$project$Libs$Nel$toList(i.W));
			},
			table.ba);
	});
var $author$project$Models$Project$Relation$inOutRelation = F2(
	function (tableOutRelations, column) {
		return A2(
			$elm$core$List$filter,
			function (r) {
				return _Utils_eq(r.de.r, column);
			},
			tableOutRelations);
	});
var $author$project$Models$Project$Table$inUniques = F2(
	function (table, column) {
		return A2(
			$elm$core$List$filter,
			function (u) {
				return A2(
					$author$project$Models$Project$Table$hasColumn,
					column,
					$author$project$Libs$Nel$toList(u.W));
			},
			table.bw);
	});
var $author$project$Models$ColumnOrder$sortOffset = function (b) {
	return b ? 0.5 : 0;
};
var $elm$core$String$toLower = _String_toLower;
var $author$project$Models$Project$Column$withNullable = F2(
	function (column, text) {
		return column.av ? (text + '?') : text;
	});
var $author$project$Models$Project$Relation$withTableSrc = F2(
	function (table, relations) {
		return A2(
			$elm$core$List$filter,
			function (r) {
				return _Utils_eq(r.de.G, table);
			},
			relations);
	});
var $author$project$Models$ColumnOrder$sortBy = F4(
	function (order, table, relations, columns) {
		var tableRelations = A2($author$project$Models$Project$Relation$withTableSrc, table.t, relations);
		switch (order) {
			case 0:
				return A2(
					$elm$core$List$sortBy,
					function ($) {
						return $.a9;
					},
					columns);
			case 1:
				return A2(
					$elm$core$List$sortBy,
					function (c) {
						return $author$project$Libs$Maybe$isJust(
							A2($author$project$Models$Project$Table$inPrimaryKey, table, c.cW)) ? _Utils_Tuple2(
							0 + $author$project$Models$ColumnOrder$sortOffset(c.av),
							$elm$core$String$toLower(c.cW)) : ($author$project$Libs$List$nonEmpty(
							A2($author$project$Models$Project$Relation$inOutRelation, tableRelations, c.cW)) ? _Utils_Tuple2(
							1 + $author$project$Models$ColumnOrder$sortOffset(c.av),
							$elm$core$String$toLower(c.cW)) : ($author$project$Libs$List$nonEmpty(
							A2($author$project$Models$Project$Table$inUniques, table, c.cW)) ? _Utils_Tuple2(
							2 + $author$project$Models$ColumnOrder$sortOffset(c.av),
							$elm$core$String$toLower(c.cW)) : ($author$project$Libs$List$nonEmpty(
							A2($author$project$Models$Project$Table$inIndexes, table, c.cW)) ? _Utils_Tuple2(
							3 + $author$project$Models$ColumnOrder$sortOffset(c.av),
							$elm$core$String$toLower(c.cW)) : _Utils_Tuple2(
							4 + $author$project$Models$ColumnOrder$sortOffset(c.av),
							$elm$core$String$toLower(c.cW)))));
					},
					columns);
			case 2:
				return A2(
					$elm$core$List$sortBy,
					function (c) {
						return $elm$core$String$toLower(c.cW);
					},
					columns);
			default:
				return A2(
					$elm$core$List$sortBy,
					function (c) {
						return A2(
							$author$project$Models$Project$Column$withNullable,
							c,
							$elm$core$String$toLower(c.S));
					},
					columns);
		}
	});
var $author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$sortColumns = F3(
	function (order, erd, tableProps) {
		return A2(
			$elm$core$Dict$map,
			function (id) {
				return $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShownColumns(
					function (columnNames) {
						return A3(
							$author$project$Libs$Maybe$mapOrElse,
							function (table) {
								return A2(
									$elm$core$List$map,
									function ($) {
										return $.cW;
									},
									A4(
										$author$project$Models$ColumnOrder$sortBy,
										order,
										table,
										A2(
											$elm$core$List$filter,
											function (r) {
												return _Utils_eq(r.de.G, id);
											},
											erd.iU),
										A2(
											$elm$core$List$filterMap,
											function (c) {
												return A2($author$project$Libs$Ned$get, c, table.W);
											},
											columnNames)));
							},
							columnNames,
							A2($elm$core$Dict$get, id, erd.jr));
					});
			},
			tableProps);
	});
var $author$project$Libs$List$toggle = F2(
	function (item, list) {
		return A2($elm$core$List$member, item, list) ? A2(
			$elm$core$List$filter,
			function (i) {
				return !_Utils_eq(i, item);
			},
			list) : _Utils_ap(
			list,
			_List_fromArray(
				[item]));
	});
var $author$project$Services$SqlSourceUpload$BuildLines = 0;
var $author$project$Services$SqlSourceUpload$BuildSource = {$: 6};
var $author$project$Services$SqlSourceUpload$ParseMsg = function (a) {
	return {$: 4, a: a};
};
var $author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin = F2(
	function (source, item) {
		return {
			t: source,
			fy: $author$project$Libs$Nel$toList(
				A2(
					$author$project$Libs$Nel$map,
					function ($) {
						return $.hK;
					},
					item.F))
		};
	});
var $author$project$Libs$Nel$filterMap = F2(
	function (f, nel) {
		return A2(
			$elm$core$List$filterMap,
			f,
			$author$project$Libs$Nel$toList(nel));
	});
var $author$project$Libs$Nel$filterZip = F2(
	function (f, nel) {
		return A2(
			$author$project$Libs$Nel$filterMap,
			function (a) {
				return A2(
					$elm$core$Maybe$map,
					function (b) {
						return _Utils_Tuple2(a, b);
					},
					f(a));
			},
			nel);
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildRelations = F2(
	function (source, table) {
		return A2(
			$elm$core$List$map,
			function (_v0) {
				var c = _v0.a;
				var fk = _v0.b;
				return A4(
					$author$project$Models$Project$Relation$new,
					fk.cW,
					A2(
						$author$project$Models$Project$ColumnRef$ColumnRef,
						_Utils_Tuple2(table.E, table.G),
						c.cW),
					A2(
						$author$project$Models$Project$ColumnRef$ColumnRef,
						_Utils_Tuple2(fk.E, fk.G),
						fk.r),
					_List_fromArray(
						[
							A2($author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin, source, fk)
						]));
			},
			A2(
				$author$project$Libs$Nel$filterZip,
				function ($) {
					return $.a5;
				},
				table.W));
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildCheck = F2(
	function (source, check) {
		return {
			W: check.W,
			cW: check.cW,
			aS: _List_fromArray(
				[
					A2($author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin, source, check)
				]),
			em: check.em
		};
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildComment = F2(
	function (source, comment) {
		return {
			aS: _List_fromArray(
				[
					A2($author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin, source, comment)
				]),
			dh: comment.dh
		};
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildColumn = F3(
	function (source, index, column) {
		return {
			cz: A2(
				$elm$core$Maybe$map,
				$author$project$DataSources$SqlParser$ProjectAdapter$buildComment(source),
				column.cz),
			cD: column.cD,
			a9: index,
			S: column.S,
			cW: column.cW,
			av: column.av,
			aS: _List_fromArray(
				[
					{t: source, fy: _List_Nil}
				])
		};
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildIndex = F2(
	function (source, index) {
		return {
			W: index.W,
			aH: index.aH,
			cW: index.cW,
			aS: _List_fromArray(
				[
					A2($author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin, source, index)
				])
		};
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildPrimaryKey = F2(
	function (source, pk) {
		return {
			W: pk.W,
			cW: pk.cW,
			aS: _List_fromArray(
				[
					A2($author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin, source, pk)
				])
		};
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildUnique = F2(
	function (source, unique) {
		return {
			W: unique.W,
			aH: unique.aH,
			cW: unique.cW,
			aS: _List_fromArray(
				[
					A2($author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin, source, unique)
				])
		};
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildTable = F2(
	function (source, table) {
		return {
			a$: A2(
				$elm$core$List$map,
				$author$project$DataSources$SqlParser$ProjectAdapter$buildCheck(source),
				table.a$),
			W: A2(
				$author$project$Libs$Ned$fromNelMap,
				function ($) {
					return $.cW;
				},
				A2(
					$author$project$Libs$Nel$indexedMap,
					$author$project$DataSources$SqlParser$ProjectAdapter$buildColumn(source),
					table.W)),
			cz: A2(
				$elm$core$Maybe$map,
				$author$project$DataSources$SqlParser$ProjectAdapter$buildComment(source),
				table.cz),
			t: _Utils_Tuple2(table.E, table.G),
			ba: A2(
				$elm$core$List$map,
				$author$project$DataSources$SqlParser$ProjectAdapter$buildIndex(source),
				table.ba),
			cW: table.G,
			aS: _List_fromArray(
				[
					A2($author$project$DataSources$SqlParser$ProjectAdapter$buildOrigin, source, table)
				]),
			aT: A2(
				$elm$core$Maybe$map,
				$author$project$DataSources$SqlParser$ProjectAdapter$buildPrimaryKey(source),
				table.aT),
			E: table.E,
			bw: A2(
				$elm$core$List$map,
				$author$project$DataSources$SqlParser$ProjectAdapter$buildUnique(source),
				table.bw),
			eQ: table.eQ
		};
	});
var $author$project$DataSources$SqlParser$ProjectAdapter$buildSourceFromSql = F3(
	function (sourceInfo, lines, schema) {
		return {
			bI: $elm$core$Array$fromList(lines),
			e1: sourceInfo.e1,
			e6: sourceInfo.e6,
			fb: sourceInfo.fb,
			t: sourceInfo.t,
			S: sourceInfo.S,
			cW: sourceInfo.cW,
			iU: A2(
				$elm$core$List$concatMap,
				$author$project$DataSources$SqlParser$ProjectAdapter$buildRelations(sourceInfo.t),
				$elm$core$Dict$values(schema)),
			jr: A2(
				$author$project$Libs$Dict$fromListMap,
				function ($) {
					return $.t;
				},
				A2(
					$elm$core$List$map,
					$author$project$DataSources$SqlParser$ProjectAdapter$buildTable(sourceInfo.t),
					$elm$core$Dict$values(schema))),
			gj: sourceInfo.gj
		};
	});
var $author$project$Services$Lenses$setParsedSchema = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.c0;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{c0: value});
		}));
var $author$project$Services$Lenses$mapParsedSchemaM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.c0;
	},
	$author$project$Services$Lenses$setParsedSchema);
var $author$project$Services$Lenses$setShow = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.jf;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{jf: value});
		}));
var $author$project$Services$Lenses$mapShow = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.jf;
	},
	$author$project$Services$Lenses$setShow);
var $author$project$Libs$Dict$count = F2(
	function (predicate, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, cpt) {
					return A2(predicate, k, v) ? (cpt + 1) : cpt;
				}),
			0,
			dict);
	});
var $author$project$Libs$Result$isErr = function (result) {
	if (!result.$) {
		return false;
	} else {
		return true;
	}
};
var $author$project$Track$parseSQLEvent = F2(
	function (parser, source) {
		return {
			g6: _List_fromArray(
				[
					_Utils_Tuple2(
					'lines-count',
					$elm$core$String$fromInt(
						A3($author$project$Libs$Maybe$mapOrElse, $elm$core$List$length, 0, parser.fy))),
					_Utils_Tuple2(
					'statements-count',
					$elm$core$String$fromInt(
						A3($author$project$Libs$Maybe$mapOrElse, $elm$core$Dict$size, 0, parser.bs))),
					_Utils_Tuple2(
					'table-count',
					$elm$core$String$fromInt(
						$elm$core$Dict$size(source.jr))),
					_Utils_Tuple2(
					'relation-count',
					$elm$core$String$fromInt(
						$elm$core$List$length(source.iU))),
					_Utils_Tuple2(
					'parsing-errors',
					$elm$core$String$fromInt(
						A3(
							$author$project$Libs$Maybe$mapOrElse,
							$author$project$Libs$Dict$count(
								F2(
									function (_v0, _v1) {
										var r = _v1.b;
										return $author$project$Libs$Result$isErr(r);
									})),
							0,
							parser.an))),
					_Utils_Tuple2(
					'schema-errors',
					$elm$core$String$fromInt(
						$elm$core$List$length(parser.aB)))
				]),
			e6: true,
			cW: 'parse' + (A3(
				$author$project$Libs$Maybe$mapOrElse,
				function (_v2) {
					return '-sample';
				},
				'',
				source.fb) + '-sql-source')
		};
	});
var $author$project$Track$parsedSource = $author$project$Track$parseSQLEvent;
var $author$project$Services$SqlSourceUpload$parsingInit = F3(
	function (fileContent, buildMsg, buildProject) {
		return {U: buildMsg, ds: buildProject, an: $elm$core$Maybe$Nothing, bJ: 0, cJ: fileContent, fy: $elm$core$Maybe$Nothing, E: $elm$core$Maybe$Nothing, aB: _List_Nil, ag: 0, jf: '', bs: $elm$core$Maybe$Nothing};
	});
var $author$project$Services$SqlSourceUpload$BuildCommand = 2;
var $author$project$Services$SqlSourceUpload$BuildStatements = 1;
var $author$project$Services$SqlSourceUpload$EvolveSchema = 3;
var $author$project$DataSources$SqlParser$FileParser$SqlCheck = F4(
	function (name, columns, predicate, source) {
		return {W: columns, cW: name, em: predicate, F: source};
	});
var $author$project$DataSources$SqlParser$FileParser$SqlComment = F2(
	function (text, source) {
		return {F: source, dh: text};
	});
var $author$project$DataSources$SqlParser$FileParser$SqlIndex = F4(
	function (name, columns, definition, source) {
		return {W: columns, aH: definition, cW: name, F: source};
	});
var $author$project$DataSources$SqlParser$FileParser$SqlPrimaryKey = F3(
	function (name, columns, source) {
		return {W: columns, cW: name, F: source};
	});
var $author$project$DataSources$SqlParser$FileParser$SqlUnique = F4(
	function (name, columns, definition, source) {
		return {W: columns, aH: definition, cW: name, F: source};
	});
var $author$project$DataSources$SqlParser$Utils$Helpers$defaultFkName = F2(
	function (table, column) {
		return table + ('_' + (column + '_fk_az'));
	});
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $author$project$DataSources$SqlParser$FileParser$defaultSchema = 'public';
var $author$project$DataSources$SqlParser$FileParser$withDefaultSchema = function (schema) {
	return A2($elm$core$Maybe$withDefault, $author$project$DataSources$SqlParser$FileParser$defaultSchema, schema);
};
var $author$project$DataSources$SqlParser$FileParser$buildId = F2(
	function (schema, table) {
		return $author$project$DataSources$SqlParser$FileParser$withDefaultSchema(schema) + ('.' + table);
	});
var $author$project$DataSources$SqlParser$FileParser$withPkColumn = F4(
	function (tables, schema, table, name) {
		if (!name.$) {
			var n = name.a;
			return $elm$core$Result$Ok(n);
		} else {
			return A3(
				$author$project$Libs$Maybe$mapOrElse,
				function (t) {
					var _v1 = A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.W;
						},
						t.aT);
					if (!_v1.$) {
						var cols = _v1.a;
						return $elm$core$List$isEmpty(cols.gc) ? $elm$core$Result$Ok(cols.cK) : $elm$core$Result$Err(
							'Table ' + (A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table) + (' has a primary key with more than one column (' + (A2(
								$elm$core$String$join,
								', ',
								$author$project$Libs$Nel$toList(cols)) + ')'))));
					} else {
						return $elm$core$Result$Err(
							'No primary key on table ' + A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table));
					}
				},
				$elm$core$Result$Err(
					'Table ' + (A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table) + ' does not exist (yet)')),
				A2(
					$elm$core$Dict$get,
					A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table),
					tables));
		}
	});
var $author$project$DataSources$SqlParser$FileParser$buildFk = F8(
	function (tables, statement, srcTable, srcColumn, constraint, schema, table, column) {
		return A2(
			$elm$core$Result$map,
			function (col) {
				return {
					r: col,
					cW: A2(
						$elm$core$Maybe$withDefault,
						A2($author$project$DataSources$SqlParser$Utils$Helpers$defaultFkName, srcTable, srcColumn),
						constraint),
					E: $author$project$DataSources$SqlParser$FileParser$withDefaultSchema(schema),
					F: statement,
					G: table
				};
			},
			A4($author$project$DataSources$SqlParser$FileParser$withPkColumn, tables, schema, table, column));
	});
var $author$project$Libs$Maybe$resultSeq = function (maybe) {
	if (!maybe.$) {
		var r = maybe.a;
		return A2(
			$elm$core$Result$map,
			function (a) {
				return $elm$core$Maybe$Just(a);
			},
			r);
	} else {
		return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
	}
};
var $author$project$DataSources$SqlParser$FileParser$buildColumn = F4(
	function (tables, statement, table, column) {
		return A2(
			$elm$core$Result$map,
			function (fk) {
				return {cz: $elm$core$Maybe$Nothing, cD: column.cD, a5: fk, S: column.S, cW: column.cW, av: column.av, F: statement};
			},
			$author$project$Libs$Maybe$resultSeq(
				A2(
					$elm$core$Maybe$map,
					function (_v0) {
						var fk = _v0.a;
						var ref = _v0.b;
						return A8($author$project$DataSources$SqlParser$FileParser$buildFk, tables, statement, table.G, column.cW, fk, ref.E, ref.G, ref.r);
					},
					A2(
						$author$project$Libs$Maybe$orElse,
						A2(
							$elm$core$Maybe$map,
							function (fk) {
								return _Utils_Tuple2(fk.cW, fk.fW);
							},
							$elm$core$List$head(
								A2(
									$elm$core$List$filter,
									function (fk) {
										return _Utils_eq(fk.de, column.cW);
									},
									table.hj))),
						column.a5))));
	});
var $author$project$DataSources$SqlParser$Utils$Helpers$defaultCheckName = F2(
	function (table, column) {
		return table + ('_' + (column + '_check_az'));
	});
var $author$project$DataSources$SqlParser$Utils$Helpers$defaultPkName = function (table) {
	return table + '_pk_az';
};
var $author$project$Libs$List$resultSeq = function (list) {
	var _v0 = $author$project$Libs$List$resultCollect(list);
	if (!_v0.a.b) {
		var res = _v0.b;
		return $elm$core$Result$Ok(res);
	} else {
		var errs = _v0.a;
		return $elm$core$Result$Err(errs);
	}
};
var $author$project$DataSources$SqlParser$FileParser$buildTable = F3(
	function (tables, statement, table) {
		return A2(
			$elm$core$Result$map,
			function (columns) {
				return {
					a$: _Utils_ap(
						A2(
							$elm$core$List$map,
							function (i) {
								return A4($author$project$DataSources$SqlParser$FileParser$SqlCheck, i.cW, i.W, i.em, statement);
							},
							table.a$),
						A2(
							$elm$core$List$filterMap,
							function (c) {
								return A2(
									$elm$core$Maybe$map,
									function (p) {
										return A4(
											$author$project$DataSources$SqlParser$FileParser$SqlCheck,
											A2($author$project$DataSources$SqlParser$Utils$Helpers$defaultCheckName, table.G, c.cW),
											_List_fromArray(
												[c.cW]),
											p,
											statement);
									},
									c.gO);
							},
							$author$project$Libs$Nel$toList(table.W))),
					W: columns,
					cz: $elm$core$Maybe$Nothing,
					ba: A2(
						$elm$core$List$map,
						function (i) {
							return A4($author$project$DataSources$SqlParser$FileParser$SqlIndex, i.cW, i.W, i.aH, statement);
						},
						table.ba),
					aT: A2(
						$author$project$Libs$Maybe$orElse,
						$elm$core$List$head(
							A2(
								$author$project$Libs$Nel$filterMap,
								function (c) {
									return A2(
										$elm$core$Maybe$map,
										function (pk) {
											return A3(
												$author$project$DataSources$SqlParser$FileParser$SqlPrimaryKey,
												pk,
												A2($author$project$Libs$Nel$Nel, c.cW, _List_Nil),
												statement);
										},
										c.aT);
								},
								table.W)),
						A2(
							$elm$core$Maybe$map,
							function (pk) {
								return A3(
									$author$project$DataSources$SqlParser$FileParser$SqlPrimaryKey,
									A2(
										$elm$core$Maybe$withDefault,
										$author$project$DataSources$SqlParser$Utils$Helpers$defaultPkName(table.G),
										pk.cW),
									pk.W,
									statement);
							},
							table.aT)),
					E: $author$project$DataSources$SqlParser$FileParser$withDefaultSchema(table.E),
					F: statement,
					G: table.G,
					bw: A2(
						$elm$core$List$map,
						function (i) {
							return A4($author$project$DataSources$SqlParser$FileParser$SqlUnique, i.cW, i.W, i.aH, statement);
						},
						table.bw),
					eQ: false
				};
			},
			A2(
				$elm$core$Result$andThen,
				function (cols) {
					return A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							[
								'No valid column for table ' + A2($author$project$DataSources$SqlParser$FileParser$buildId, table.E, table.G)
							]),
						$author$project$Libs$Nel$fromList(cols));
				},
				$author$project$Libs$List$resultSeq(
					A2(
						$elm$core$List$map,
						A3($author$project$DataSources$SqlParser$FileParser$buildColumn, tables, statement, table),
						$author$project$Libs$Nel$toList(table.W)))));
	});
var $author$project$Libs$Nel$find = F2(
	function (predicate, nel) {
		find:
		while (true) {
			if (predicate(nel.cK)) {
				return $elm$core$Maybe$Just(nel.cK);
			} else {
				var _v0 = nel.gc;
				if (!_v0.b) {
					return $elm$core$Maybe$Nothing;
				} else {
					var head = _v0.a;
					var tail = _v0.b;
					var $temp$predicate = predicate,
						$temp$nel = A2($author$project$Libs$Nel$Nel, head, tail);
					predicate = $temp$predicate;
					nel = $temp$nel;
					continue find;
				}
			}
		}
	});
var $author$project$DataSources$SqlParser$FileParser$buildViewColumn = F3(
	function (tables, statement, column) {
		if (!column.$) {
			var c = column.a;
			return A3(
				$author$project$Libs$Maybe$mapOrElse,
				function (col) {
					return _Utils_update(
						col,
						{
							cD: $elm$core$Maybe$Just(
								_Utils_ap(
									A3(
										$author$project$Libs$Maybe$mapOrElse,
										function (t) {
											return t + '.';
										},
										'',
										c.G),
									c.r)),
							cW: A2($elm$core$Maybe$withDefault, c.r, c.$7)
						});
				},
				{
					cz: $elm$core$Maybe$Nothing,
					cD: $elm$core$Maybe$Just(
						_Utils_ap(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function (t) {
									return t + '.';
								},
								'',
								c.G),
							c.r)),
					a5: $elm$core$Maybe$Nothing,
					S: 'unknown',
					cW: A2($elm$core$Maybe$withDefault, c.r, c.$7),
					av: false,
					F: statement
				},
				A2(
					$elm$core$Maybe$andThen,
					function (t) {
						return A2(
							$author$project$Libs$Nel$find,
							function (col) {
								return _Utils_eq(col.cW, c.r);
							},
							t.W);
					},
					A2(
						$elm$core$Maybe$andThen,
						function (t) {
							return A2(
								$elm$core$Dict$get,
								A2($author$project$DataSources$SqlParser$FileParser$buildId, $elm$core$Maybe$Nothing, t),
								tables);
						},
						c.G)));
		} else {
			var c = column.a;
			return {
				cz: $elm$core$Maybe$Nothing,
				cD: $elm$core$Maybe$Just(c.hk),
				a5: $elm$core$Maybe$Nothing,
				S: 'unknown',
				cW: c.$7,
				av: false,
				F: statement
			};
		}
	});
var $author$project$DataSources$SqlParser$FileParser$buildView = F3(
	function (tables, statement, view) {
		return {
			a$: _List_Nil,
			W: A2(
				$author$project$Libs$Nel$map,
				A2($author$project$DataSources$SqlParser$FileParser$buildViewColumn, tables, statement),
				view.c9.W),
			cz: $elm$core$Maybe$Nothing,
			ba: _List_Nil,
			aT: $elm$core$Maybe$Nothing,
			E: $author$project$DataSources$SqlParser$FileParser$withDefaultSchema(view.E),
			F: statement,
			G: view.G,
			bw: _List_Nil,
			eQ: true
		};
	});
var $author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql = function (statement) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			function ($) {
				return $.dh;
			},
			$author$project$Libs$Nel$toList(statement)));
};
var $author$project$DataSources$SqlParser$FileParser$updateTable = F4(
	function (statement, id, transform, tables) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			A2(
				$elm$core$Basics$composeR,
				transform,
				$elm$core$Result$map(
					function (newTable) {
						return A3($elm$core$Dict$insert, id, newTable, tables);
					})),
			$elm$core$Result$Err(
				_List_fromArray(
					[
						'Table ' + (id + (' does not exist (in \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\')')))
					])),
			A2($elm$core$Dict$get, id, tables));
	});
var $author$project$DataSources$SqlParser$FileParser$updateTableColumn = F3(
	function (column, transform, table) {
		return _Utils_update(
			table,
			{
				W: A2(
					$author$project$Libs$Nel$map,
					function (c) {
						return _Utils_eq(c.cW, column) ? transform(c) : c;
					},
					table.W)
			});
	});
var $author$project$DataSources$SqlParser$FileParser$updateColumn = F5(
	function (statement, id, name, transform, tables) {
		return A4(
			$author$project$DataSources$SqlParser$FileParser$updateTable,
			statement,
			id,
			function (table) {
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (column) {
						return A2(
							$elm$core$Result$map,
							function (newColumn) {
								return A3(
									$author$project$DataSources$SqlParser$FileParser$updateTableColumn,
									name,
									function (_v0) {
										return newColumn;
									},
									table);
							},
							transform(column));
					},
					$elm$core$Result$Err(
						_List_fromArray(
							[
								'Column \'' + (name + ('\' does not exist in table ' + (id + (' (in \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\')')))))
							])),
					A2(
						$author$project$Libs$Nel$find,
						function (column) {
							return _Utils_eq(column.cW, name);
						},
						table.W));
			},
			tables);
	});
var $author$project$DataSources$SqlParser$FileParser$evolve = F2(
	function (_v0, tables) {
		var statement = _v0.a;
		var command = _v0.b;
		switch (command.$) {
			case 0:
				var table = command.a;
				var id = A2($author$project$DataSources$SqlParser$FileParser$buildId, table.E, table.G);
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (_v2) {
						return $elm$core$Result$Err(
							_List_fromArray(
								['Table ' + (id + ' already exists')]));
					},
					A2(
						$elm$core$Result$map,
						function (sqlTable) {
							return A3($elm$core$Dict$insert, id, sqlTable, tables);
						},
						A3($author$project$DataSources$SqlParser$FileParser$buildTable, tables, statement, table)),
					A2($elm$core$Dict$get, id, tables));
			case 1:
				var view = command.a;
				var id = A2($author$project$DataSources$SqlParser$FileParser$buildId, view.E, view.G);
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (_v3) {
						return $elm$core$Result$Err(
							_List_fromArray(
								['View ' + (id + ' already exists')]));
					},
					$elm$core$Result$Ok(
						A3(
							$elm$core$Dict$insert,
							id,
							A3($author$project$DataSources$SqlParser$FileParser$buildView, tables, statement, view),
							tables)),
					A2($elm$core$Dict$get, id, tables));
			case 2:
				switch (command.a.$) {
					case 0:
						switch (command.a.c.$) {
							case 0:
								var _v4 = command.a;
								var schema = _v4.a;
								var table = _v4.b;
								var _v5 = _v4.c;
								var constraintName = _v5.a;
								var pk = _v5.b;
								return A4(
									$author$project$DataSources$SqlParser$FileParser$updateTable,
									statement,
									A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table),
									function (t) {
										return $elm$core$Result$Ok(
											_Utils_update(
												t,
												{
													aT: $elm$core$Maybe$Just(
														A3(
															$author$project$DataSources$SqlParser$FileParser$SqlPrimaryKey,
															A2(
																$elm$core$Maybe$withDefault,
																$author$project$DataSources$SqlParser$Utils$Helpers$defaultPkName(table),
																constraintName),
															pk,
															statement))
												}));
									},
									tables);
							case 1:
								var _v6 = command.a;
								var schema = _v6.a;
								var table = _v6.b;
								var _v7 = _v6.c;
								var constraint = _v7.a;
								var fk = _v7.b;
								return A5(
									$author$project$DataSources$SqlParser$FileParser$updateColumn,
									statement,
									A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table),
									fk.r,
									function (c) {
										return A2(
											$elm$core$Result$mapError,
											function (e) {
												return _List_fromArray(
													[e]);
											},
											A2(
												$elm$core$Result$map,
												function (r) {
													return _Utils_update(
														c,
														{
															a5: $elm$core$Maybe$Just(r)
														});
												},
												A8(
													$author$project$DataSources$SqlParser$FileParser$buildFk,
													tables,
													statement,
													table,
													fk.r,
													$elm$core$Maybe$Just(constraint),
													fk.fW.E,
													fk.fW.G,
													fk.fW.r)));
									},
									tables);
							case 2:
								var _v8 = command.a;
								var schema = _v8.a;
								var table = _v8.b;
								var _v9 = _v8.c;
								var constraint = _v9.a;
								var unique = _v9.b;
								return A4(
									$author$project$DataSources$SqlParser$FileParser$updateTable,
									statement,
									A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table),
									function (t) {
										return $elm$core$Result$Ok(
											_Utils_update(
												t,
												{
													bw: _Utils_ap(
														t.bw,
														_List_fromArray(
															[
																A4($author$project$DataSources$SqlParser$FileParser$SqlUnique, constraint, unique.W, unique.aH, statement)
															]))
												}));
									},
									tables);
							default:
								var _v10 = command.a;
								var schema = _v10.a;
								var table = _v10.b;
								var _v11 = _v10.c;
								var constraint = _v11.a;
								var check = _v11.b;
								return A4(
									$author$project$DataSources$SqlParser$FileParser$updateTable,
									statement,
									A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table),
									function (t) {
										return $elm$core$Result$Ok(
											_Utils_update(
												t,
												{
													a$: _Utils_ap(
														t.a$,
														_List_fromArray(
															[
																A4($author$project$DataSources$SqlParser$FileParser$SqlCheck, constraint, check.W, check.em, statement)
															]))
												}));
									},
									tables);
						}
					case 1:
						if (!command.a.c.$) {
							var _v12 = command.a;
							var schema = _v12.a;
							var table = _v12.b;
							var _v13 = _v12.c;
							var column = _v13.a;
							var _default = _v13.b;
							return A5(
								$author$project$DataSources$SqlParser$FileParser$updateColumn,
								statement,
								A2($author$project$DataSources$SqlParser$FileParser$buildId, schema, table),
								column,
								function (c) {
									return $elm$core$Result$Ok(
										_Utils_update(
											c,
											{
												cD: $elm$core$Maybe$Just(_default)
											}));
								},
								tables);
						} else {
							var _v14 = command.a;
							var _v15 = _v14.c;
							return $elm$core$Result$Ok(tables);
						}
					case 2:
						var _v16 = command.a;
						return $elm$core$Result$Ok(tables);
					case 3:
						var _v17 = command.a;
						return $elm$core$Result$Ok(tables);
					default:
						var _v18 = command.a;
						return $elm$core$Result$Ok(tables);
				}
			case 3:
				var index = command.a;
				return A4(
					$author$project$DataSources$SqlParser$FileParser$updateTable,
					statement,
					A2($author$project$DataSources$SqlParser$FileParser$buildId, index.G.E, index.G.G),
					function (t) {
						return $elm$core$Result$Ok(
							_Utils_update(
								t,
								{
									ba: _Utils_ap(
										t.ba,
										_List_fromArray(
											[
												A4($author$project$DataSources$SqlParser$FileParser$SqlIndex, index.cW, index.W, index.aH, statement)
											]))
								}));
					},
					tables);
			case 4:
				var unique = command.a;
				return A4(
					$author$project$DataSources$SqlParser$FileParser$updateTable,
					statement,
					A2($author$project$DataSources$SqlParser$FileParser$buildId, unique.G.E, unique.G.G),
					function (t) {
						return $elm$core$Result$Ok(
							_Utils_update(
								t,
								{
									bw: _Utils_ap(
										t.bw,
										_List_fromArray(
											[
												A4($author$project$DataSources$SqlParser$FileParser$SqlUnique, unique.cW, unique.W, unique.aH, statement)
											]))
								}));
					},
					tables);
			case 5:
				var comment = command.a;
				return A4(
					$author$project$DataSources$SqlParser$FileParser$updateTable,
					statement,
					A2($author$project$DataSources$SqlParser$FileParser$buildId, comment.E, comment.G),
					function (table) {
						return $elm$core$Result$Ok(
							_Utils_update(
								table,
								{
									cz: $elm$core$Maybe$Just(
										A2($author$project$DataSources$SqlParser$FileParser$SqlComment, comment.cz.dh, statement))
								}));
					},
					tables);
			case 6:
				var comment = command.a;
				return A5(
					$author$project$DataSources$SqlParser$FileParser$updateColumn,
					statement,
					A2($author$project$DataSources$SqlParser$FileParser$buildId, comment.E, comment.G),
					comment.r,
					function (column) {
						return $elm$core$Result$Ok(
							_Utils_update(
								column,
								{
									cz: $elm$core$Maybe$Just(
										A2($author$project$DataSources$SqlParser$FileParser$SqlComment, comment.cz.dh, statement))
								}));
					},
					tables);
			default:
				return $elm$core$Result$Ok(tables);
		}
	});
var $author$project$Libs$Dict$fromIndexedList = function (list) {
	return $elm$core$Dict$fromList(
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, a) {
					return _Utils_Tuple2(i, a);
				}),
			list));
};
var $author$project$DataSources$SqlParser$StatementParser$AlterTable = function (a) {
	return {$: 2, a: a};
};
var $author$project$DataSources$SqlParser$StatementParser$ColumnComment = function (a) {
	return {$: 6, a: a};
};
var $author$project$DataSources$SqlParser$StatementParser$CreateIndex = function (a) {
	return {$: 3, a: a};
};
var $author$project$DataSources$SqlParser$StatementParser$CreateTable = function (a) {
	return {$: 0, a: a};
};
var $author$project$DataSources$SqlParser$StatementParser$CreateUnique = function (a) {
	return {$: 4, a: a};
};
var $author$project$DataSources$SqlParser$StatementParser$CreateView = function (a) {
	return {$: 1, a: a};
};
var $author$project$DataSources$SqlParser$StatementParser$Ignored = function (a) {
	return {$: 7, a: a};
};
var $author$project$DataSources$SqlParser$StatementParser$TableComment = function (a) {
	return {$: 5, a: a};
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$AddTableConstraint = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$AddTableOwner = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$AlterColumn = F3(
	function (a, b, c) {
		return {$: 1, a: a, b: b, c: c};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$AttachPartition = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$DropConstraint = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedPrimaryKey = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $author$project$Libs$Regex$matches = F2(
	function (regex, text) {
		return A2(
			$elm$core$List$concatMap,
			function ($) {
				return $.jo;
			},
			function (r) {
				return A2($elm$regex$Regex$find, r, text);
			}(
				$author$project$Libs$Regex$asRegex(regex)));
	});
var $author$project$DataSources$SqlParser$Utils$Helpers$extract = F2(
	function (regex, text) {
		var _v0 = A2($author$project$Libs$Regex$matches, regex, text);
		if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
			var res = _v0.a.a;
			return res;
		} else {
			return text;
		}
	});
var $author$project$DataSources$SqlParser$Utils$Helpers$noEnclosingQuotes = function (text) {
	return A2(
		$author$project$DataSources$SqlParser$Utils$Helpers$extract,
		'\\[(.*)]',
		A2(
			$author$project$DataSources$SqlParser$Utils$Helpers$extract,
			'`(.*)`',
			A2(
				$author$project$DataSources$SqlParser$Utils$Helpers$extract,
				'\'(.*)\'',
				A2($author$project$DataSources$SqlParser$Utils$Helpers$extract, '\"(.*)\"', text))));
};
var $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName = function (name) {
	return $author$project$DataSources$SqlParser$Utils$Helpers$noEnclosingQuotes(
		$elm$core$String$trim(name));
};
var $author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine = function (statement) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function ($) {
				return $.dh;
			},
			$author$project$Libs$Nel$toList(statement)));
};
var $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName = function (name) {
	return $author$project$DataSources$SqlParser$Utils$Helpers$noEnclosingQuotes(
		$elm$core$String$trim(name));
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedCheck = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedForeignKey = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedUnique = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$DataSources$SqlParser$Utils$Helpers$buildConstraintName = function (name) {
	return $author$project$DataSources$SqlParser$Utils$Helpers$noEnclosingQuotes(
		$elm$core$String$trim(name));
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintCheck = function (constraint) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^CHECK\\s+(?<predicate>.*)$', constraint);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var predicate = _v0.a.a;
		return $elm$core$Result$Ok(
			{W: _List_Nil, em: predicate});
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse check constraint: \'' + (constraint + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName = function (name) {
	return $author$project$DataSources$SqlParser$Utils$Helpers$noEnclosingQuotes(
		$elm$core$String$trim(name));
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$buildForeignKeyInner = F5(
	function (constraint, columns, schemaDest, tableDest, columnDest) {
		var _v0 = A2($elm$core$String$split, ',', columns);
		if (_v0.b && (!_v0.b.b)) {
			var column = _v0.a;
			return $elm$core$Result$Ok(
				{
					r: $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(column),
					fW: {
						r: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName, columnDest),
						E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schemaDest),
						G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(tableDest)
					}
				});
		} else {
			return $elm$core$Result$Err(
				_List_fromArray(
					['Multi-column foreign key is not supported: \'' + (constraint + '\'')]));
		}
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$sqlTriggers = '(?:\\s+(?:ON UPDATE|ON DELETE)\\s+(?:NO ACTION|CASCADE|SET NULL|SET DEFAULT|RESTRICT))*';
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintForeignKey = function (constraint) {
	var deferrable = '(?:(?:\\s+NOT)?\\s+DEFERRABLE)?';
	var _v0 = A2($author$project$Libs$Regex$matches, '^FOREIGN KEY\\s+\\((?<column>[^)]+)\\)\\s+REFERENCES\\s+(?:(?<schema_b>[^ .]+)\\.)?(?<table_b>[^ .(]+)(?:\\s*\\((?<column_b>[^)]+)\\))?(?:\\s+NOT VALID)?' + ($author$project$DataSources$SqlParser$Parsers$AlterTable$sqlTriggers + (deferrable + '$')), constraint);
	if ((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
		var columns = _v0.a.a;
		var _v1 = _v0.b;
		var schemaDest = _v1.a;
		var _v2 = _v1.b;
		var tableDest = _v2.a.a;
		var _v3 = _v2.b;
		var columnDest = _v3.a;
		return A5($author$project$DataSources$SqlParser$Parsers$AlterTable$buildForeignKeyInner, constraint, columns, schemaDest, tableDest, columnDest);
	} else {
		var _v4 = A2($author$project$Libs$Regex$matches, '^FOREIGN KEY\\s+\\((?<column>[^)]+)\\)\\s+REFERENCES\\s+(?:(?<schema_b>[^ .]+)\\.)?(?<table_b>[^ .(]+)(?:\\((?<column_b>[^ .]+)\\))?$', constraint);
		if ((((((_v4.b && (!_v4.a.$)) && _v4.b.b) && _v4.b.b.b) && (!_v4.b.b.a.$)) && _v4.b.b.b.b) && (!_v4.b.b.b.b.b)) {
			var columns = _v4.a.a;
			var _v5 = _v4.b;
			var schemaDest = _v5.a;
			var _v6 = _v5.b;
			var tableDest = _v6.a.a;
			var _v7 = _v6.b;
			var columnDest = _v7.a;
			return A5($author$project$DataSources$SqlParser$Parsers$AlterTable$buildForeignKeyInner, constraint, columns, schemaDest, tableDest, columnDest);
		} else {
			return $elm$core$Result$Err(
				_List_fromArray(
					['Can\'t parse foreign key: \'' + (constraint + '\'')]));
		}
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintPrimaryKey = function (constraint) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^PRIMARY KEY\\s*\\((?<columns>[^)]+)\\)$', constraint);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var columns = _v0.a.a;
		return A2(
			$elm$core$Result$fromMaybe,
			_List_fromArray(
				['Primary key can\'t have empty columns']),
			$author$project$Libs$Nel$fromList(
				A2(
					$elm$core$List$map,
					$author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName,
					A2($elm$core$String$split, ',', columns))));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse primary key: \'' + (constraint + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Utils$Helpers$parseIndexDefinition = function (definition) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^\\((?<columns>[^)]+)\\)(?:(?:\\s+NOT)?\\s+DEFERRABLE)?$', definition);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var columns = _v0.a.a;
		return $elm$core$Result$Ok(
			A2(
				$elm$core$List$map,
				$elm$core$String$trim,
				A2($elm$core$String$split, ',', columns)));
	} else {
		var _v1 = A2($author$project$Libs$Regex$matches, '^USING[ \t]+[^ ]+[ \t]+\\((?<columns>[^)]+)\\).*$', definition);
		if ((_v1.b && (!_v1.a.$)) && (!_v1.b.b)) {
			var columns = _v1.a.a;
			return $elm$core$Result$Ok(
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					A2($elm$core$String$split, ',', columns)));
		} else {
			return $elm$core$Result$Err(
				_List_fromArray(
					['Can\'t parse definition: \'' + (definition + '\' in create index')]));
		}
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintUnique = function (constraint) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^UNIQUE\\s+(?<definition>.+)$', constraint);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var definition = _v0.a.a;
		return A2(
			$elm$core$Result$map,
			function (columns) {
				return {W: columns, aH: definition};
			},
			A2(
				$elm$core$Result$andThen,
				function (columns) {
					return A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							['Unique index can\'t have empty columns']),
						$author$project$Libs$Nel$fromList(
							A2($elm$core$List$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName, columns)));
				},
				$author$project$DataSources$SqlParser$Utils$Helpers$parseIndexDefinition(definition)));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse unique constraint: \'' + (constraint + '\'')]));
	}
};
var $elm$core$String$toUpper = _String_toUpper;
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraint = function (command) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^ADD CONSTRAINT\\s+(?<name>[^ ]+)\\s+(?<constraint>.*?)(?:\\s+match simple)?' + ($author$project$DataSources$SqlParser$Parsers$AlterTable$sqlTriggers + '$'), command);
	if ((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && (!_v0.b.b.b)) {
		var name = _v0.a.a;
		var _v1 = _v0.b;
		var constraint = _v1.a.a;
		return A2(
			$elm$core$String$startsWith,
			'PRIMARY KEY',
			$elm$core$String$toUpper(constraint)) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedPrimaryKey(
				$elm$core$Maybe$Just(
					$author$project$DataSources$SqlParser$Utils$Helpers$buildConstraintName(name))),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintPrimaryKey(constraint)) : (A2(
			$elm$core$String$startsWith,
			'FOREIGN KEY',
			$elm$core$String$toUpper(constraint)) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedForeignKey(
				$author$project$DataSources$SqlParser$Utils$Helpers$buildConstraintName(name)),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintForeignKey(constraint)) : (A2(
			$elm$core$String$startsWith,
			'UNIQUE',
			$elm$core$String$toUpper(constraint)) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedUnique(
				$author$project$DataSources$SqlParser$Utils$Helpers$buildConstraintName(name)),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintUnique(constraint)) : (A2(
			$elm$core$String$startsWith,
			'CHECK',
			$elm$core$String$toUpper(constraint)) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedCheck(
				$author$project$DataSources$SqlParser$Utils$Helpers$buildConstraintName(name)),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintCheck(constraint)) : $elm$core$Result$Err(
			_List_fromArray(
				['Constraint not handled: \'' + (constraint + '\'')])))));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse add constraint: \'' + (command + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$ColumnDefault = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$ColumnStatistics = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAlterColumnDefault = function (property) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^DEFAULT\\s+(?<value>.+)$', property);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var value = _v0.a.a;
		return $elm$core$Result$Ok(value);
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse default value: \'' + (property + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAlterColumnStatistics = function (property) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^STATISTICS\\s+(?<value>[0-9]+)$', property);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var value = _v0.a.a;
		return A2(
			$elm$core$Result$fromMaybe,
			_List_fromArray(
				['Statistics value is not a number: \'' + (value + '\'')]),
			$elm$core$String$toInt(value));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse statistics: \'' + (property + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAlterColumn = function (command) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^ALTER COLUMN\\s+(?<column>[^ .]+)\\s+SET\\s+(?<property>.+)$', command);
	if ((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && (!_v0.b.b.b)) {
		var column = _v0.a.a;
		var _v1 = _v0.b;
		var property = _v1.a.a;
		return A2(
			$elm$core$String$startsWith,
			'DEFAULT',
			$elm$core$String$toUpper(property)) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$Parsers$AlterTable$ColumnDefault(column),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAlterColumnDefault(property)) : (A2(
			$elm$core$String$startsWith,
			'STATISTICS',
			$elm$core$String$toUpper(property)) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$Parsers$AlterTable$ColumnStatistics(column),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAlterColumnStatistics(property)) : $elm$core$Result$Err(
			_List_fromArray(
				['Column update not handled: \'' + (property + '\'')])));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse alter column: \'' + (command + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableDropConstraint = function (command) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^DROP CONSTRAINT(?:\\s+IF EXISTS)? (?<name>.+)$', command);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var name = _v0.a.a;
		return $elm$core$Result$Ok(name);
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse drop constraint: \'' + (command + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableOwnerTo = function (command) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^OWNER TO\\s+(?<user>.+)$', command);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var user = _v0.a.a;
		return $elm$core$Result$Ok(user);
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse alter column: \'' + (command + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTable = function (statement) {
	var _v0 = A2(
		$author$project$Libs$Regex$matches,
		'^ALTER TABLE(?:\\s+ONLY)?(?:\\s+IF EXISTS)?\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ .]+)\\s+(?<command>.*);$',
		$author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine(statement));
	if (((((_v0.b && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.a.$)) && (!_v0.b.b.b.b)) {
		var schema = _v0.a;
		var _v1 = _v0.b;
		var table = _v1.a.a;
		var _v2 = _v1.b;
		var command = _v2.a.a;
		var tableName = $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table);
		var schemaName = A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema);
		return A2(
			$elm$core$String$startsWith,
			'ADD PRIMARY KEY ',
			$elm$core$String$toUpper(command)) ? A2(
			$elm$core$Result$map,
			function (r) {
				return A3(
					$author$project$DataSources$SqlParser$Parsers$AlterTable$AddTableConstraint,
					schemaName,
					tableName,
					A2($author$project$DataSources$SqlParser$Parsers$AlterTable$ParsedPrimaryKey, $elm$core$Maybe$Nothing, r));
			},
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraintPrimaryKey(
				A2($elm$core$String$dropLeft, 4, command))) : (A2(
			$elm$core$String$startsWith,
			'ADD CONSTRAINT ',
			$elm$core$String$toUpper(command)) ? A2(
			$elm$core$Result$map,
			A2($author$project$DataSources$SqlParser$Parsers$AlterTable$AddTableConstraint, schemaName, tableName),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraint(command)) : (A2(
			$elm$core$String$startsWith,
			'ALTER COLUMN ',
			$elm$core$String$toUpper(command)) ? A2(
			$elm$core$Result$map,
			A2($author$project$DataSources$SqlParser$Parsers$AlterTable$AlterColumn, schemaName, tableName),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAlterColumn(command)) : (A2(
			$elm$core$String$startsWith,
			'OWNER TO ',
			$elm$core$String$toUpper(command)) ? A2(
			$elm$core$Result$map,
			A2($author$project$DataSources$SqlParser$Parsers$AlterTable$AddTableOwner, schemaName, tableName),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableOwnerTo(command)) : (A2(
			$elm$core$String$startsWith,
			'ATTACH PARTITION ',
			$elm$core$String$toUpper(command)) ? $elm$core$Result$Ok(
			A2($author$project$DataSources$SqlParser$Parsers$AlterTable$AttachPartition, schemaName, tableName)) : (A2(
			$elm$core$String$startsWith,
			'DROP CONSTRAINT ',
			$elm$core$String$toUpper(command)) ? A2(
			$elm$core$Result$map,
			A2($author$project$DataSources$SqlParser$Parsers$AlterTable$DropConstraint, schemaName, tableName),
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableDropConstraint(command)) : $elm$core$Result$Err(
			_List_fromArray(
				['Command not handled: \'' + (command + '\'')])))))));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				[
					'Can\'t parse alter table: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$Comment$parseColumnComment = function (statement) {
	var _v0 = A2(
		$author$project$Libs$Regex$matches,
		'^COMMENT ON COLUMN\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ .]+)\\.(?<column>[^ .]+)\\s+IS\\s+\'(?<comment>(?:[^\']|\'\')+)\';$',
		$author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine(statement));
	if (((((((_v0.b && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) && (!_v0.b.b.b.a.$)) && (!_v0.b.b.b.b.b)) {
		var schema = _v0.a;
		var _v1 = _v0.b;
		var table = _v1.a.a;
		var _v2 = _v1.b;
		var column = _v2.a.a;
		var _v3 = _v2.b;
		var comment = _v3.a.a;
		return $elm$core$Result$Ok(
			{
				r: $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(column),
				cz: {
					dh: A3($elm$core$String$replace, '\'\'', '\'', comment)
				},
				E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
				G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
			});
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				[
					'Can\'t parse column comment: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateIndex$parseCreateIndex = function (statement) {
	var _v0 = A2(
		$author$project$Libs$Regex$matches,
		'^CREATE INDEX\\s+(?<name>[^ ]+)\\s+ON(?:\\s+ONLY)?\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ (]+)\\s*(?<definition>.+);$',
		$author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine(statement));
	if (((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) && (!_v0.b.b.b.a.$)) && (!_v0.b.b.b.b.b)) {
		var name = _v0.a.a;
		var _v1 = _v0.b;
		var schema = _v1.a;
		var _v2 = _v1.b;
		var table = _v2.a.a;
		var _v3 = _v2.b;
		var definition = _v3.a.a;
		return A2(
			$elm$core$Result$map,
			function (columns) {
				return {
					W: columns,
					aH: definition,
					cW: name,
					G: {
						E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
						G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
					}
				};
			},
			A2(
				$elm$core$Result$andThen,
				function (columns) {
					return A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							['Index can\'t have empty columns']),
						$author$project$Libs$Nel$fromList(columns));
				},
				$author$project$DataSources$SqlParser$Utils$Helpers$parseIndexDefinition(definition)));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				[
					'Can\'t parse create index: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$checkConstraints = function (constraint) {
	if (constraint.$ === 3) {
		var name = constraint.a;
		var columns = constraint.b.W;
		var predicate = constraint.b.em;
		return $elm$core$Maybe$Just(
			{W: columns, cW: name, em: predicate});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$fromList = _String_fromList;
var $author$project$DataSources$SqlParser$Utils$Helpers$commaSplit = function (text) {
	return function (_v1) {
		var res = _v1.a;
		var end = _v1.b;
		return A2(
			$elm$core$List$cons,
			$elm$core$String$fromList(end),
			res);
	}(
		A3(
			$elm$core$String$foldr,
			F2(
				function (_char, _v0) {
					var res = _v0.a;
					var cur = _v0.b;
					var open = _v0.c;
					return ((_char === ',') && (!open)) ? _Utils_Tuple3(
						A2(
							$elm$core$List$cons,
							$elm$core$String$fromList(cur),
							res),
						_List_Nil,
						open) : ((_char === '(') ? _Utils_Tuple3(
						res,
						A2($elm$core$List$cons, _char, cur),
						open + 1) : ((_char === ')') ? _Utils_Tuple3(
						res,
						A2($elm$core$List$cons, _char, cur),
						open - 1) : _Utils_Tuple3(
						res,
						A2($elm$core$List$cons, _char, cur),
						open)));
				}),
			_Utils_Tuple3(_List_Nil, _List_Nil, 0),
			text));
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$foreignKeyConstraints = function (constraint) {
	if (constraint.$ === 1) {
		var name = constraint.a;
		var column = constraint.b.r;
		var ref = constraint.b.fW;
		return $elm$core$Maybe$Just(
			{
				cW: $elm$core$Maybe$Just(name),
				fW: ref,
				de: column
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 1) {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 1) {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		if (ra.$ === 1) {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 1) {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				if (rc.$ === 1) {
					var x = rc.a;
					return $elm$core$Result$Err(x);
				} else {
					var c = rc.a;
					return $elm$core$Result$Ok(
						A3(func, a, b, c));
				}
			}
		}
	});
var $author$project$Libs$Result$map6 = F7(
	function (func, ra, rb, rc, rd, re, rf) {
		return A3(
			$elm$core$Result$map2,
			F2(
				function (_v0, _v1) {
					var a = _v0.a;
					var b = _v0.b;
					var c = _v0.c;
					var d = _v1.a;
					var e = _v1.b;
					var f = _v1.c;
					return A6(func, a, b, c, d, e, f);
				}),
			A4(
				$elm$core$Result$map3,
				F3(
					function (a, b, c) {
						return _Utils_Tuple3(a, b, c);
					}),
				ra,
				rb,
				rc),
			A4(
				$elm$core$Result$map3,
				F3(
					function (d, e, f) {
						return _Utils_Tuple3(d, e, f);
					}),
				rd,
				re,
				rf));
	});
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableColumnForeignKey = function (constraint) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^(?<constraint>[^ ]+)\\s+REFERENCES\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ .]+)(?:\\.(?<column>[^ .]+))?$', constraint);
	if (((((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) && (!_v0.b.b.b.b.b)) {
		if ((!_v0.b.a.$) && (_v0.b.b.b.a.$ === 1)) {
			var constraintName = _v0.a;
			var _v1 = _v0.b;
			var table = _v1.a.a;
			var _v2 = _v1.b;
			var column = _v2.a.a;
			var _v3 = _v2.b;
			var _v4 = _v3.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(
					constraintName,
					{
						r: $elm$core$Maybe$Just(
							$author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(column)),
						E: $elm$core$Maybe$Nothing,
						G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
					}));
		} else {
			var constraintName = _v0.a;
			var _v5 = _v0.b;
			var schema = _v5.a;
			var _v6 = _v5.b;
			var table = _v6.a.a;
			var _v7 = _v6.b;
			var column = _v7.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(
					constraintName,
					{
						r: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName, column),
						E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
						G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
					}));
		}
	} else {
		var _v8 = A2($author$project$Libs$Regex$matches, '^(?:(?<constraint>[^ ]+)\\s+)?REFERENCES\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ .(]+)(?:\\((?<column>[^ .]+)\\))?$', constraint);
		if (((((_v8.b && _v8.b.b) && _v8.b.b.b) && (!_v8.b.b.a.$)) && _v8.b.b.b.b) && (!_v8.b.b.b.b.b)) {
			var constraintName = _v8.a;
			var _v9 = _v8.b;
			var schema = _v9.a;
			var _v10 = _v9.b;
			var table = _v10.a.a;
			var _v11 = _v10.b;
			var column = _v11.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple2(
					constraintName,
					{
						r: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName, column),
						E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
						G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
					}));
		} else {
			return $elm$core$Result$Err('Can\'t parse foreign key: \'' + (constraint + '\' in create table'));
		}
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableColumnPrimaryKey = function (constraint) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^(?<constraint>[^ ]+)\\s+PRIMARY KEY$', constraint);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var constraintName = _v0.a.a;
		return $elm$core$Result$Ok(constraintName);
	} else {
		return $elm$core$Result$Err('Can\'t parse primary key: \'' + (constraint + '\' in create table'));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableColumn = F2(
	function (table, sql) {
		var _v0 = A2($author$project$Libs$Regex$matches, '^(?<name>[^ ]+)\\s+(?<type>.*?)(?:\\s+COLLATE [^ ]+)?(?:\\s+DEFAULT\\s+(?<default1>.*?))?(?<nullable>\\s+NOT NULL)?(?:\\s+DEFAULT\\s+(?<default2>.*?))?(?:\\s+CONSTRAINT\\s+(?<constraint>.*))?(?:\\s+(?<reference>REFERENCES\\s+.*))?(?: AUTO_INCREMENT)?( PRIMARY KEY)?(?: CHECK\\((?<check>.*?)\\))?( GENERATED .*?)?$', sql);
		if ((((((((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && _v0.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b) && _v0.b.b.b.b.b.b.b.b.b.b) && (!_v0.b.b.b.b.b.b.b.b.b.b.b)) {
			var name = _v0.a.a;
			var _v1 = _v0.b;
			var kind = _v1.a.a;
			var _v2 = _v1.b;
			var default1 = _v2.a;
			var _v3 = _v2.b;
			var nullable = _v3.a;
			var _v4 = _v3.b;
			var default2 = _v4.a;
			var _v5 = _v4.b;
			var maybeConstraint = _v5.a;
			var _v6 = _v5.b;
			var maybeReference = _v6.a;
			var _v7 = _v6.b;
			var maybePrimary = _v7.a;
			var _v8 = _v7.b;
			var maybeCheck = _v8.a;
			var _v9 = _v8.b;
			var maybeGenerated = _v9.a;
			return A2(
				$elm$core$Result$map,
				function (_v11) {
					var pk = _v11.a;
					var fk = _v11.b;
					var nullable2 = _v11.c;
					return {
						gO: maybeCheck,
						cD: A2(
							$author$project$Libs$Maybe$orElse,
							A2($elm$core$Maybe$map, $elm$core$String$trim, maybeGenerated),
							A2($author$project$Libs$Maybe$orElse, default2, default1)),
						a5: fk,
						S: kind,
						cW: $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(name),
						av: _Utils_eq(nullable, $elm$core$Maybe$Nothing) && nullable2,
						aT: pk
					};
				},
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Result$Ok(
						_Utils_Tuple3($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, true)),
					A2(
						$author$project$Libs$Maybe$orElse,
						A2(
							$elm$core$Maybe$map,
							function (_v10) {
								return $elm$core$Result$Ok(
									_Utils_Tuple3(
										$elm$core$Maybe$Just(
											$author$project$DataSources$SqlParser$Utils$Helpers$defaultPkName(table)),
										$elm$core$Maybe$Nothing,
										true));
							},
							maybePrimary),
						A2(
							$author$project$Libs$Maybe$orElse,
							A2(
								$elm$core$Maybe$map,
								A2(
									$elm$core$Basics$composeR,
									$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableColumnForeignKey,
									$elm$core$Result$map(
										function (fk) {
											return _Utils_Tuple3(
												$elm$core$Maybe$Nothing,
												$elm$core$Maybe$Just(fk),
												true);
										})),
								maybeReference),
							A2(
								$elm$core$Maybe$map,
								function (constraint) {
									return A2(
										$elm$core$String$contains,
										'PRIMARY KEY',
										$elm$core$String$toUpper(constraint)) ? A2(
										$elm$core$Result$map,
										function (pk) {
											return _Utils_Tuple3(
												$elm$core$Maybe$Just(pk),
												$elm$core$Maybe$Nothing,
												true);
										},
										$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableColumnPrimaryKey(constraint)) : (A2(
										$elm$core$String$contains,
										'REFERENCES',
										$elm$core$String$toUpper(constraint)) ? A2(
										$elm$core$Result$map,
										function (fk) {
											return _Utils_Tuple3(
												$elm$core$Maybe$Nothing,
												$elm$core$Maybe$Just(fk),
												true);
										},
										$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableColumnForeignKey(constraint)) : (A2(
										$elm$core$String$contains,
										'NOT NULL',
										$elm$core$String$toUpper(constraint)) ? $elm$core$Result$Ok(
										_Utils_Tuple3($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, false)) : $elm$core$Result$Err('Constraint not handled: \'' + (constraint + '\' in create table'))));
								},
								maybeConstraint)))));
		} else {
			return $elm$core$Result$Err('Can\'t parse column: \'' + (sql + '\''));
		}
	});
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableForeignKey = function (sql) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^FOREIGN KEY\\s*\\((?<src>[^)]+)\\)\\s*REFERENCES\\s+(?<table>[^ .(]+)\\((?<column>[^ .)]+)\\)$', sql);
	if ((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.a.$)) && (!_v0.b.b.b.b)) {
		var src = _v0.a.a;
		var _v1 = _v0.b;
		var table = _v1.a.a;
		var _v2 = _v1.b;
		var column = _v2.a.a;
		return $elm$core$Result$Ok(
			{
				cW: $elm$core$Maybe$Nothing,
				fW: {
					r: $elm$core$Maybe$Just(
						$author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(column)),
					E: $elm$core$Maybe$Nothing,
					G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
				},
				de: $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(src)
			});
	} else {
		return $elm$core$Result$Err('Can\'t parse table foreign key: \'' + (sql + '\''));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableKey = function (sql) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^KEY (?<name>[^ ]+) \\((?<columns>.+)\\)(?:\\s+USING [^ ]+)?$', sql);
	if ((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && (!_v0.b.b.b)) {
		var name = _v0.a.a;
		var _v1 = _v0.b;
		var columns = _v1.a.a;
		return A2(
			$elm$core$Result$map,
			function (cols) {
				return {
					W: cols,
					aH: sql,
					cW: $author$project$DataSources$SqlParser$Utils$Helpers$buildConstraintName(name)
				};
			},
			A2(
				$elm$core$Result$fromMaybe,
				'Key can\'t have no column',
				$author$project$Libs$Nel$fromList(
					A2(
						$elm$core$List$map,
						$author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName,
						A2($elm$core$String$split, ',', columns)))));
	} else {
		return $elm$core$Result$Err('Can\'t parse table key: \'' + (sql + '\''));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTablePrimaryKey = function (sql) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^PRIMARY KEY \\((?<columns>[^)]+)\\)$', sql);
	if ((_v0.b && (!_v0.a.$)) && (!_v0.b.b)) {
		var columns = _v0.a.a;
		return A2(
			$elm$core$Result$fromMaybe,
			'Primary key can\'t have no column',
			A2(
				$elm$core$Maybe$map,
				function (cols) {
					return {W: cols, cW: $elm$core$Maybe$Nothing};
				},
				$author$project$Libs$Nel$fromList(
					A2(
						$elm$core$List$map,
						$author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName,
						A2($elm$core$String$split, ',', columns)))));
	} else {
		return $elm$core$Result$Err('Can\'t parse table primary key: \'' + (sql + '\''));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableUniqueKey = function (sql) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^UNIQUE KEY (?<name>[^ ]+) \\((?<columns>[^)]+)\\)$', sql);
	if ((((_v0.b && (!_v0.a.$)) && _v0.b.b) && (!_v0.b.a.$)) && (!_v0.b.b.b)) {
		var name = _v0.a.a;
		var _v1 = _v0.b;
		var columns = _v1.a.a;
		return A2(
			$elm$core$Result$map,
			function (cols) {
				return {
					W: cols,
					aH: sql,
					cW: $author$project$DataSources$SqlParser$Utils$Helpers$buildConstraintName(name)
				};
			},
			A2(
				$elm$core$Result$fromMaybe,
				'Unique key can\'t have no column',
				$author$project$Libs$Nel$fromList(
					A2(
						$elm$core$List$map,
						$author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName,
						A2($elm$core$String$split, ',', columns)))));
	} else {
		return $elm$core$Result$Err('Can\'t parse table unique key: \'' + (sql + '\''));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$primaryKeyConstraints = function (constraint) {
	if (!constraint.$) {
		var name = constraint.a;
		var columns = constraint.b;
		return $elm$core$Maybe$Just(
			{W: columns, cW: name});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$uniqueKeyConstraints = function (constraint) {
	if (constraint.$ === 2) {
		var name = constraint.a;
		var columns = constraint.b.W;
		var definition = constraint.b.aH;
		return $elm$core$Maybe$Just(
			{W: columns, aH: definition, cW: name});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTable = function (statement) {
	var _v0 = A2(
		$author$project$Libs$Regex$matches,
		'^CREATE TABLE(?:\\s+IF NOT EXISTS)?\\s+(?:(?<db>[^ .]+)\\.)?(?:(?<schema>[^ .]+)\\.)?(?<table>[^ .]+)\\s*\\((?<body>[^;]+?)\\)(?:\\s+WITH\\s+\\((?<options>.*?)\\))?(?:[^)]*)?;$',
		$author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine(statement));
	if (((((((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) && (!_v0.b.b.b.a.$)) && _v0.b.b.b.b.b) && (!_v0.b.b.b.b.b.b)) {
		var db = _v0.a;
		var _v1 = _v0.b;
		var schema = _v1.a;
		var _v2 = _v1.b;
		var table = _v2.a.a;
		var _v3 = _v2.b;
		var body = _v3.a.a;
		var _v4 = _v3.b;
		var tableName = $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table);
		var schemaName = A2(
			$elm$core$Maybe$map,
			$author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName,
			A2($author$project$Libs$Maybe$orElse, db, schema));
		var _v5 = A2(
			$elm$core$List$partition,
			function (col) {
				return function (colUp) {
					return A2(
						$elm$core$List$any,
						function (cons) {
							return A2($elm$core$String$startsWith, cons, colUp);
						},
						_List_fromArray(
							['CONSTRAINT ', 'PRIMARY KEY ', 'FOREIGN KEY', 'UNIQUE KEY ', 'KEY `']));
				}(
					$elm$core$String$toUpper(col));
			},
			A2(
				$elm$core$List$map,
				$elm$core$String$trim,
				$author$project$DataSources$SqlParser$Utils$Helpers$commaSplit(body)));
		var constraints = _v5.a;
		var columns = _v5.b;
		return A7(
			$author$project$Libs$Result$map6,
			F6(
				function (cols, pk, fks, uniques, indexes, parsedConstraints) {
					return {
						a$: A2($elm$core$List$filterMap, $author$project$DataSources$SqlParser$Parsers$CreateTable$checkConstraints, parsedConstraints),
						W: cols,
						hj: _Utils_ap(
							fks,
							A2($elm$core$List$filterMap, $author$project$DataSources$SqlParser$Parsers$CreateTable$foreignKeyConstraints, parsedConstraints)),
						ba: indexes,
						aT: $elm$core$List$head(
							_Utils_ap(
								pk,
								A2($elm$core$List$filterMap, $author$project$DataSources$SqlParser$Parsers$CreateTable$primaryKeyConstraints, parsedConstraints))),
						E: schemaName,
						G: tableName,
						bw: _Utils_ap(
							uniques,
							A2($elm$core$List$filterMap, $author$project$DataSources$SqlParser$Parsers$CreateTable$uniqueKeyConstraints, parsedConstraints))
					};
				}),
			A2(
				$elm$core$Result$andThen,
				function (cols) {
					return A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							['Create table can\'t have empty columns']),
						$author$project$Libs$Nel$fromList(cols));
				},
				$author$project$Libs$List$resultSeq(
					A2(
						$elm$core$List$map,
						$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableColumn(tableName),
						columns))),
			$author$project$Libs$List$resultSeq(
				A2(
					$elm$core$List$map,
					$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTablePrimaryKey,
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toUpper,
							$elm$core$String$startsWith('PRIMARY KEY')),
						constraints))),
			$author$project$Libs$List$resultSeq(
				A2(
					$elm$core$List$map,
					$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableForeignKey,
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toUpper,
							$elm$core$String$startsWith('FOREIGN KEY')),
						constraints))),
			$author$project$Libs$List$resultSeq(
				A2(
					$elm$core$List$map,
					$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableUniqueKey,
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toUpper,
							$elm$core$String$startsWith('UNIQUE KEY')),
						constraints))),
			$author$project$Libs$List$resultSeq(
				A2(
					$elm$core$List$map,
					$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTableKey,
					A2(
						$elm$core$List$filter,
						A2(
							$elm$core$Basics$composeR,
							$elm$core$String$toUpper,
							$elm$core$String$startsWith('KEY')),
						constraints))),
			A2(
				$elm$core$Result$mapError,
				function (errs) {
					return A2($elm$core$List$concatMap, $elm$core$Basics$identity, errs);
				},
				$author$project$Libs$List$resultSeq(
					A2(
						$elm$core$List$map,
						function (c) {
							return $author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTableAddConstraint('ADD ' + c);
						},
						A2(
							$elm$core$List$filter,
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toUpper,
								$elm$core$String$startsWith('CONSTRAINT')),
							constraints)))));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				[
					'Can\'t parse table: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateUnique$parseCreateUniqueIndex = function (statement) {
	var _v0 = A2(
		$author$project$Libs$Regex$matches,
		'^CREATE UNIQUE INDEX\\s+(?<name>[^ ]+)\\s+ON\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ (]+)\\s*(?<definition>.+);$',
		$author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine(statement));
	if (((((((_v0.b && (!_v0.a.$)) && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) && (!_v0.b.b.b.a.$)) && (!_v0.b.b.b.b.b)) {
		var name = _v0.a.a;
		var _v1 = _v0.b;
		var schema = _v1.a;
		var _v2 = _v1.b;
		var table = _v2.a.a;
		var _v3 = _v2.b;
		var definition = _v3.a.a;
		return A2(
			$elm$core$Result$map,
			function (columns) {
				return {
					W: columns,
					aH: definition,
					cW: name,
					G: {
						E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
						G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
					}
				};
			},
			A2(
				$elm$core$Result$andThen,
				function (columns) {
					return A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							['Unique index can\'t have empty columns']),
						$author$project$Libs$Nel$fromList(columns));
				},
				$author$project$DataSources$SqlParser$Utils$Helpers$parseIndexDefinition(definition)));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				[
					'Can\'t parse create unique index: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$Comment$parseTableComment = function (statement) {
	var _v0 = A2(
		$author$project$Libs$Regex$matches,
		'^COMMENT ON TABLE\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ .]+)\\s+IS\\s+\'(?<comment>(?:[^\']|\'\')+)\';$',
		$author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine(statement));
	if (((((_v0.b && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.a.$)) && (!_v0.b.b.b.b)) {
		var schema = _v0.a;
		var _v1 = _v0.b;
		var table = _v1.a.a;
		var _v2 = _v1.b;
		var comment = _v2.a.a;
		return $elm$core$Result$Ok(
			{
				cz: {
					dh: A3($elm$core$String$replace, '\'\'', '\'', comment)
				},
				E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
				G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
			});
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				[
					'Can\'t parse table comment: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$Select$BasicColumn = function (a) {
	return {$: 0, a: a};
};
var $author$project$DataSources$SqlParser$Parsers$Select$ComplexColumn = function (a) {
	return {$: 1, a: a};
};
var $author$project$DataSources$SqlParser$Parsers$Select$parseSelectColumn = function (column) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^(?:(?<table>[^ .]+)\\.)?(?<column>[^ :]+)(?:\\s*AS\\s+(?<alias>.+))?$', column);
	if ((((_v0.b && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
		var table = _v0.a;
		var _v1 = _v0.b;
		var columnName = _v1.a.a;
		var _v2 = _v1.b;
		var alias = _v2.a;
		return $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$Parsers$Select$BasicColumn(
				{
					$7: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName, alias),
					r: $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(columnName),
					G: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName, table)
				}));
	} else {
		var _v3 = A2($author$project$Libs$Regex$matches, '^(?<formula>.+?)\\s+AS\\s+(?<alias>[^ ]+)$', column);
		if ((((_v3.b && (!_v3.a.$)) && _v3.b.b) && (!_v3.b.a.$)) && (!_v3.b.b.b)) {
			var formula = _v3.a.a;
			var _v4 = _v3.b;
			var alias = _v4.a.a;
			return $elm$core$Result$Ok(
				$author$project$DataSources$SqlParser$Parsers$Select$ComplexColumn(
					{
						$7: $author$project$DataSources$SqlParser$Utils$Helpers$buildColumnName(alias),
						hk: formula
					}));
		} else {
			return $elm$core$Result$Err('Can\'t parse select column \'' + (column + '\''));
		}
	}
};
var $author$project$DataSources$SqlParser$Parsers$Select$BasicTable = function (a) {
	return {$: 0, a: a};
};
var $author$project$DataSources$SqlParser$Parsers$Select$ComplexTable = function (a) {
	return {$: 1, a: a};
};
var $author$project$DataSources$SqlParser$Parsers$Select$parseSelectTable = function (table) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^(?:(?<schema>[^ .]+)\\.)?(?<table>[^ ]+)(?:\\s+(?<alias>[^ ]+))?$', table);
	if ((((_v0.b && _v0.b.b) && (!_v0.b.a.$)) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
		var schema = _v0.a;
		var _v1 = _v0.b;
		var tableName = _v1.a.a;
		var _v2 = _v1.b;
		var alias = _v2.a;
		return $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$Parsers$Select$BasicTable(
				{
					$7: alias,
					E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
					G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(tableName)
				}));
	} else {
		return $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$Parsers$Select$ComplexTable(
				{aH: table}));
	}
};
var $author$project$Libs$Maybe$toList = function (maybe) {
	if (!maybe.$) {
		var a = maybe.a;
		return _List_fromArray(
			[a]);
	} else {
		return _List_Nil;
	}
};
var $author$project$DataSources$SqlParser$Parsers$Select$parseSelect = function (select) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^SELECT(?:\\s+DISTINCT ON \\([^)]+\\))?\\s+(?<columns>.+?)(?:\\s+FROM\\s+(?<tables>.+?))?(?:\\s+WHERE\\s+(?<where>.+?))?$', select);
	if ((((_v0.b && (!_v0.a.$)) && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
		var columnsStr = _v0.a.a;
		var _v1 = _v0.b;
		var tablesStr = _v1.a;
		var _v2 = _v1.b;
		var whereClause = _v2.a;
		return A3(
			$elm$core$Result$map2,
			F2(
				function (columns, tables) {
					return {W: columns, jr: tables, gm: whereClause};
				}),
			A2(
				$elm$core$Result$andThen,
				function (cols) {
					return A2(
						$elm$core$Result$fromMaybe,
						_List_fromArray(
							['Select can\'t have empty columns']),
						$author$project$Libs$Nel$fromList(cols));
				},
				$author$project$Libs$List$resultSeq(
					A2(
						$elm$core$List$map,
						$author$project$DataSources$SqlParser$Parsers$Select$parseSelectColumn,
						A2(
							$elm$core$List$map,
							$elm$core$String$trim,
							$author$project$DataSources$SqlParser$Utils$Helpers$commaSplit(columnsStr))))),
			$author$project$Libs$List$resultSeq(
				A2(
					$elm$core$List$map,
					$author$project$DataSources$SqlParser$Parsers$Select$parseSelectTable,
					$author$project$Libs$Maybe$toList(tablesStr))));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				['Can\'t parse select: \'' + (select + '\'')]));
	}
};
var $author$project$DataSources$SqlParser$Parsers$CreateView$parseView = function (statement) {
	var _v0 = A2(
		$author$project$Libs$Regex$matches,
		'^CREATE (MATERIALIZED )?VIEW\\s+(?:(?<schema>[^ .]+)\\.)?(?<table>[^ ]+)\\s+AS\\s+(WITH .*)?(?<select>SELECT .+?)(?:\\s+(?<extra>WITH (?:NO )?DATA))?;$',
		$author$project$DataSources$SqlParser$Utils$Helpers$buildSqlLine(statement));
	if ((((((((_v0.b && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.a.$)) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && (!_v0.b.b.b.b.a.$)) && _v0.b.b.b.b.b.b) && (!_v0.b.b.b.b.b.b.b)) {
		var materialized = _v0.a;
		var _v1 = _v0.b;
		var schema = _v1.a;
		var _v2 = _v1.b;
		var table = _v2.a.a;
		var _v3 = _v2.b;
		var _v4 = _v3.b;
		var select = _v4.a.a;
		var _v5 = _v4.b;
		var extra = _v5.a;
		return A2(
			$elm$core$Result$map,
			function (parsedSelect) {
				return {
					e9: extra,
					fA: !_Utils_eq(materialized, $elm$core$Maybe$Nothing),
					E: A2($elm$core$Maybe$map, $author$project$DataSources$SqlParser$Utils$Helpers$buildSchemaName, schema),
					c9: parsedSelect,
					G: $author$project$DataSources$SqlParser$Utils$Helpers$buildTableName(table)
				};
			},
			$author$project$DataSources$SqlParser$Parsers$Select$parseSelect(select));
	} else {
		return $elm$core$Result$Err(
			_List_fromArray(
				[
					'Can\'t parse create view: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]));
	}
};
var $author$project$DataSources$SqlParser$StatementParser$parse = function (statement) {
	var firstLine = $elm$core$String$toUpper(
		$elm$core$String$trim(statement.cK.dh));
	return A2(
		$elm$core$Result$map,
		function (cmd) {
			return _Utils_Tuple2(statement, cmd);
		},
		A2($elm$core$String$startsWith, 'CREATE TABLE ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$CreateTable,
			$author$project$DataSources$SqlParser$Parsers$CreateTable$parseCreateTable(statement)) : (A2($elm$core$String$startsWith, 'CREATE VIEW ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$CreateView,
			$author$project$DataSources$SqlParser$Parsers$CreateView$parseView(statement)) : (A2($elm$core$String$startsWith, 'CREATE MATERIALIZED VIEW ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$CreateView,
			$author$project$DataSources$SqlParser$Parsers$CreateView$parseView(statement)) : (A2($elm$core$String$startsWith, 'ALTER TABLE ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$AlterTable,
			$author$project$DataSources$SqlParser$Parsers$AlterTable$parseAlterTable(statement)) : (A2($elm$core$String$startsWith, 'CREATE INDEX ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$CreateIndex,
			$author$project$DataSources$SqlParser$Parsers$CreateIndex$parseCreateIndex(statement)) : (A2($elm$core$String$startsWith, 'CREATE UNIQUE INDEX ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$CreateUnique,
			$author$project$DataSources$SqlParser$Parsers$CreateUnique$parseCreateUniqueIndex(statement)) : (A2($elm$core$String$startsWith, 'COMMENT ON TABLE ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$TableComment,
			$author$project$DataSources$SqlParser$Parsers$Comment$parseTableComment(statement)) : (A2($elm$core$String$startsWith, 'COMMENT ON COLUMN ', firstLine) ? A2(
			$elm$core$Result$map,
			$author$project$DataSources$SqlParser$StatementParser$ColumnComment,
			$author$project$DataSources$SqlParser$Parsers$Comment$parseColumnComment(statement)) : (A2($elm$core$String$startsWith, 'ALTER COLUMN ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE OR REPLACE VIEW ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'COMMENT ON VIEW ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER INDEX ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'COMMENT ON INDEX ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE TYPE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER TYPE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'DROP TYPE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'COMMENT ON TYPE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : ((A2($elm$core$String$startsWith, 'CREATE FUNCTION ', firstLine) || A2($elm$core$String$startsWith, 'CREATE OR REPLACE FUNCTION ', firstLine)) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER FUNCTION ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE OPERATOR ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER OPERATOR ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE DATABASE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'DROP DATABASE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE SCHEMA ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER SCHEMA ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'COMMENT ON SCHEMA ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'DROP SCHEMA ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'DROP TABLE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'LOCK TABLES ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'UNLOCK TABLES;', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE EXTENSION ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'COMMENT ON EXTENSION ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE TEXT SEARCH CONFIGURATION ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER TEXT SEARCH CONFIGURATION ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE SEQUENCE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER SEQUENCE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE TRIGGER ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'GRANT ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'REVOKE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'SELECT ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'INSERT INTO ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'START TRANSACTION', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'CREATE AGGREGATE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'ALTER AGGREGATE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'USE ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'PRAGMA ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'BEGIN', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'COMMIT', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'SET ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'GO ', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, 'END', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : (A2($elm$core$String$startsWith, '$$', firstLine) ? $elm$core$Result$Ok(
			$author$project$DataSources$SqlParser$StatementParser$Ignored(statement)) : $elm$core$Result$Err(
			_List_fromArray(
				[
					'Statement not handled: \'' + ($author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(statement) + '\'')
				]))))))))))))))))))))))))))))))))))))))))))))))))))))));
};
var $author$project$DataSources$SqlParser$FileParser$parseCommand = function (statement) {
	return A2(
		$elm$core$Result$map,
		function (_v0) {
			var c = _v0.b;
			return c;
		},
		$author$project$DataSources$SqlParser$StatementParser$parse(statement));
};
var $author$project$DataSources$SqlParser$FileParser$parseLines = function (fileContent) {
	return A2(
		$elm$core$String$split,
		'\n',
		A3(
			$elm$core$String$replace,
			'\u000D',
			'\n',
			A3($elm$core$String$replace, '\u000D\n', '\n', fileContent)));
};
var $author$project$DataSources$SqlParser$FileParser$buildSqlLines = function (lines) {
	return A2(
		$elm$core$List$indexedMap,
		F2(
			function (i, line) {
				return {hK: i, dh: line};
			}),
		lines);
};
var $author$project$DataSources$SqlParser$FileParser$addStatement = F2(
	function (lines, statements) {
		if (!lines.b) {
			return statements;
		} else {
			var head = lines.a;
			var tail = lines.b;
			return A2(
				$elm$core$List$cons,
				{cK: head, gc: tail},
				statements);
		}
	});
var $elm$core$String$endsWith = _String_endsWith;
var $author$project$DataSources$SqlParser$FileParser$hasKeyword = F2(
	function (keyword, line) {
		return A2($author$project$Libs$Regex$match, '(^|[^A-Z_\"\'`])' + (keyword + '([^A-Z_\"\'`]|$)'), line.dh) && (!A2($author$project$Libs$Regex$match, '\'.*' + (keyword + '.*\''), line.dh));
	});
var $author$project$DataSources$SqlParser$FileParser$hasOnlyComment = function (line) {
	var _v0 = A2($author$project$Libs$Regex$matches, '^/\\*(.*)\\*/;$', line.dh);
	if (_v0.b && (!_v0.b.b)) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$String$trimRight = _String_trimRight;
var $author$project$DataSources$SqlParser$FileParser$removeTrailingComment = function (line) {
	return $elm$core$String$trimRight(
		A2(
			$elm$core$Maybe$withDefault,
			line,
			A2(
				$author$project$Libs$Maybe$orElse,
				$elm$core$List$head(
					A2($elm$core$String$split, '#', line)),
				$elm$core$List$head(
					A2($elm$core$String$split, '--', line)))));
};
var $author$project$DataSources$SqlParser$FileParser$statementIsEmpty = function (statement) {
	return statement.cK.dh === ';';
};
var $author$project$DataSources$SqlParser$FileParser$buildStatements = function (lines) {
	return A2(
		$author$project$Libs$List$filterNot,
		$author$project$DataSources$SqlParser$FileParser$statementIsEmpty,
		function (_v12) {
			var cur = _v12.a;
			var res = _v12.b;
			return A2($author$project$DataSources$SqlParser$FileParser$addStatement, cur, res);
		}(
			A3(
				$elm$core$List$foldr,
				F2(
					function (line, _v0) {
						var currentStatementLines = _v0.a;
						var statements = _v0.b;
						var nestedBlock = _v0.c;
						var _v1 = _Utils_Tuple2(
							_Utils_Tuple2(
								A2($author$project$DataSources$SqlParser$FileParser$hasKeyword, 'BEGIN', line) || (A2($author$project$DataSources$SqlParser$FileParser$hasKeyword, 'CASE', line) || (A2($author$project$DataSources$SqlParser$FileParser$hasKeyword, 'LOOP', line) || A2($author$project$DataSources$SqlParser$FileParser$hasKeyword, '\\$\\$', line))),
								A2($author$project$DataSources$SqlParser$FileParser$hasKeyword, 'END', line) || A2($author$project$DataSources$SqlParser$FileParser$hasKeyword, '\\$\\$;', line)),
							_Utils_Tuple2(
								A2(
									$elm$core$String$endsWith,
									';',
									$author$project$DataSources$SqlParser$FileParser$removeTrailingComment(line.dh)),
								nestedBlock));
						_v1$5:
						while (true) {
							if (!_v1.b.a) {
								if (_v1.a.a) {
									var _v2 = _v1.a;
									var _v3 = _v1.b;
									return _Utils_Tuple3(
										A2($elm$core$List$cons, line, currentStatementLines),
										statements,
										A2($elm$core$Basics$max, nestedBlock - 1, 0));
								} else {
									if (_v1.a.b) {
										var _v4 = _v1.a;
										var _v5 = _v1.b;
										return _Utils_Tuple3(
											A2($elm$core$List$cons, line, currentStatementLines),
											statements,
											nestedBlock + 1);
									} else {
										break _v1$5;
									}
								}
							} else {
								if (_v1.a.b) {
									if (!_v1.b.b) {
										var _v6 = _v1.a;
										var _v7 = _v1.b;
										return _Utils_Tuple3(
											A2($elm$core$List$cons, line, _List_Nil),
											A2($author$project$DataSources$SqlParser$FileParser$addStatement, currentStatementLines, statements),
											nestedBlock + 1);
									} else {
										var _v8 = _v1.a;
										var _v9 = _v1.b;
										return _Utils_Tuple3(
											A2($elm$core$List$cons, line, currentStatementLines),
											statements,
											nestedBlock + 1);
									}
								} else {
									if (!_v1.b.b) {
										var _v10 = _v1.a;
										var _v11 = _v1.b;
										return _Utils_Tuple3(
											A2($elm$core$List$cons, line, _List_Nil),
											A2($author$project$DataSources$SqlParser$FileParser$addStatement, currentStatementLines, statements),
											nestedBlock);
									} else {
										break _v1$5;
									}
								}
							}
						}
						return _Utils_Tuple3(
							A2($elm$core$List$cons, line, currentStatementLines),
							statements,
							nestedBlock);
					}),
				_Utils_Tuple3(_List_Nil, _List_Nil, 0),
				A2(
					$elm$core$List$filter,
					function (line) {
						return !($elm$core$String$isEmpty(
							$elm$core$String$trim(line.dh)) || (A2(
							$elm$core$String$startsWith,
							'--',
							$elm$core$String$trim(line.dh)) || (A2(
							$elm$core$String$startsWith,
							'#',
							$elm$core$String$trim(line.dh)) || $author$project$DataSources$SqlParser$FileParser$hasOnlyComment(line))));
					},
					lines))));
};
var $author$project$DataSources$SqlParser$FileParser$parseStatements = function (lines) {
	return $author$project$DataSources$SqlParser$FileParser$buildStatements(
		$author$project$DataSources$SqlParser$FileParser$buildSqlLines(lines));
};
var $author$project$Services$SqlSourceUpload$parsingCptInc = function (model) {
	return _Utils_update(
		model,
		{bJ: model.bJ + 1});
};
var $author$project$Services$SqlSourceUpload$parsingUpdate = F2(
	function (msg, model) {
		return A2(
			$elm$core$Tuple$mapFirst,
			$author$project$Services$SqlSourceUpload$parsingCptInc,
			function () {
				switch (msg) {
					case 0:
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									fy: $elm$core$Maybe$Just(
										$author$project$DataSources$SqlParser$FileParser$parseLines(model.cJ))
								}),
							model.U(1));
					case 1:
						return A3(
							$author$project$Libs$Maybe$mapOrElse,
							function (l) {
								return function (statements) {
									return _Utils_Tuple2(
										_Utils_update(
											model,
											{
												bs: $elm$core$Maybe$Just(
													$author$project$Libs$Dict$fromIndexedList(statements))
											}),
										model.U(2));
								}(
									$author$project$DataSources$SqlParser$FileParser$parseStatements(l));
							},
							_Utils_Tuple2(
								model,
								model.U(1)),
							model.fy);
					case 2:
						var index = $elm$core$Dict$size(
							A2($elm$core$Maybe$withDefault, $elm$core$Dict$empty, model.an));
						return A2(
							$elm$core$Maybe$withDefault,
							_Utils_Tuple2(
								model,
								model.U(3)),
							A2(
								$elm$core$Maybe$map,
								function (s) {
									return _Utils_Tuple2(
										_Utils_update(
											model,
											{
												an: $elm$core$Maybe$Just(
													A3(
														$elm$core$Dict$insert,
														index,
														_Utils_Tuple2(
															s,
															$author$project$DataSources$SqlParser$FileParser$parseCommand(s)),
														A2($elm$core$Maybe$withDefault, $elm$core$Dict$empty, model.an)))
											}),
										model.U(2));
								},
								A2(
									$elm$core$Dict$get,
									index,
									A2($elm$core$Maybe$withDefault, $elm$core$Dict$empty, model.bs))));
					default:
						return A2(
							$elm$core$Maybe$withDefault,
							_Utils_Tuple2(model, model.ds),
							A2(
								$elm$core$Maybe$map,
								function (_v1) {
									var s = _v1.a;
									var c = _v1.b;
									if (!c.$) {
										var cmd = c.a;
										var _v3 = A2(
											$author$project$DataSources$SqlParser$FileParser$evolve,
											_Utils_Tuple2(s, cmd),
											A2($elm$core$Maybe$withDefault, $elm$core$Dict$empty, model.E));
										if (!_v3.$) {
											var schema = _v3.a;
											return _Utils_Tuple2(
												_Utils_update(
													model,
													{
														E: $elm$core$Maybe$Just(schema),
														ag: model.ag + 1
													}),
												model.U(3));
										} else {
											var errors = _v3.a;
											return _Utils_Tuple2(
												_Utils_update(
													model,
													{
														aB: A2($elm$core$List$cons, errors, model.aB),
														ag: model.ag + 1
													}),
												model.U(3));
										}
									} else {
										return _Utils_Tuple2(
											_Utils_update(
												model,
												{ag: model.ag + 1}),
											model.U(3));
									}
								},
								A2(
									$elm$core$Dict$get,
									model.ag,
									A2($elm$core$Maybe$withDefault, $elm$core$Dict$empty, model.an))));
				}
			}());
	});
var $author$project$Ports$GetLocalFile = F3(
	function (a, b, c) {
		return {$: 13, a: a, b: b, c: c};
	});
var $author$project$Ports$readLocalFile = F3(
	function (project, source, file) {
		return $author$project$Ports$messageToJs(
			A3($author$project$Ports$GetLocalFile, project, source, file));
	});
var $author$project$Ports$GetRemoteFile = F4(
	function (a, b, c, d) {
		return {$: 14, a: a, b: b, c: c, d: d};
	});
var $author$project$Ports$readRemoteFile = F4(
	function (project, source, url, sample) {
		return $author$project$Ports$messageToJs(
			A4($author$project$Ports$GetRemoteFile, project, source, url, sample));
	});
var $author$project$Services$SqlSourceUpload$update = F3(
	function (msg, wrap, model) {
		switch (msg.$) {
			case 0:
				var url = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							f1: A3(
								$author$project$Libs$Bool$cond,
								url === '',
								$elm$core$Maybe$Nothing,
								$elm$core$Maybe$Just(url))
						}),
					$elm$core$Platform$Cmd$none);
			case 1:
				var file = msg.a;
				return _Utils_Tuple2(
					function (m) {
						return _Utils_update(
							m,
							{
								da: $elm$core$Maybe$Just(file)
							});
					}(
						A2($author$project$Services$SqlSourceUpload$init, model.bm, model.F)),
					A3(
						$author$project$Ports$readLocalFile,
						model.bm,
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.t;
							},
							model.F),
						file));
			case 2:
				var url = msg.a;
				return _Utils_Tuple2(
					function (m) {
						return _Utils_update(
							m,
							{
								f1: $elm$core$Maybe$Just(url)
							});
					}(
						A2($author$project$Services$SqlSourceUpload$init, model.bm, model.F)),
					A4(
						$author$project$Ports$readRemoteFile,
						model.bm,
						A2(
							$elm$core$Maybe$map,
							function ($) {
								return $.t;
							},
							model.F),
						url,
						$elm$core$Maybe$Nothing));
			case 3:
				var projectId = msg.a;
				var sourceInfo = msg.b;
				var fileContent = msg.c;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							hM: $elm$core$Maybe$Just(
								_Utils_Tuple3(projectId, sourceInfo, fileContent)),
							c0: $elm$core$Maybe$Just(
								A3(
									$author$project$Services$SqlSourceUpload$parsingInit,
									fileContent,
									A2($elm$core$Basics$composeR, $author$project$Services$SqlSourceUpload$ParseMsg, wrap),
									wrap($author$project$Services$SqlSourceUpload$BuildSource)))
						}),
					$author$project$Libs$Task$send(
						wrap(
							$author$project$Services$SqlSourceUpload$ParseMsg(0))));
			case 4:
				var parseMsg = msg.a;
				return A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Maybe$map,
						function (p) {
							return function (_v1) {
								var parsed = _v1.a;
								var message = _v1.b;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{
											c0: $elm$core$Maybe$Just(parsed)
										}),
									A3(
										$author$project$Libs$Bool$cond,
										A2($elm$core$Basics$modBy, 342, parsed.bJ) === 1,
										A2($author$project$Libs$Task$sendAfter, 1, message),
										$author$project$Libs$Task$send(message)));
							}(
								A2($author$project$Services$SqlSourceUpload$parsingUpdate, parseMsg, p));
						},
						model.c0));
			case 5:
				var htmlId = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapParsedSchemaM,
						$author$project$Services$Lenses$mapShow(
							function (s) {
								return A3(
									$author$project$Libs$Bool$cond,
									_Utils_eq(s, htmlId),
									'',
									htmlId);
							}),
						model),
					$elm$core$Platform$Cmd$none);
			default:
				return A2(
					$elm$core$Maybe$withDefault,
					_Utils_Tuple2(model, $elm$core$Platform$Cmd$none),
					A2(
						$elm$core$Maybe$map,
						function (_v3) {
							var parsedSchema = _v3.a;
							var source = _v3.b;
							return _Utils_Tuple2(
								_Utils_update(
									model,
									{
										ej: $elm$core$Maybe$Just(source)
									}),
								$author$project$Ports$track(
									A2($author$project$Track$parsedSource, parsedSchema, source)));
						},
						A2(
							$elm$core$Maybe$andThen,
							function (parsedSchema) {
								return A4(
									$elm$core$Maybe$map3,
									F3(
										function (_v2, lines, schema) {
											var sourceInfo = _v2.b;
											return _Utils_Tuple2(
												parsedSchema,
												A3($author$project$DataSources$SqlParser$ProjectAdapter$buildSourceFromSql, sourceInfo, lines, schema));
										}),
									model.hM,
									parsedSchema.fy,
									parsedSchema.E);
							},
							model.c0)));
		}
	});
var $author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$handleProjectSettings = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setSettings,
						$elm$core$Maybe$Just(
							{t: $author$project$Conf$ids.jb}),
						model),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$Libs$Task$sendAfter,
								1,
								$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.jb)),
								$author$project$Ports$track($author$project$Track$openSettings)
							])));
			case 1:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setSettings, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
			case 2:
				var source = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						A2(
							$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSource,
							source.t,
							$author$project$Services$Lenses$mapEnabled($elm$core$Basics$not)),
						model),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$observeTablesSize(
								A3(
									$author$project$Libs$Maybe$mapOrElse,
									function ($) {
										return $.ca;
									},
									_List_Nil,
									model.ha)),
								$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastInfo(
									'Source ' + (source.cW + (' set to ' + (A3($author$project$Libs$Bool$cond, source.e6, 'hidden', 'visible') + '.')))))
							])));
			case 3:
				var source = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSources(
							$elm$core$List$filter(
								function (s) {
									return !_Utils_eq(s.t, source.t);
								})),
						model),
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Source ' + (source.cW + ' has been deleted from your project.'))));
			case 4:
				var source = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setSourceUpload,
						$elm$core$Maybe$Just(
							{
								t: $author$project$Conf$ids.jk,
								iC: A2(
									$author$project$Services$SqlSourceUpload$init,
									A2(
										$elm$core$Maybe$map,
										function (p) {
											return p.bm.t;
										},
										model.ha),
									source)
							}),
						model),
					A2(
						$author$project$Libs$Task$sendAfter,
						1,
						$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.jk)));
			case 5:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setSourceUpload, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
			case 6:
				var message = msg.a;
				return A2(
					$author$project$Services$Lenses$mapSourceUploadMCmd,
					$author$project$Services$Lenses$mapParsingCmd(
						A2(
							$author$project$Services$SqlSourceUpload$update,
							message,
							A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg))),
					model);
			case 7:
				var source = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						A2(
							$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSource,
							source.t,
							$author$project$Models$Project$Source$refreshWith(source)),
						model),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
									$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadClose))),
								$author$project$Ports$track(
								$author$project$Track$refreshSource(source))
							])));
			case 8:
				var source = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSources(
							function (sources) {
								return _Utils_ap(
									sources,
									_List_fromArray(
										[source]));
							}),
						model),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
									$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadClose))),
								$author$project$Ports$track(
								$author$project$Track$addSource(source))
							])));
			case 9:
				var schema = msg.a;
				return function (m) {
					return _Utils_Tuple2(
						m,
						$author$project$Ports$observeTablesSize(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function ($) {
									return $.ca;
								},
								_List_Nil,
								m.ha)));
				}(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings(
							$author$project$Services$Lenses$mapRemovedSchemas(
								$author$project$Libs$List$toggle(schema))),
						model));
			case 10:
				return function (m) {
					return _Utils_Tuple2(
						m,
						$author$project$Ports$observeTablesSize(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function ($) {
									return $.ca;
								},
								_List_Nil,
								m.ha)));
				}(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings(
							$author$project$Services$Lenses$mapRemoveViews($elm$core$Basics$not)),
						model));
			case 11:
				var values = msg.a;
				return function (m) {
					return _Utils_Tuple2(
						m,
						$author$project$Ports$observeTablesSize(
							A3(
								$author$project$Libs$Maybe$mapOrElse,
								function ($) {
									return $.ca;
								},
								_List_Nil,
								m.ha)));
				}(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings(
							A2(
								$elm$core$Basics$composeR,
								$author$project$Services$Lenses$setRemovedTables(values),
								$author$project$Models$Project$ProjectSettings$fillFindPath)),
						model));
			case 12:
				var values = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						function (e) {
							return A2(
								$author$project$Services$Lenses$mapTableProps,
								A2($author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$hideColumns, e.jr, e.dc.X),
								e);
						},
						A2(
							$author$project$Services$Lenses$mapErdM,
							$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings(
								A2(
									$elm$core$Basics$composeR,
									$author$project$Services$Lenses$mapHiddenColumns(
										$author$project$Services$Lenses$setList(values)),
									$author$project$Models$Project$ProjectSettings$fillFindPath)),
							model)),
					$elm$core$Platform$Cmd$none);
			case 13:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						function (e) {
							return A2(
								$author$project$Services$Lenses$mapTableProps,
								A2($author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$hideColumns, e.jr, e.dc.X),
								e);
						},
						A2(
							$author$project$Services$Lenses$mapErdM,
							$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings(
								$author$project$Services$Lenses$mapHiddenColumns(
									$author$project$Services$Lenses$mapProps($elm$core$Basics$not))),
							model)),
					$elm$core$Platform$Cmd$none);
			case 14:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						function (e) {
							return A2(
								$author$project$Services$Lenses$mapTableProps,
								A2($author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$hideColumns, e.jr, e.dc.X),
								e);
						},
						A2(
							$author$project$Services$Lenses$mapErdM,
							$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings(
								$author$project$Services$Lenses$mapHiddenColumns(
									$author$project$Services$Lenses$mapRelations($elm$core$Basics$not))),
							model)),
					$elm$core$Platform$Cmd$none);
			case 15:
				var order = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						function (e) {
							return A2(
								$author$project$Services$Lenses$mapTableProps,
								A2($author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$sortColumns, order, e),
								A2(
									$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings,
									$author$project$Services$Lenses$setColumnOrder(order),
									e));
						},
						model),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						function (e) {
							return A2(
								$author$project$PagesComponents$Projects$Id_$Models$Erd$mapSettings,
								$author$project$Services$Lenses$mapColumnBasicTypes($elm$core$Basics$not),
								e);
						},
						model),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Services$Lenses$setSharing = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.jc;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{jc: value});
		}));
var $author$project$Services$Lenses$mapSharingM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.jc;
	},
	$author$project$Services$Lenses$setSharing);
var $author$project$Track$openSharing = {g6: _List_Nil, e6: true, cW: 'open-sharing'};
var $author$project$PagesComponents$Projects$Id_$Updates$Sharing$handleSharing = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setSharing,
						$elm$core$Maybe$Just(
							{
								t: $author$project$Conf$ids.jd,
								as: A2(
									$elm$core$Maybe$withDefault,
									'',
									A2(
										$elm$core$Maybe$andThen,
										function ($) {
											return $.eO;
										},
										model.ha)),
								h_: $author$project$PagesComponents$Projects$Id_$Models$EmbedMode$layout,
								jH: ''
							}),
						model),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2(
								$author$project$Libs$Task$sendAfter,
								1,
								$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.jd)),
								$author$project$Ports$track($author$project$Track$openSharing)
							])));
			case 1:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setSharing, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
			case 2:
				var url = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapSharingM,
						function (s) {
							return _Utils_update(
								s,
								{jH: url});
						},
						model),
					$elm$core$Platform$Cmd$none);
			case 3:
				var layout = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapSharingM,
						function (s) {
							return _Utils_update(
								s,
								{as: layout});
						},
						model),
					$elm$core$Platform$Cmd$none);
			default:
				var mode = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapSharingM,
						function (s) {
							return _Utils_update(
								s,
								{h_: mode});
						},
						model),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Services$Lenses$setVirtualRelation = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.jI;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{jI: value});
		}));
var $author$project$Services$Lenses$mapVirtualRelationM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.jI;
	},
	$author$project$Services$Lenses$setVirtualRelation);
var $author$project$Services$Lenses$setMouse = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.h0;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{h0: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Updates$VirtualRelation$handleVirtualRelation = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setVirtualRelation,
						$elm$core$Maybe$Just(
							{h0: $author$project$Libs$Models$Position$zero, de: $elm$core$Maybe$Nothing}),
						model),
					$elm$core$Platform$Cmd$none);
			case 1:
				var ref = msg.a;
				var pos = msg.b;
				var _v1 = A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.de;
					},
					model.jI);
				if (_v1.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					if (_v1.a.$ === 1) {
						var _v2 = _v1.a;
						return _Utils_Tuple2(
							A2(
								$author$project$Services$Lenses$setVirtualRelation,
								$elm$core$Maybe$Just(
									{
										h0: pos,
										de: $elm$core$Maybe$Just(ref)
									}),
								model),
							$elm$core$Platform$Cmd$none);
					} else {
						var src = _v1.a.a;
						return _Utils_Tuple2(
							A2($author$project$Services$Lenses$setVirtualRelation, $elm$core$Maybe$Nothing, model),
							$author$project$Libs$Task$send(
								A2($author$project$PagesComponents$Projects$Id_$Models$CreateRelation, src, ref)));
					}
				}
			case 2:
				var pos = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapVirtualRelationM,
						$author$project$Services$Lenses$setMouse(pos),
						model),
					$elm$core$Platform$Cmd$none);
			default:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setVirtualRelation, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Libs$Delta$Delta = F2(
	function (dx, dy) {
		return {cH: dx, cI: dy};
	});
var $author$project$Libs$Delta$adjust = F2(
	function (zoom, delta) {
		return A2($author$project$Libs$Delta$Delta, delta.cH * zoom, delta.cI * zoom);
	});
var $author$project$Libs$Delta$move = F2(
	function (position, delta) {
		return A2($author$project$Libs$Models$Position$Position, position.at + delta.cH, position.aD + delta.cI);
	});
var $author$project$Libs$Delta$negate = function (delta) {
	return A2($author$project$Libs$Delta$Delta, -delta.cH, -delta.cI);
};
var $author$project$PagesComponents$Projects$Id_$Updates$Canvas$performZoom = F3(
	function (delta, center, canvas) {
		var newZoom = A3($elm$core$Basics$clamp, $author$project$Conf$canvas.dm.hX, $author$project$Conf$canvas.dm.hT, canvas.dm + delta);
		var zoomFactor = newZoom / canvas.dm;
		var newTop = canvas.iG.aD - ((center.aD - canvas.iG.aD) * (zoomFactor - 1));
		var newLeft = canvas.iG.at - ((center.at - canvas.iG.at) * (zoomFactor - 1));
		return {
			iG: A2($author$project$Libs$Models$Position$Position, newLeft, newTop),
			dm: newZoom
		};
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Canvas$handleWheel = F2(
	function (event, canvas) {
		return event.gZ ? A3($author$project$PagesComponents$Projects$Id_$Updates$Canvas$performZoom, (-event.g2.cI) * $author$project$Conf$canvas.dm.jl, event.iG, canvas) : _Utils_update(
			canvas,
			{
				iG: A2(
					$author$project$Libs$Delta$move,
					canvas.iG,
					A2(
						$author$project$Libs$Delta$adjust,
						canvas.dm,
						$author$project$Libs$Delta$negate(event.g2)))
			});
	});
var $author$project$PagesComponents$Projects$Id_$Models$DragState$hasMoved = function (dragging) {
	return !_Utils_eq(dragging.Y, dragging.fw);
};
var $author$project$Services$Lenses$setRelatedTables = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iS;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iS: value});
		}));
var $author$project$Services$Lenses$mapRelatedTables = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.iS;
	},
	$author$project$Services$Lenses$setRelatedTables);
var $author$project$Services$Lenses$setShown = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.f4;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{f4: value});
		}));
var $author$project$Services$Lenses$mapShown = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.f4;
	},
	$author$project$Services$Lenses$setShown);
var $author$project$PagesComponents$Projects$Id_$Updates$Table$hideAllTables = function (erd) {
	return A2(
		$author$project$Services$Lenses$setShownTables,
		_List_Nil,
		A2(
			$author$project$Services$Lenses$mapTableProps,
			$elm$core$Dict$map(
				function (_v0) {
					return $author$project$Services$Lenses$mapRelatedTables(
						$elm$core$Dict$map(
							function (_v1) {
								return $author$project$Services$Lenses$mapShown(
									function (_v2) {
										return false;
									});
							}));
				}),
			erd));
};
var $author$project$PagesComponents$Projects$Id_$Updates$Table$hideColumn = F3(
	function (table, column, erd) {
		return A2(
			$author$project$Services$Lenses$mapTableProps,
			A2(
				$author$project$Libs$Dict$alter,
				table,
				$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShownColumns(
					$elm$core$List$filter(
						function (c) {
							return !_Utils_eq(c, column);
						}))),
			erd);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$updateColumns = F3(
	function (id, update, erd) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (table) {
				return A2(
					$author$project$Services$Lenses$mapTableProps,
					A2(
						$author$project$Libs$Dict$alter,
						id,
						$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShownColumns(
							update(table))),
					erd);
			},
			erd,
			A2($elm$core$Dict$get, id, erd.jr));
	});
var $author$project$Models$Project$Relation$withLink = F3(
	function (table, column, relations) {
		return A2(
			$elm$core$List$filter,
			function (r) {
				return (_Utils_eq(r.de.G, table) && _Utils_eq(r.de.r, column)) || (_Utils_eq(r.fW.G, table) && _Utils_eq(r.fW.r, column));
			},
			relations);
	});
var $author$project$Models$Project$Relation$withTableLink = F2(
	function (table, relations) {
		return A2(
			$elm$core$List$filter,
			function (r) {
				return _Utils_eq(r.de.G, table) || _Utils_eq(r.fW.G, table);
			},
			relations);
	});
var $author$project$Libs$List$zipWith = F2(
	function (transform, list) {
		return A2(
			$elm$core$List$map,
			function (a) {
				return _Utils_Tuple2(
					a,
					transform(a));
			},
			list);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$hideColumns = F3(
	function (id, kind, erd) {
		return A3(
			$author$project$PagesComponents$Projects$Id_$Updates$Table$updateColumns,
			id,
			F2(
				function (table, columns) {
					return function (tableRelations) {
						return A2(
							$elm$core$List$map,
							$elm$core$Tuple$first,
							A2(
								$elm$core$List$filter,
								function (_v0) {
									var name = _v0.a;
									var col = _v0.b;
									var _v1 = _Utils_Tuple2(kind, col);
									_v1$4:
									while (true) {
										switch (_v1.a) {
											case 'relations':
												if (!_v1.b.$) {
													return $author$project$Libs$List$nonEmpty(
														A3($author$project$Models$Project$Relation$withLink, id, name, tableRelations));
												} else {
													break _v1$4;
												}
											case 'regular':
												if (!_v1.b.$) {
													return $author$project$Libs$Maybe$isJust(
														A2($author$project$Models$Project$Table$inPrimaryKey, table, name)) || ($author$project$Libs$List$nonEmpty(
														A3($author$project$Models$Project$Relation$withLink, id, name, tableRelations)) || ($author$project$Libs$List$nonEmpty(
														A2($author$project$Models$Project$Table$inUniques, table, name)) || $author$project$Libs$List$nonEmpty(
														A2($author$project$Models$Project$Table$inIndexes, table, name))));
												} else {
													break _v1$4;
												}
											case 'nullable':
												if (!_v1.b.$) {
													var c = _v1.b.a;
													return !c.av;
												} else {
													break _v1$4;
												}
											case 'all':
												return false;
											default:
												break _v1$4;
										}
									}
									return false;
								},
								A2(
									$author$project$Libs$List$zipWith,
									function (name) {
										return A2($author$project$Libs$Ned$get, name, table.W);
									},
									columns)));
					}(
						A2($author$project$Models$Project$Relation$withTableLink, id, erd.iU));
				}),
			erd);
	});
var $author$project$Services$Lenses$mapShownTables = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.ca;
	},
	$author$project$Services$Lenses$setShownTables);
var $author$project$PagesComponents$Projects$Id_$Updates$Table$hideTable = F2(
	function (id, erd) {
		return A2(
			$author$project$Services$Lenses$mapShownTables,
			$elm$core$List$filter(
				function (t) {
					return !_Utils_eq(t, id);
				}),
			A2(
				$author$project$Services$Lenses$mapTableProps,
				$elm$core$Dict$map(
					function (_v0) {
						return $author$project$Services$Lenses$mapRelatedTables(
							A2(
								$elm$core$Dict$update,
								id,
								$elm$core$Maybe$map(
									$author$project$Services$Lenses$mapShown(
										function (_v1) {
											return false;
										}))));
					}),
				erd));
	});
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $author$project$PagesComponents$Projects$Id_$Updates$Table$getRelations = F2(
	function (table, name) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (c) {
				return _Utils_ap(c.ay, c.a8);
			},
			_List_Nil,
			A2(
				$elm$core$Maybe$andThen,
				function (t) {
					return A2($author$project$Libs$Ned$get, name, t.W);
				},
				table));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$isSame = F2(
	function (ref, erdRef) {
		return _Utils_eq(ref.G, erdRef.G) && _Utils_eq(ref.r, erdRef.r);
	});
var $author$project$Services$Lenses$setHighlighted = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.fj;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{fj: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setHighlightedColumns = F2(
	function (highlightedColumns, props) {
		return _Utils_eq(props.bN, highlightedColumns) ? props : _Utils_update(
			props,
			{
				gS: A2(
					$elm$core$Dict$map,
					function (c) {
						return $author$project$Services$Lenses$setHighlighted(
							A2($elm$core$Set$member, c, highlightedColumns));
					},
					props.gS),
				bN: highlightedColumns
			});
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$hoverColumn = F4(
	function (column, enter, erd, props) {
		return A2(
			$elm$core$Dict$map,
			F2(
				function (id, p) {
					return function (highlightedColumns) {
						return A2($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setHighlightedColumns, highlightedColumns, p);
					}(
						enter ? function (table) {
							return $elm$core$Set$fromList(
								A2(
									$elm$core$List$filter,
									function (c) {
										return (_Utils_eq(column.G, id) && _Utils_eq(column.r, c)) || A2(
											$elm$core$List$any,
											$author$project$PagesComponents$Projects$Id_$Updates$Table$isSame(column),
											A2($author$project$PagesComponents$Projects$Id_$Updates$Table$getRelations, table, c));
									},
									p.bq));
						}(
							A2($elm$core$Dict$get, id, erd.jr)) : $elm$core$Set$empty);
				}),
			props);
	});
var $author$project$Libs$List$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var $author$project$Libs$List$dropUntil = F2(
	function (predicate, list) {
		return A2(
			$author$project$Libs$List$dropWhile,
			function (a) {
				return !predicate(a);
			},
			list);
	});
var $author$project$Services$Lenses$setHoverColumn = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bP;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bP: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Updates$Table$hoverNextColumn = F3(
	function (table, column, model) {
		var nextColumn = A2(
			$elm$core$Maybe$andThen,
			function (p) {
				return $elm$core$List$head(
					A2(
						$elm$core$List$drop,
						1,
						A2(
							$author$project$Libs$List$dropUntil,
							function (c) {
								return _Utils_eq(c, column);
							},
							p.bq)));
			},
			A2(
				$elm$core$Maybe$andThen,
				function (e) {
					return A2($elm$core$Dict$get, table, e.bu);
				},
				model.ha));
		return A2(
			$author$project$Services$Lenses$setHoverColumn,
			A2(
				$elm$core$Maybe$map,
				$author$project$Models$Project$ColumnRef$ColumnRef(table),
				nextColumn),
			model);
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setHover = F2(
	function (isHover, props) {
		return _Utils_eq(props.aM, isHover) ? props : _Utils_update(
			props,
			{aM: isHover});
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$hoverTable = F3(
	function (table, enter, props) {
		return A2(
			$elm$core$Dict$map,
			F2(
				function (id, p) {
					return (_Utils_eq(id, table) && (!_Utils_eq(p.aM, enter))) ? A2($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setHover, enter, p) : (((!_Utils_eq(id, table)) && p.aM) ? A2($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setHover, false, p) : p);
				}),
			props);
	});
var $author$project$Services$Lenses$setContextMenu = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.gW;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{gW: value});
		}));
var $author$project$Services$Lenses$mapContextMenuM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.gW;
	},
	$author$project$Services$Lenses$setContextMenu);
var $author$project$Services$Lenses$mapList = F4(
	function (get, key, transform, list) {
		return A2(
			$elm$core$List$map,
			function (item) {
				return _Utils_eq(
					get(item),
					key) ? transform(item) : item;
			},
			list);
	});
var $author$project$Services$Lenses$setMobileMenuOpen = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bi;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bi: value});
		}));
var $author$project$Services$Lenses$mapMobileMenuOpen = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.bi;
	},
	$author$project$Services$Lenses$setMobileMenuOpen);
var $author$project$Services$Lenses$setOpenedDialogs = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iw;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iw: value});
		}));
var $author$project$Services$Lenses$mapOpenedDialogs = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.iw;
	},
	$author$project$Services$Lenses$setOpenedDialogs);
var $author$project$Services$Lenses$setOpenedDropdown = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.aR;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{aR: value});
		}));
var $author$project$Services$Lenses$mapOpenedDropdown = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.aR;
	},
	$author$project$Services$Lenses$setOpenedDropdown);
var $author$project$Services$Lenses$setProject = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bm;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bm: value});
		}));
var $author$project$Services$Lenses$mapProject = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.bm;
	},
	$author$project$Services$Lenses$setProject);
var $author$project$Services$Lenses$setPrompt = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.iL;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{iL: value});
		}));
var $author$project$Services$Lenses$mapPromptM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.iL;
	},
	$author$project$Services$Lenses$setPrompt);
var $author$project$Services$Lenses$setSchemaAnalysis = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.i4;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{i4: value});
		}));
var $author$project$Services$Lenses$mapSchemaAnalysisM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.i4;
	},
	$author$project$Services$Lenses$setSchemaAnalysis);
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapSelected = F2(
	function (transform, props) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setSelected,
			transform(props.bp),
			props);
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setShowHiddenColumns = F2(
	function (showHiddenColumns, props) {
		return _Utils_eq(props.aC, showHiddenColumns) ? props : _Utils_update(
			props,
			{aC: showHiddenColumns});
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShowHiddenColumns = F2(
	function (transform, props) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$setShowHiddenColumns,
			transform(props.aC),
			props);
	});
var $author$project$Services$Lenses$setToasts = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.aW;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{aW: value});
		}));
var $author$project$Services$Lenses$mapToasts = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.aW;
	},
	$author$project$Services$Lenses$setToasts);
var $author$project$Libs$List$addAt = F3(
	function (item, index, list) {
		return (_Utils_cmp(
			index,
			$elm$core$List$length(list)) > -1) ? _Utils_ap(
			list,
			_List_fromArray(
				[item])) : ((index < 0) ? A2($elm$core$List$cons, item, list) : A3(
			$elm$core$List$foldr,
			F2(
				function (a, _v0) {
					var res = _v0.a;
					var i = _v0.b;
					return _Utils_Tuple2(
						A3(
							$author$project$Libs$Bool$cond,
							_Utils_eq(i, index),
							A2(
								$elm$core$List$cons,
								item,
								A2($elm$core$List$cons, a, res)),
							A2($elm$core$List$cons, a, res)),
						i - 1);
				}),
			_Utils_Tuple2(
				_List_Nil,
				$elm$core$List$length(list) - 1),
			list).a);
	});
var $author$project$Libs$List$get = F2(
	function (index, list) {
		return $elm$core$List$head(
			A2($elm$core$List$drop, index, list));
	});
var $author$project$Libs$List$removeAt = F2(
	function (index, list) {
		return A2(
			$elm$core$List$map,
			function (_v1) {
				var a = _v1.b;
				return a;
			},
			A2(
				$elm$core$List$filter,
				function (_v0) {
					var i = _v0.a;
					return !_Utils_eq(i, index);
				},
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (i, a) {
							return _Utils_Tuple2(i, a);
						}),
					list)));
	});
var $author$project$Libs$List$moveIndex = F3(
	function (from, to, list) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (v) {
				return A3(
					$author$project$Libs$List$addAt,
					v,
					to,
					A2($author$project$Libs$List$removeAt, from, list));
			},
			list,
			A2($author$project$Libs$List$get, from, list));
	});
var $author$project$Libs$List$move = F3(
	function (value, position, list) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (index) {
				return A3($author$project$Libs$List$moveIndex, index, position, list);
			},
			list,
			A2(
				$author$project$Libs$List$findIndex,
				function (a) {
					return _Utils_eq(a, value);
				},
				list));
	});
var $author$project$Libs$List$moveBy = F4(
	function (matcher, value, position, list) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (index) {
				return A3($author$project$Libs$List$moveIndex, index, position, list);
			},
			list,
			A3($author$project$Libs$List$findIndexBy, matcher, value, list));
	});
var $author$project$Track$openSchemaAnalysis = {g6: _List_Nil, e6: true, cW: 'open-schema-analysis'};
var $author$project$Ports$SaveProject = function (a) {
	return {$: 10, a: a};
};
var $author$project$Ports$saveProject = function (project) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$SaveProject(project));
};
var $author$project$Services$Lenses$setConfirm = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.a1;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{a1: value});
		}));
var $author$project$Services$Lenses$setDragging = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.cF;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{cF: value});
		}));
var $author$project$Services$Lenses$setInput = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.cO;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{cO: value});
		}));
var $author$project$Services$Lenses$setIsOpen = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.ar;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{ar: value});
		}));
var $author$project$Libs$Models$Position$diff = F2(
	function (to, from) {
		return _Utils_Tuple2(from.at - to.at, from.aD - to.aD);
	});
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Libs$Models$Position$distance = F2(
	function (to, from) {
		return function (_v0) {
			var dx = _v0.a;
			var dy = _v0.b;
			return $elm$core$Basics$sqrt((dx * dx) + (dy * dy));
		}(
			A2($author$project$Libs$Models$Position$diff, to, from));
	});
var $author$project$Services$Lenses$setLast = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.fw;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{fw: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Models$DragState$setLast = F2(
	function (last, dragState) {
		return (A2($author$project$Libs$Models$Position$distance, last, dragState.Y) < 10) ? A2($author$project$Services$Lenses$setLast, dragState.Y, dragState) : A2($author$project$Services$Lenses$setLast, last, dragState);
	});
var $author$project$Services$Lenses$setOpenedPopover = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.c_;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{c_: value});
		}));
var $author$project$Services$Lenses$setText = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.dh;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{dh: value});
		}));
var $author$project$Services$Lenses$setToastIdx = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.jF;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{jF: value});
		}));
var $elm$core$String$foldl = _String_foldl;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $author$project$Libs$String$updateHash = F2(
	function (_char, code) {
		return ((5 + code) + $elm$core$Char$toCode(_char)) << code;
	});
var $author$project$Libs$String$hashCode = function (input) {
	return A3($elm$core$String$foldl, $author$project$Libs$String$updateHash, 5381, input);
};
var $author$project$Libs$String$wordSplit = function (input) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (sep, words) {
				return A2(
					$elm$core$List$concatMap,
					function (word) {
						return A2($elm$core$String$split, sep, word);
					},
					words);
			}),
		_List_fromArray(
			[input]),
		_List_fromArray(
			['_', '-', ' ']));
};
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$computeColor = function (_v0) {
	var table = _v0.b;
	return A2(
		$elm$core$Maybe$withDefault,
		$author$project$Libs$Tailwind$default,
		A2(
			$elm$core$Maybe$andThen,
			function (index) {
				return A2($author$project$Libs$List$get, index, $author$project$Libs$Tailwind$list);
			},
			A2(
				$elm$core$Maybe$map,
				$elm$core$Basics$modBy(
					$elm$core$List$length($author$project$Libs$Tailwind$list)),
				A2(
					$elm$core$Maybe$map,
					$author$project$Libs$String$hashCode,
					$elm$core$List$head(
						$author$project$Libs$String$wordSplit(table))))));
};
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$computeColumns = F4(
	function (settings, relations, table, columns) {
		var tableRelations = A2($author$project$Models$Project$Relation$withTableSrc, table.t, relations);
		return A2(
			$elm$core$List$map,
			function ($) {
				return $.cW;
			},
			A4(
				$author$project$Models$ColumnOrder$sortBy,
				settings.bH,
				table,
				tableRelations,
				A2(
					$author$project$Libs$List$filterNot,
					$author$project$Models$Project$ProjectSettings$hideColumn(settings.X),
					A2(
						$elm$core$List$filterMap,
						function (c) {
							return A2($author$project$Libs$Ned$get, c, table.W);
						},
						columns))));
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$unpack = function (ref) {
	return {r: ref.r, G: ref.G};
};
var $author$project$PagesComponents$Projects$Id_$Models$ErdRelation$unpack = function (relation) {
	return {
		t: relation.t,
		cW: relation.cW,
		aS: relation.aS,
		fW: $author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$unpack(relation.fW),
		de: $author$project$PagesComponents$Projects$Id_$Models$ErdColumnRef$unpack(relation.de)
	};
};
var $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$init = F5(
	function (settings, erdRelations, shownTables, hint, table) {
		var relations = A2($elm$core$List$map, $author$project$PagesComponents$Projects$Id_$Models$ErdRelation$unpack, erdRelations);
		return A4(
			$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$create,
			relations,
			shownTables,
			hint,
			{
				n: $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$computeColor(table.t),
				W: A4(
					$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$computeColumns,
					settings,
					relations,
					table,
					A2(
						$elm$core$List$map,
						function ($) {
							return $.cW;
						},
						$author$project$Libs$Nel$toList(
							$author$project$Libs$Ned$values(table.W)))),
				X: false,
				t: table.t,
				iG: $author$project$Libs$Models$Position$zero,
				bp: false,
				l: $author$project$Libs$Models$Size$zero
			});
	});
var $author$project$Libs$Dict$notMember = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return false;
		} else {
			return true;
		}
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $author$project$Libs$List$notMember = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$all,
			function (a) {
				return !_Utils_eq(a, x);
			},
			xs);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$showAllTables = function (erd) {
	var tablesToInit = A2(
		$elm$core$Dict$map,
		function (_v4) {
			return A4($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$init, erd.dc, erd.iU, erd.ca, $elm$core$Maybe$Nothing);
		},
		A2(
			$elm$core$Dict$filter,
			F2(
				function (id, _v3) {
					return A2($author$project$Libs$Dict$notMember, id, erd.bu);
				}),
			erd.jr));
	var tablesHidden = A2(
		$elm$core$List$filter,
		function (id) {
			return A2($elm$core$Dict$member, id, erd.bu) && A2($author$project$Libs$List$notMember, id, erd.ca);
		},
		$elm$core$Dict$keys(erd.jr));
	return _Utils_Tuple2(
		A2(
			$author$project$Services$Lenses$mapShownTables,
			function (tables) {
				return _Utils_ap(
					$elm$core$Dict$keys(tablesToInit),
					_Utils_ap(tablesHidden, tables));
			},
			A2(
				$author$project$Services$Lenses$mapTableProps,
				$elm$core$Dict$map(
					function (_v0) {
						return $author$project$Services$Lenses$mapRelatedTables(
							$elm$core$Dict$map(
								function (_v1) {
									return $author$project$Services$Lenses$mapShown(
										function (_v2) {
											return true;
										});
								}));
					}),
				A2(
					$author$project$Services$Lenses$mapTableProps,
					$elm$core$Dict$union(tablesToInit),
					erd))),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$observeTablesSize(
					_Utils_ap(
						$elm$core$Dict$keys(tablesToInit),
						tablesHidden))
				])));
};
var $author$project$PagesComponents$Projects$Id_$Updates$Table$showColumn = F3(
	function (table, column, erd) {
		return A2(
			$author$project$Services$Lenses$mapTableProps,
			A2(
				$author$project$Libs$Dict$alter,
				table,
				$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShownColumns(
					function (columns) {
						return _Utils_ap(
							A2(
								$elm$core$List$filter,
								function (c) {
									return !_Utils_eq(c, column);
								},
								columns),
							_List_fromArray(
								[column]));
					})),
			erd);
	});
var $author$project$Libs$Nel$filter = F2(
	function (predicate, nel) {
		return A2(
			$elm$core$List$filter,
			predicate,
			$author$project$Libs$Nel$toList(nel));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$showColumns = F3(
	function (id, kind, erd) {
		return A3(
			$author$project$PagesComponents$Projects$Id_$Updates$Table$updateColumns,
			id,
			F2(
				function (table, columns) {
					return function (tableRelations) {
						return _Utils_ap(
							columns,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.cW;
								},
								A2(
									$elm$core$List$filter,
									function (column) {
										switch (kind) {
											case 'all':
												return true;
											case 'relations':
												return $author$project$Libs$List$nonEmpty(
													A3($author$project$Models$Project$Relation$withLink, id, column.cW, tableRelations));
											default:
												return false;
										}
									},
									A2(
										$author$project$Libs$Nel$filter,
										function (c) {
											return A2($author$project$Libs$List$notMember, c.cW, columns);
										},
										$author$project$Libs$Ned$values(table.W)))));
					}(
						A2($author$project$Models$Project$Relation$withTableLink, id, erd.iU));
				}),
			erd);
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$isShown = F2(
	function (table, erd) {
		return A2($elm$core$List$member, table, erd.ca);
	});
var $author$project$Ports$observeTableSize = function (id) {
	return $author$project$Ports$observeSizes(
		_List_fromArray(
			[
				$author$project$Models$Project$TableId$toHtmlId(id)
			]));
};
var $author$project$PagesComponents$Projects$Id_$Updates$Table$performShowTable = F3(
	function (table, hint, erd) {
		return A2(
			$author$project$Services$Lenses$mapShownTables,
			function (t) {
				return A3(
					$author$project$Libs$Bool$cond,
					A2($elm$core$List$member, table.t, t),
					t,
					A2($elm$core$List$cons, table.t, t));
			},
			A2(
				$author$project$Services$Lenses$mapTableProps,
				$elm$core$Dict$map(
					function (_v0) {
						return $author$project$Services$Lenses$mapRelatedTables(
							A2(
								$elm$core$Dict$update,
								table.t,
								$elm$core$Maybe$map(
									$author$project$Services$Lenses$mapShown(
										function (_v1) {
											return true;
										}))));
					}),
				A2(
					$author$project$Services$Lenses$mapTableProps,
					A2(
						$elm$core$Dict$update,
						table.t,
						$author$project$Libs$Maybe$orElse(
							$elm$core$Maybe$Just(
								A5($author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$init, erd.dc, erd.iU, erd.ca, hint, table)))),
					erd)));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$showTable = F3(
	function (id, hint, erd) {
		var _v0 = A2($elm$core$Dict$get, id, erd.jr);
		if (!_v0.$) {
			var table = _v0.a;
			return A2($author$project$PagesComponents$Projects$Id_$Models$Erd$isShown, id, erd) ? _Utils_Tuple2(
				erd,
				$author$project$Libs$Task$send(
					$author$project$PagesComponents$Projects$Id_$Models$toastInfo(
						'Table ' + ($author$project$Models$Project$TableId$show(id) + ' already shown')))) : _Utils_Tuple2(
				A3($author$project$PagesComponents$Projects$Id_$Updates$Table$performShowTable, table, hint, erd),
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$Ports$observeTableSize(id)
						])));
		} else {
			return _Utils_Tuple2(
				erd,
				$author$project$Libs$Task$send(
					$author$project$PagesComponents$Projects$Id_$Models$toastError(
						'Can\'t show table ' + ($author$project$Models$Project$TableId$show(id) + ': not found'))));
		}
	});
var $author$project$PagesComponents$Projects$Id_$Models$PositionHint$PlaceLeft = function (a) {
	return {$: 0, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$PositionHint$PlaceRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$PositionHint$move = F2(
	function (position, hint) {
		if (!hint.$) {
			var pos = hint.a;
			return $author$project$PagesComponents$Projects$Id_$Models$PositionHint$PlaceLeft(
				A2($author$project$Libs$Models$Position$add, position, pos));
		} else {
			var pos = hint.a;
			var size = hint.b;
			return A2(
				$author$project$PagesComponents$Projects$Id_$Models$PositionHint$PlaceRight,
				A2($author$project$Libs$Models$Position$add, position, pos),
				size);
		}
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$showTables = F3(
	function (ids, hint, erd) {
		return function (_v4) {
			var e = _v4.a;
			var _v5 = _v4.b;
			var found = _v5.a;
			var shown = _v5.b;
			var notFound = _v5.c;
			return _Utils_Tuple2(
				e,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							$author$project$Ports$observeTablesSize(found),
							A3(
							$author$project$Libs$Bool$cond,
							$elm$core$List$isEmpty(shown),
							$elm$core$Platform$Cmd$none,
							$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastInfo(
									'Tables ' + (A2(
										$elm$core$String$join,
										', ',
										A2($elm$core$List$map, $author$project$Models$Project$TableId$show, shown)) + ' are already shown')))),
							A3(
							$author$project$Libs$Bool$cond,
							$elm$core$List$isEmpty(notFound),
							$elm$core$Platform$Cmd$none,
							$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastInfo(
									'Can\'t show tables ' + (A2(
										$elm$core$String$join,
										', ',
										A2($elm$core$List$map, $author$project$Models$Project$TableId$show, notFound)) + ': can\'t found them'))))
						])));
		}(
			A3(
				$elm$core$List$foldl,
				F2(
					function (_v0, _v1) {
						var id = _v0.a;
						var maybeTable = _v0.b;
						var tableHint = _v0.c;
						var e = _v1.a;
						var _v2 = _v1.b;
						var found = _v2.a;
						var shown = _v2.b;
						var notFound = _v2.c;
						if (!maybeTable.$) {
							var table = maybeTable.a;
							return A2($author$project$PagesComponents$Projects$Id_$Models$Erd$isShown, id, erd) ? _Utils_Tuple2(
								e,
								_Utils_Tuple3(
									found,
									A2($elm$core$List$cons, id, shown),
									notFound)) : _Utils_Tuple2(
								A3($author$project$PagesComponents$Projects$Id_$Updates$Table$performShowTable, table, tableHint, e),
								_Utils_Tuple3(
									A2($elm$core$List$cons, id, found),
									shown,
									notFound));
						} else {
							return _Utils_Tuple2(
								e,
								_Utils_Tuple3(
									found,
									shown,
									A2($elm$core$List$cons, id, notFound)));
						}
					}),
				_Utils_Tuple2(
					erd,
					_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil)),
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (i, id) {
							return _Utils_Tuple3(
								id,
								A2($elm$core$Dict$get, id, erd.jr),
								A2(
									$elm$core$Maybe$map,
									$author$project$PagesComponents$Projects$Id_$Models$PositionHint$move(
										{at: 0, aD: $author$project$Conf$ui.jq * i}),
									hint));
						}),
					ids)));
	});
var $author$project$PagesComponents$Projects$Id_$Updates$Table$sortColumns = F3(
	function (id, kind, erd) {
		return A3(
			$author$project$PagesComponents$Projects$Id_$Updates$Table$updateColumns,
			id,
			F2(
				function (table, columns) {
					return A2(
						$elm$core$List$map,
						function ($) {
							return $.cW;
						},
						A4(
							$author$project$Models$ColumnOrder$sortBy,
							kind,
							table,
							erd.iU,
							A2(
								$elm$core$List$filterMap,
								function (name) {
									return A2($author$project$Libs$Ned$get, name, table.W);
								},
								columns)));
				}),
			erd);
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdColumn$unpack = function (column) {
	return {cz: column.cz, cD: column.cD, a9: column.a9, S: column.S, cW: column.cW, av: column.av, aS: column.aS};
};
var $author$project$PagesComponents$Projects$Id_$Models$ErdTable$unpack = function (table) {
	return {
		a$: table.a$,
		W: A2(
			$author$project$Libs$Ned$map,
			function (_v0) {
				return $author$project$PagesComponents$Projects$Id_$Models$ErdColumn$unpack;
			},
			table.W),
		cz: table.cz,
		t: table.t,
		ba: table.ba,
		cW: table.cW,
		aS: table.aS,
		aT: table.aT,
		E: table.E,
		bw: table.bw,
		eQ: table.eQ
	};
};
var $author$project$PagesComponents$Projects$Id_$Models$Erd$unpack = function (erd) {
	var _v0 = A3(
		$author$project$Libs$Maybe$mapOrElse,
		function (l) {
			return _Utils_Tuple2(l.e1, l.gj);
		},
		_Utils_Tuple2(
			$elm$time$Time$millisToPosix(0),
			$elm$time$Time$millisToPosix(0)),
		A2(
			$elm$core$Maybe$andThen,
			function (l) {
				return A2($elm$core$Dict$get, l, erd.d_);
			},
			erd.eO));
	var layoutCreatedAt = _v0.a;
	var layoutUpdatedAt = _v0.b;
	return {
		e1: erd.bm.e1,
		t: erd.bm.t,
		as: A5($author$project$PagesComponents$Projects$Id_$Models$Erd$unpackLayout, erd.dt, erd.bu, erd.ca, layoutCreatedAt, layoutUpdatedAt),
		d_: erd.d_,
		cW: erd.bm.cW,
		iU: A2($elm$core$List$map, $author$project$PagesComponents$Projects$Id_$Models$ErdRelation$unpack, erd.iU),
		dc: erd.dc,
		cc: erd.cc,
		jr: A2(
			$elm$core$Dict$map,
			function (_v1) {
				return $author$project$PagesComponents$Projects$Id_$Models$ErdTable$unpack;
			},
			erd.jr),
		gj: erd.bm.gj,
		eO: erd.eO
	};
};
var $author$project$Track$projectEvent = F2(
	function (eventName, project) {
		return {
			g6: _List_fromArray(
				[
					_Utils_Tuple2(
					'table-count',
					$elm$core$String$fromInt(
						$elm$core$Dict$size(project.jr))),
					_Utils_Tuple2(
					'relation-count',
					$elm$core$String$fromInt(
						$elm$core$List$length(project.iU))),
					_Utils_Tuple2(
					'layout-count',
					$elm$core$String$fromInt(
						$elm$core$Dict$size(project.d_)))
				]),
			e6: true,
			cW: eventName + (A3(
				$author$project$Libs$Maybe$mapOrElse,
				function (_v0) {
					return '-sample';
				},
				'',
				$elm$core$List$head(
					A2(
						$elm$core$List$concatMap,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.fb;
							},
							$author$project$Libs$Maybe$toList),
						project.cc))) + '-project')
		};
	});
var $author$project$Track$updateProject = $author$project$Track$projectEvent('update');
var $author$project$PagesComponents$Projects$Id_$Updates$Canvas$zoomCanvas = F3(
	function (delta, screen, canvas) {
		return A3(
			$author$project$PagesComponents$Projects$Id_$Updates$Canvas$performZoom,
			delta,
			$author$project$Libs$Area$center(
				A2($author$project$Models$Project$CanvasProps$viewport, screen, canvas)),
			canvas);
	});
var $author$project$PagesComponents$Projects$Id_$Updates$update = F5(
	function (currentProject, currentLayout, now, msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapNavbar,
						$author$project$Services$Lenses$mapMobileMenuOpen($elm$core$Basics$not),
						model),
					$elm$core$Platform$Cmd$none);
			case 1:
				var search = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapNavbar,
						$author$project$Services$Lenses$mapSearch(
							A2(
								$elm$core$Basics$composeR,
								$author$project$Services$Lenses$setText(search),
								$author$project$Services$Lenses$setActive(0))),
						model),
					$elm$core$Platform$Cmd$none);
			case 2:
				return model.B.eq ? _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						A3(
							$author$project$Libs$Maybe$mapOrElse,
							function (p) {
								return _List_fromArray(
									[
										$author$project$Ports$saveProject(p),
										$author$project$Libs$Task$send(
										$author$project$PagesComponents$Projects$Id_$Models$toastSuccess('Project saved')),
										$author$project$Ports$track(
										$author$project$Track$updateProject(p))
									]);
							},
							_List_fromArray(
								[
									$author$project$Libs$Task$send(
									$author$project$PagesComponents$Projects$Id_$Models$toastWarning('No project to save'))
								]),
							A2($elm$core$Maybe$map, $author$project$PagesComponents$Projects$Id_$Models$Erd$unpack, model.ha)))) : _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 3:
				var name = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapProject(
							$author$project$Services$Lenses$setName(name)),
						model),
					$elm$core$Platform$Cmd$none);
			case 4:
				var id = msg.a;
				var hint = msg.b;
				return A2(
					$author$project$Services$Lenses$mapErdMCmd,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Table$showTable, id, hint),
					model);
			case 5:
				var ids = msg.a;
				var hint = msg.b;
				return A2(
					$author$project$Services$Lenses$mapErdMCmd,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Table$showTables, ids, hint),
					model);
			case 6:
				return A2($author$project$Services$Lenses$mapErdMCmd, $author$project$PagesComponents$Projects$Id_$Updates$Table$showAllTables, model);
			case 7:
				var id = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Updates$Table$hideTable(id),
						model),
					$elm$core$Platform$Cmd$none);
			case 8:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$mapErdM, $author$project$PagesComponents$Projects$Id_$Updates$Table$hideAllTables, model),
					$elm$core$Platform$Cmd$none);
			case 9:
				var table = msg.a.G;
				var column = msg.a.r;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						A2($author$project$PagesComponents$Projects$Id_$Updates$Table$showColumn, table, column),
						model),
					$elm$core$Platform$Cmd$none);
			case 10:
				var table = msg.a.G;
				var column = msg.a.r;
				return _Utils_Tuple2(
					A3(
						$author$project$PagesComponents$Projects$Id_$Updates$Table$hoverNextColumn,
						table,
						column,
						A2(
							$author$project$Services$Lenses$mapErdM,
							A2($author$project$PagesComponents$Projects$Id_$Updates$Table$hideColumn, table, column),
							model)),
					$elm$core$Platform$Cmd$none);
			case 11:
				var id = msg.a;
				var kind = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						A2($author$project$PagesComponents$Projects$Id_$Updates$Table$showColumns, id, kind),
						model),
					$elm$core$Platform$Cmd$none);
			case 12:
				var id = msg.a;
				var kind = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						A2($author$project$PagesComponents$Projects$Id_$Updates$Table$hideColumns, id, kind),
						model),
					$elm$core$Platform$Cmd$none);
			case 13:
				var id = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapTableProps(
							A2(
								$author$project$Libs$Dict$alter,
								id,
								$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShowHiddenColumns($elm$core$Basics$not))),
						model),
					$elm$core$Platform$Cmd$none);
			case 14:
				var tableId = msg.a;
				var ctrl = msg.b;
				return A2($author$project$Libs$Maybe$any, $author$project$PagesComponents$Projects$Id_$Models$DragState$hasMoved, model.cF) ? _Utils_Tuple2(model, $elm$core$Platform$Cmd$none) : _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapTableProps(
							$elm$core$Dict$map(
								function (id) {
									return $author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapSelected(
										function (s) {
											return A3(
												$author$project$Libs$Bool$cond,
												_Utils_eq(id, tableId),
												!s,
												A3($author$project$Libs$Bool$cond, ctrl, s, false));
										});
								})),
						model),
					$elm$core$Platform$Cmd$none);
			case 15:
				var id = msg.a;
				var delta = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapTableProps(
							function (tables) {
								return A2(
									$elm$core$Dict$map,
									F2(
										function (_v1, t) {
											return A3(
												$author$project$Libs$Bool$cond,
												_Utils_eq(t.t, id),
												A2(
													$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapPosition,
													function (p) {
														return A2($author$project$Libs$Delta$move, p, delta);
													},
													t),
												t);
										}),
									tables);
							}),
						model),
					$elm$core$Platform$Cmd$none);
			case 16:
				var id = msg.a;
				var index = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapShownTables(
							function (tables) {
								return A3(
									$author$project$Libs$List$move,
									id,
									($elm$core$List$length(tables) - 1) - index,
									tables);
							}),
						model),
					$elm$core$Platform$Cmd$none);
			case 17:
				var id = msg.a;
				var kind = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						A2($author$project$PagesComponents$Projects$Id_$Updates$Table$sortColumns, id, kind),
						model),
					$elm$core$Platform$Cmd$none);
			case 18:
				var column = msg.a;
				var position = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapTableProps(
							A2(
								$author$project$Libs$Dict$alter,
								column.G,
								$author$project$PagesComponents$Projects$Id_$Models$ErdTableProps$mapShownColumns(
									A3($author$project$Libs$List$moveBy, $elm$core$Basics$identity, column.r, position)))),
						model),
					$elm$core$Platform$Cmd$none);
			case 19:
				var table = msg.a;
				var on = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapTableProps(
							A2($author$project$PagesComponents$Projects$Id_$Updates$Table$hoverTable, table, on)),
						_Utils_update(
							model,
							{
								bR: A3(
									$author$project$Libs$Bool$cond,
									on,
									$elm$core$Maybe$Just(table),
									$elm$core$Maybe$Nothing)
							})),
					$elm$core$Platform$Cmd$none);
			case 20:
				var column = msg.a;
				var on = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						function (e) {
							return A2(
								$author$project$Services$Lenses$mapTableProps,
								A3($author$project$PagesComponents$Projects$Id_$Updates$Table$hoverColumn, column, on, e),
								e);
						},
						_Utils_update(
							model,
							{
								bP: A3(
									$author$project$Libs$Bool$cond,
									on,
									$elm$core$Maybe$Just(column),
									$elm$core$Maybe$Nothing)
							})),
					$elm$core$Platform$Cmd$none);
			case 21:
				var src = msg.a;
				var ref = msg.b;
				return A2(
					$author$project$Services$Lenses$mapErdMCmd,
					A2($author$project$PagesComponents$Projects$Id_$Updates$Source$addRelation, src, ref),
					model);
			case 22:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Services$Lenses$setCanvas($author$project$Models$Project$CanvasProps$zero),
							A2(
								$elm$core$Basics$composeR,
								$author$project$Services$Lenses$setShownTables(_List_Nil),
								A2(
									$elm$core$Basics$composeR,
									$author$project$Services$Lenses$setTableProps($elm$core$Dict$empty),
									$author$project$Services$Lenses$setUsedLayout($elm$core$Maybe$Nothing)))),
						model),
					$elm$core$Platform$Cmd$none);
			case 23:
				var message = msg.a;
				return A3($author$project$PagesComponents$Projects$Id_$Updates$Layout$handleLayout, now, message, model);
			case 24:
				var message = msg.a;
				return A2($author$project$PagesComponents$Projects$Id_$Updates$VirtualRelation$handleVirtualRelation, message, model);
			case 25:
				var message = msg.a;
				return A2($author$project$PagesComponents$Projects$Id_$Updates$FindPath$handleFindPath, message, model);
			case 26:
				switch (msg.a.$) {
					case 0:
						var _v2 = msg.a;
						return _Utils_Tuple2(
							A2(
								$author$project$Services$Lenses$setSchemaAnalysis,
								$elm$core$Maybe$Just(
									{t: $author$project$Conf$ids.i5, b0: ''}),
								model),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										A2(
										$author$project$Libs$Task$sendAfter,
										1,
										$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.i5)),
										$author$project$Ports$track($author$project$Track$openSchemaAnalysis)
									])));
					case 1:
						var section = msg.a.a;
						return _Utils_Tuple2(
							A2(
								$author$project$Services$Lenses$mapSchemaAnalysisM,
								$author$project$Services$Lenses$mapOpened(
									function (opened) {
										return A3(
											$author$project$Libs$Bool$cond,
											_Utils_eq(opened, section),
											'',
											section);
									}),
								model),
							$elm$core$Platform$Cmd$none);
					default:
						var _v3 = msg.a;
						return _Utils_Tuple2(
							A2($author$project$Services$Lenses$setSchemaAnalysis, $elm$core$Maybe$Nothing, model),
							$elm$core$Platform$Cmd$none);
				}
			case 27:
				var message = msg.a;
				return A2($author$project$PagesComponents$Projects$Id_$Updates$Sharing$handleSharing, message, model);
			case 28:
				var message = msg.a;
				return A2($author$project$PagesComponents$Projects$Id_$Updates$ProjectSettings$handleProjectSettings, message, model);
			case 29:
				var message = msg.a;
				return A2($author$project$PagesComponents$Projects$Id_$Updates$Help$handleHelp, message, model);
			case 30:
				var mode = msg.a;
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setCursorMode, mode, model),
					$elm$core$Platform$Cmd$none);
			case 31:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$PagesComponents$Projects$Id_$Updates$Canvas$fitCanvas(model.i6),
						model),
					$elm$core$Platform$Cmd$none);
			case 32:
				var maybeId = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$Ports$fullscreen(maybeId));
			case 33:
				var event = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapCanvas(
							$author$project$PagesComponents$Projects$Id_$Updates$Canvas$handleWheel(event)),
						model),
					$elm$core$Platform$Cmd$none);
			case 34:
				var delta = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapErdM,
						$author$project$Services$Lenses$mapCanvas(
							A2($author$project$PagesComponents$Projects$Id_$Updates$Canvas$zoomCanvas, delta, model.i6)),
						model),
					$elm$core$Platform$Cmd$none);
			case 35:
				var id = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$Ports$focus(id));
			case 36:
				var id = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapOpenedDropdown,
						function (d) {
							return A3(
								$author$project$Libs$Bool$cond,
								_Utils_eq(d, id),
								'',
								id);
						},
						model),
					$elm$core$Platform$Cmd$none);
			case 37:
				var id = msg.a;
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setOpenedPopover, id, model),
					$elm$core$Platform$Cmd$none);
			case 38:
				var content = msg.a;
				var event = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setContextMenu,
						$elm$core$Maybe$Just(
							{bI: content, iG: event.iG, jf: false}),
						model),
					A2($author$project$Libs$Task$sendAfter, 1, $author$project$PagesComponents$Projects$Id_$Models$ContextMenuShow));
			case 39:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapContextMenuM,
						$author$project$Services$Lenses$setShow(true),
						model),
					$elm$core$Platform$Cmd$none);
			case 40:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setContextMenu, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
			case 41:
				var id = msg.a;
				var pos = msg.b;
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (d) {
						return _Utils_Tuple2(
							model,
							$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$Id_$Models$toastInfo('Already dragging ' + d.t)));
					},
					_Utils_Tuple2(
						function (d) {
							return A3(
								$author$project$PagesComponents$Projects$Id_$Updates$Drag$handleDrag,
								d,
								false,
								A2(
									$author$project$Services$Lenses$setDragging,
									$elm$core$Maybe$Just(d),
									model));
						}(
							{t: id, Y: pos, fw: pos}),
						$elm$core$Platform$Cmd$none),
					model.cF);
			case 42:
				var pos = msg.a;
				return _Utils_Tuple2(
					A3(
						$author$project$Libs$Maybe$mapOrElse,
						function (d) {
							return A3(
								$author$project$PagesComponents$Projects$Id_$Updates$Drag$handleDrag,
								d,
								false,
								A2(
									$author$project$Services$Lenses$setDragging,
									$elm$core$Maybe$Just(d),
									model));
						},
						model,
						A2(
							$elm$core$Maybe$map,
							$author$project$PagesComponents$Projects$Id_$Models$DragState$setLast(pos),
							model.cF)),
					$elm$core$Platform$Cmd$none);
			case 43:
				var pos = msg.a;
				return _Utils_Tuple2(
					A3(
						$author$project$Libs$Maybe$mapOrElse,
						function (d) {
							return A3(
								$author$project$PagesComponents$Projects$Id_$Updates$Drag$handleDrag,
								d,
								true,
								A2($author$project$Services$Lenses$setDragging, $elm$core$Maybe$Nothing, model));
						},
						model,
						A2(
							$elm$core$Maybe$map,
							$author$project$PagesComponents$Projects$Id_$Models$DragState$setLast(pos),
							model.cF)),
					$elm$core$Platform$Cmd$none);
			case 44:
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setDragging, $elm$core$Maybe$Nothing, model),
					$elm$core$Platform$Cmd$none);
			case 45:
				var millis = msg.a;
				var toast = msg.b;
				return function (key) {
					return _Utils_Tuple2(
						A2(
							$author$project$Services$Lenses$mapToasts,
							function (t) {
								return A2(
									$elm$core$List$cons,
									{bI: toast, ar: false, bU: key},
									t);
							},
							A2($author$project$Services$Lenses$setToastIdx, model.jF + 1, model)),
						A2(
							$author$project$Libs$Task$sendAfter,
							1,
							A2($author$project$PagesComponents$Projects$Id_$Models$ToastShow, millis, key)));
				}(
					$elm$core$String$fromInt(model.jF));
			case 46:
				var millis = msg.a;
				var key = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapToasts,
						A3(
							$author$project$Services$Lenses$mapList,
							function ($) {
								return $.bU;
							},
							key,
							$author$project$Services$Lenses$setIsOpen(true)),
						model),
					A3(
						$author$project$Libs$Maybe$mapOrElse,
						function (delay) {
							return A2(
								$author$project$Libs$Task$sendAfter,
								delay,
								$author$project$PagesComponents$Projects$Id_$Models$ToastHide(key));
						},
						$elm$core$Platform$Cmd$none,
						millis));
			case 47:
				var key = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapToasts,
						A3(
							$author$project$Services$Lenses$mapList,
							function ($) {
								return $.bU;
							},
							key,
							$author$project$Services$Lenses$setIsOpen(false)),
						model),
					A2(
						$author$project$Libs$Task$sendAfter,
						300,
						$author$project$PagesComponents$Projects$Id_$Models$ToastRemove(key)));
			case 48:
				var key = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapToasts,
						$elm$core$List$filter(
							function (t) {
								return !_Utils_eq(t.bU, key);
							}),
						model),
					$elm$core$Platform$Cmd$none);
			case 49:
				var confirm = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setConfirm,
						$elm$core$Maybe$Just(
							{bI: confirm, t: $author$project$Conf$ids.gU}),
						model),
					A2(
						$author$project$Libs$Task$sendAfter,
						1,
						$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.gU)));
			case 50:
				var answer = msg.a;
				var cmd = msg.b;
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setConfirm, $elm$core$Maybe$Nothing, model),
					A3($author$project$Libs$Bool$cond, answer, cmd, $elm$core$Platform$Cmd$none));
			case 51:
				var prompt = msg.a;
				var input = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setPrompt,
						$elm$core$Maybe$Just(
							{bI: prompt, t: $author$project$Conf$ids.iM, cO: input}),
						model),
					A2(
						$author$project$Libs$Task$sendAfter,
						1,
						$author$project$PagesComponents$Projects$Id_$Models$ModalOpen($author$project$Conf$ids.iM)));
			case 52:
				var input = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapPromptM,
						$author$project$Services$Lenses$setInput(input),
						model),
					$elm$core$Platform$Cmd$none);
			case 53:
				var cmd = msg.a;
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setPrompt, $elm$core$Maybe$Nothing, model),
					cmd);
			case 54:
				var id = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapOpenedDialogs,
						function (dialogs) {
							return A2($elm$core$List$cons, id, dialogs);
						},
						model),
					$author$project$Ports$autofocusWithin(id));
			case 55:
				var message = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapOpenedDialogs,
						$elm$core$List$drop(1),
						model),
					A2($author$project$Libs$Task$sendAfter, $author$project$Conf$ui.gR, message));
			case 56:
				var message = msg.a;
				return A4($author$project$PagesComponents$Projects$Id_$Updates$handleJsMessage, currentProject, currentLayout, message, model);
			case 57:
				var cmd = msg.a;
				return _Utils_Tuple2(model, cmd);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Components$Atoms$Loader$fullScreen = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('flex justify-center items-center h-screen')
		]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-primary-500')
				]),
			_List_Nil)
		]));
var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
var $author$project$PagesComponents$Projects$Id_$Views$Erd$argsToString = F2(
	function (openedDropdown, openedPopover) {
		return openedDropdown + ('#' + openedPopover);
	});
var $author$project$Libs$String$filterStartsWith = F2(
	function (prefix, str) {
		return A2($elm$core$String$startsWith, prefix, str) ? str : '';
	});
var $elm$virtual_dom$VirtualDom$lazy5 = _VirtualDom_lazy5;
var $elm$html$Html$Lazy$lazy5 = $elm$virtual_dom$VirtualDom$lazy5;
var $elm$virtual_dom$VirtualDom$lazy6 = _VirtualDom_lazy6;
var $elm$html$Html$Lazy$lazy6 = $elm$virtual_dom$VirtualDom$lazy6;
var $elm$virtual_dom$VirtualDom$lazy8 = _VirtualDom_lazy8;
var $elm$html$Html$Lazy$lazy8 = $elm$virtual_dom$VirtualDom$lazy8;
var $author$project$Components$Atoms$Icon$ArrowsExpand = 20;
var $author$project$Components$Atoms$Icon$CursorClick = 74;
var $author$project$PagesComponents$Projects$Id_$Models$CursorMode = function (a) {
	return {$: 30, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$Fullscreen = function (a) {
	return {$: 32, a: a};
};
var $author$project$Components$Atoms$Icon$Hand = 114;
var $author$project$Components$Atoms$Icon$Minus = 141;
var $author$project$Components$Atoms$Icon$Plus = 159;
var $author$project$Components$Atoms$Icon$PresentationChartBar = 162;
var $author$project$Components$Molecules$ContextMenu$TopLeft = 3;
var $author$project$Libs$Html$Attributes$ariaExpanded = function (value) {
	return A2(
		$elm$html$Html$Attributes$attribute,
		'aria-expanded',
		$author$project$Libs$Bool$toString(value));
};
var $author$project$Libs$Html$Attributes$ariaHaspopup = function (value) {
	return A2(
		$elm$html$Html$Attributes$attribute,
		'aria-haspopup',
		$author$project$Libs$Bool$toString(value));
};
var $author$project$Components$Molecules$ContextMenu$itemStyles = $author$project$Libs$Tailwind$batch(
	_List_fromArray(
		[
			'py-2 px-4 text-sm text-gray-700',
			$author$project$Libs$Tailwind$hover(
			_List_fromArray(
				['bg-gray-100 text-gray-900']))
		]));
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $author$project$Components$Molecules$ContextMenu$btn = F3(
	function (styles, message, content) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$type_('button'),
					$elm$html$Html$Events$onClick(message),
					$author$project$Libs$Html$Attributes$role('menuitem'),
					$elm$html$Html$Attributes$tabindex(-1),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'block w-full text-left',
							$author$project$Libs$Tailwind$focus(
							_List_fromArray(
								['outline-none'])),
							$author$project$Components$Molecules$ContextMenu$itemStyles,
							styles
						]))
				]),
			content);
	});
var $author$project$Libs$Html$Attributes$ariaLabelledby = function (targetId) {
	return A2($elm$html$Html$Attributes$attribute, 'aria-labelledby', targetId);
};
var $author$project$Libs$Html$Attributes$ariaOrientation = function (text) {
	return A2($elm$html$Html$Attributes$attribute, 'aria-orientation', text);
};
var $author$project$Components$Molecules$ContextMenu$menuStyles = 'absolute z-max w-48 min-w-max py-1 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5';
var $author$project$Components$Molecules$ContextMenu$menu = F5(
	function (id, direction, offset, isOpen, content) {
		var transitionStyles = isOpen ? 'transition ease-in duration-75 opacity-100 transform scale-100' : 'transition ease-out duration-100 opacity-0 transform scale-95 pointer-events-none';
		var directionStyles = function () {
			switch (direction) {
				case 0:
					return 'origin-top-left left-0 top-full mt-' + $elm$core$String$fromInt(offset);
				case 1:
					return 'origin-top-right right-0 top-full mt-' + $elm$core$String$fromInt(offset);
				case 2:
					return 'origin-bottom-left left-0 bottom-full mb-' + $elm$core$String$fromInt(offset);
				default:
					return 'origin-bottom-right right-0 bottom-full mb-' + $elm$core$String$fromInt(offset);
			}
		}();
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$role('menu'),
					$author$project$Libs$Html$Attributes$ariaOrientation('vertical'),
					$author$project$Libs$Html$Attributes$ariaLabelledby(id),
					$elm$html$Html$Attributes$tabindex(-1),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[$author$project$Components$Molecules$ContextMenu$menuStyles, directionStyles, transitionStyles]))
				]),
			_List_fromArray(
				[content]));
	});
var $author$project$Components$Molecules$Dropdown$dropdown = F3(
	function (model, elt, content) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('relative inline-block text-left')
				]),
			_List_fromArray(
				[
					elt(model),
					A5(
					$author$project$Components$Molecules$ContextMenu$menu,
					model.t,
					model.ao,
					2,
					model.ar,
					content(model))
				]));
	});
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$Libs$Html$none = $elm$html$Html$text('');
var $author$project$Components$Atoms$Icon$icons = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'academic-cap',
			{
				a: _List_fromArray(
					['M12 14l9-5-9-5-9 5 9 5z', 'M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z', 'M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222']),
				b: _List_fromArray(
					['M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z'])
			}),
			_Utils_Tuple2(
			'adjustments',
			{
				a: _List_fromArray(
					['M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4']),
				b: _List_fromArray(
					['M5 4a1 1 0 00-2 0v7.268a2 2 0 000 3.464V16a1 1 0 102 0v-1.268a2 2 0 000-3.464V4zM11 4a1 1 0 10-2 0v1.268a2 2 0 000 3.464V16a1 1 0 102 0V8.732a2 2 0 000-3.464V4zM16 3a1 1 0 011 1v7.268a2 2 0 010 3.464V16a1 1 0 11-2 0v-1.268a2 2 0 010-3.464V4a1 1 0 011-1z'])
			}),
			_Utils_Tuple2(
			'annotation',
			{
				a: _List_fromArray(
					['M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z']),
				b: _List_fromArray(
					['M18 13V5a2 2 0 00-2-2H4a2 2 0 00-2 2v8a2 2 0 002 2h3l3 3 3-3h3a2 2 0 002-2zM5 7a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1zm1 3a1 1 0 100 2h3a1 1 0 100-2H6z'])
			}),
			_Utils_Tuple2(
			'archive',
			{
				a: _List_fromArray(
					['M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4']),
				b: _List_fromArray(
					['M4 3a2 2 0 100 4h12a2 2 0 100-4H4z', 'M3 8h14v7a2 2 0 01-2 2H5a2 2 0 01-2-2V8zm5 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'arrow-circle-down',
			{
				a: _List_fromArray(
					['M15 13l-3 3m0 0l-3-3m3 3V8m0 13a9 9 0 110-18 9 9 0 010 18z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z'])
			}),
			_Utils_Tuple2(
			'arrow-circle-left',
			{
				a: _List_fromArray(
					['M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm.707-10.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L9.414 11H13a1 1 0 100-2H9.414l1.293-1.293z'])
			}),
			_Utils_Tuple2(
			'arrow-circle-right',
			{
				a: _List_fromArray(
					['M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-circle-up',
			{
				a: _List_fromArray(
					['M9 11l3-3m0 0l3 3m-3-3v8m0-13a9 9 0 110 18 9 9 0 010-18z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-down',
			{
				a: _List_fromArray(
					['M19 14l-7 7m0 0l-7-7m7 7V3']),
				b: _List_fromArray(
					['M16.707 10.293a1 1 0 010 1.414l-6 6a1 1 0 01-1.414 0l-6-6a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l4.293-4.293a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'arrow-left',
			{
				a: _List_fromArray(
					['M10 19l-7-7m0 0l7-7m-7 7h18']),
				b: _List_fromArray(
					['M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-narrow-down',
			{
				a: _List_fromArray(
					['M16 17l-4 4m0 0l-4-4m4 4V3']),
				b: _List_fromArray(
					['M14.707 12.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 14.586V3a1 1 0 012 0v11.586l2.293-2.293a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'arrow-narrow-left',
			{
				a: _List_fromArray(
					['M7 16l-4-4m0 0l4-4m-4 4h18']),
				b: _List_fromArray(
					['M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-narrow-right',
			{
				a: _List_fromArray(
					['M17 8l4 4m0 0l-4 4m4-4H3']),
				b: _List_fromArray(
					['M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-narrow-up',
			{
				a: _List_fromArray(
					['M8 7l4-4m0 0l4 4m-4-4v18']),
				b: _List_fromArray(
					['M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z'])
			}),
			_Utils_Tuple2(
			'arrow-right',
			{
				a: _List_fromArray(
					['M14 5l7 7m0 0l-7 7m7-7H3']),
				b: _List_fromArray(
					['M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-sm-down',
			{
				a: _List_fromArray(
					['M17 13l-5 5m0 0l-5-5m5 5V6']),
				b: _List_fromArray(
					['M14.707 10.293a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L9 12.586V5a1 1 0 012 0v7.586l2.293-2.293a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'arrow-sm-left',
			{
				a: _List_fromArray(
					['M11 17l-5-5m0 0l5-5m-5 5h12']),
				b: _List_fromArray(
					['M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-sm-right',
			{
				a: _List_fromArray(
					['M13 7l5 5m0 0l-5 5m5-5H6']),
				b: _List_fromArray(
					['M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'arrow-sm-up',
			{
				a: _List_fromArray(
					['M7 11l5-5m0 0l5 5m-5-5v12']),
				b: _List_fromArray(
					['M5.293 9.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 7.414V15a1 1 0 11-2 0V7.414L6.707 9.707a1 1 0 01-1.414 0z'])
			}),
			_Utils_Tuple2(
			'arrow-up',
			{
				a: _List_fromArray(
					['M5 10l7-7m0 0l7 7m-7-7v18']),
				b: _List_fromArray(
					['M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z'])
			}),
			_Utils_Tuple2(
			'arrows-expand',
			{
				a: _List_fromArray(
					['M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4']),
				b: _List_fromArray(
					['M3 4a1 1 0 011-1h4a1 1 0 010 2H6.414l2.293 2.293a1 1 0 01-1.414 1.414L5 6.414V8a1 1 0 01-2 0V4zm9 1a1 1 0 110-2h4a1 1 0 011 1v4a1 1 0 11-2 0V6.414l-2.293 2.293a1 1 0 11-1.414-1.414L13.586 5H12zm-9 7a1 1 0 112 0v1.586l2.293-2.293a1 1 0 011.414 1.414L6.414 15H8a1 1 0 110 2H4a1 1 0 01-1-1v-4zm13-1a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 110-2h1.586l-2.293-2.293a1 1 0 011.414-1.414L15 13.586V12a1 1 0 011-1z'])
			}),
			_Utils_Tuple2(
			'at-symbol',
			{
				a: _List_fromArray(
					['M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207']),
				b: _List_fromArray(
					['M14.243 5.757a6 6 0 10-.986 9.284 1 1 0 111.087 1.678A8 8 0 1118 10a3 3 0 01-4.8 2.401A4 4 0 1114 10a1 1 0 102 0c0-1.537-.586-3.07-1.757-4.243zM12 10a2 2 0 10-4 0 2 2 0 004 0z'])
			}),
			_Utils_Tuple2(
			'backspace',
			{
				a: _List_fromArray(
					['M12 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M3 12l6.414 6.414a2 2 0 001.414.586H19a2 2 0 002-2V7a2 2 0 00-2-2h-8.172a2 2 0 00-1.414.586L3 12z']),
				b: _List_fromArray(
					['M6.707 4.879A3 3 0 018.828 4H15a3 3 0 013 3v6a3 3 0 01-3 3H8.828a3 3 0 01-2.12-.879l-4.415-4.414a1 1 0 010-1.414l4.414-4.414zm4 2.414a1 1 0 00-1.414 1.414L10.586 10l-1.293 1.293a1 1 0 101.414 1.414L12 11.414l1.293 1.293a1 1 0 001.414-1.414L13.414 10l1.293-1.293a1 1 0 00-1.414-1.414L12 8.586l-1.293-1.293z'])
			}),
			_Utils_Tuple2(
			'badge-check',
			{
				a: _List_fromArray(
					['M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z']),
				b: _List_fromArray(
					['M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'])
			}),
			_Utils_Tuple2(
			'ban',
			{
				a: _List_fromArray(
					['M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636']),
				b: _List_fromArray(
					['M13.477 14.89A6 6 0 015.11 6.524l8.367 8.368zm1.414-1.414L6.524 5.11a6 6 0 018.367 8.367zM18 10a8 8 0 11-16 0 8 8 0 0116 0z'])
			}),
			_Utils_Tuple2(
			'beaker',
			{
				a: _List_fromArray(
					['M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z']),
				b: _List_fromArray(
					['M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.027 1.028a4 4 0 00-2.171.102l-.47.156a4 4 0 01-2.53 0l-.563-.187a1.993 1.993 0 00-.114-.035l1.063-1.063A3 3 0 009 8.172z'])
			}),
			_Utils_Tuple2(
			'bell',
			{
				a: _List_fromArray(
					['M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9']),
				b: _List_fromArray(
					['M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z'])
			}),
			_Utils_Tuple2(
			'book-open',
			{
				a: _List_fromArray(
					['M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253']),
				b: _List_fromArray(
					['M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z'])
			}),
			_Utils_Tuple2(
			'bookmark',
			{
				a: _List_fromArray(
					['M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z']),
				b: _List_fromArray(
					['M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z'])
			}),
			_Utils_Tuple2(
			'bookmark-alt',
			{
				a: _List_fromArray(
					['M16 4v12l-4-2-4 2V4M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z']),
				b: _List_fromArray(
					['M3 5a2 2 0 012-2h10a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5zm11 1H6v8l4-2 4 2V6z'])
			}),
			_Utils_Tuple2(
			'briefcase',
			{
				a: _List_fromArray(
					['M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z']),
				b: _List_fromArray(
					['M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z', 'M2 13.692V16a2 2 0 002 2h12a2 2 0 002-2v-2.308A24.974 24.974 0 0110 15c-2.796 0-5.487-.46-8-1.308z'])
			}),
			_Utils_Tuple2(
			'cake',
			{
				a: _List_fromArray(
					['M21 15.546c-.523 0-1.046.151-1.5.454a2.704 2.704 0 01-3 0 2.704 2.704 0 00-3 0 2.704 2.704 0 01-3 0 2.704 2.704 0 00-3 0 2.704 2.704 0 01-3 0 2.701 2.701 0 00-1.5-.454M9 6v2m3-2v2m3-2v2M9 3h.01M12 3h.01M15 3h.01M21 21v-7a2 2 0 00-2-2H5a2 2 0 00-2 2v7h18zm-3-9v-2a2 2 0 00-2-2H8a2 2 0 00-2 2v2h12z']),
				b: _List_fromArray(
					['M6 3a1 1 0 011-1h.01a1 1 0 010 2H7a1 1 0 01-1-1zm2 3a1 1 0 00-2 0v1a2 2 0 00-2 2v1a2 2 0 00-2 2v.683a3.7 3.7 0 011.055.485 1.704 1.704 0 001.89 0 3.704 3.704 0 014.11 0 1.704 1.704 0 001.89 0 3.704 3.704 0 014.11 0 1.704 1.704 0 001.89 0A3.7 3.7 0 0118 12.683V12a2 2 0 00-2-2V9a2 2 0 00-2-2V6a1 1 0 10-2 0v1h-1V6a1 1 0 10-2 0v1H8V6zm10 8.868a3.704 3.704 0 01-4.055-.036 1.704 1.704 0 00-1.89 0 3.704 3.704 0 01-4.11 0 1.704 1.704 0 00-1.89 0A3.704 3.704 0 012 14.868V17a1 1 0 001 1h14a1 1 0 001-1v-2.132zM9 3a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zm3 0a1 1 0 011-1h.01a1 1 0 110 2H13a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'calculator',
			{
				a: _List_fromArray(
					['M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z']),
				b: _List_fromArray(
					['M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V4a2 2 0 00-2-2H6zm1 2a1 1 0 000 2h6a1 1 0 100-2H7zm6 7a1 1 0 011 1v3a1 1 0 11-2 0v-3a1 1 0 011-1zm-3 3a1 1 0 100 2h.01a1 1 0 100-2H10zm-4 1a1 1 0 011-1h.01a1 1 0 110 2H7a1 1 0 01-1-1zm1-4a1 1 0 100 2h.01a1 1 0 100-2H7zm2 1a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zm4-4a1 1 0 100 2h.01a1 1 0 100-2H13zM9 9a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zM7 8a1 1 0 000 2h.01a1 1 0 000-2H7z'])
			}),
			_Utils_Tuple2(
			'calendar',
			{
				a: _List_fromArray(
					['M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z']),
				b: _List_fromArray(
					['M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z'])
			}),
			_Utils_Tuple2(
			'camera',
			{
				a: _List_fromArray(
					['M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z', 'M15 13a3 3 0 11-6 0 3 3 0 016 0z']),
				b: _List_fromArray(
					['M4 5a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V7a2 2 0 00-2-2h-1.586a1 1 0 01-.707-.293l-1.121-1.121A2 2 0 0011.172 3H8.828a2 2 0 00-1.414.586L6.293 4.707A1 1 0 015.586 5H4zm6 9a3 3 0 100-6 3 3 0 000 6z'])
			}),
			_Utils_Tuple2(
			'cash',
			{
				a: _List_fromArray(
					['M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z']),
				b: _List_fromArray(
					['M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z'])
			}),
			_Utils_Tuple2(
			'chart-bar',
			{
				a: _List_fromArray(
					['M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z']),
				b: _List_fromArray(
					['M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z'])
			}),
			_Utils_Tuple2(
			'chart-pie',
			{
				a: _List_fromArray(
					['M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z', 'M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z']),
				b: _List_fromArray(
					['M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z', 'M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z'])
			}),
			_Utils_Tuple2(
			'chart-square-bar',
			{
				a: _List_fromArray(
					['M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z']),
				b: _List_fromArray(
					['M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm9 4a1 1 0 10-2 0v6a1 1 0 102 0V7zm-3 2a1 1 0 10-2 0v4a1 1 0 102 0V9zm-3 3a1 1 0 10-2 0v1a1 1 0 102 0v-1z'])
			}),
			_Utils_Tuple2(
			'chat',
			{
				a: _List_fromArray(
					['M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z']),
				b: _List_fromArray(
					['M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z'])
			}),
			_Utils_Tuple2(
			'chat-alt',
			{
				a: _List_fromArray(
					['M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z']),
				b: _List_fromArray(
					['M18 5v8a2 2 0 01-2 2h-5l-5 4v-4H4a2 2 0 01-2-2V5a2 2 0 012-2h12a2 2 0 012 2zM7 8H5v2h2V8zm2 0h2v2H9V8zm6 0h-2v2h2V8z'])
			}),
			_Utils_Tuple2(
			'chat-alt-2',
			{
				a: _List_fromArray(
					['M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a1.994 1.994 0 01-1.414-.586m0 0L11 14h4a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2v4l.586-.586z']),
				b: _List_fromArray(
					['M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z', 'M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z'])
			}),
			_Utils_Tuple2(
			'check',
			{
				a: _List_fromArray(
					['M5 13l4 4L19 7']),
				b: _List_fromArray(
					['M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'check-circle',
			{
				a: _List_fromArray(
					['M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'])
			}),
			_Utils_Tuple2(
			'chevron-double-down',
			{
				a: _List_fromArray(
					['M19 13l-7 7-7-7m14-8l-7 7-7-7']),
				b: _List_fromArray(
					['M15.707 4.293a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-5-5a1 1 0 011.414-1.414L10 8.586l4.293-4.293a1 1 0 011.414 0zm0 6a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-5-5a1 1 0 111.414-1.414L10 14.586l4.293-4.293a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'chevron-double-left',
			{
				a: _List_fromArray(
					['M11 19l-7-7 7-7m8 14l-7-7 7-7']),
				b: _List_fromArray(
					['M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z'])
			}),
			_Utils_Tuple2(
			'chevron-double-right',
			{
				a: _List_fromArray(
					['M13 5l7 7-7 7M5 5l7 7-7 7']),
				b: _List_fromArray(
					['M10.293 15.707a1 1 0 010-1.414L14.586 10l-4.293-4.293a1 1 0 111.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z', 'M4.293 15.707a1 1 0 010-1.414L8.586 10 4.293 5.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z'])
			}),
			_Utils_Tuple2(
			'chevron-double-up',
			{
				a: _List_fromArray(
					['M5 11l7-7 7 7M5 19l7-7 7 7']),
				b: _List_fromArray(
					['M4.293 15.707a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414 0zm0-6a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 5.414 5.707 9.707a1 1 0 01-1.414 0z'])
			}),
			_Utils_Tuple2(
			'chevron-down',
			{
				a: _List_fromArray(
					['M19 9l-7 7-7-7']),
				b: _List_fromArray(
					['M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'chevron-left',
			{
				a: _List_fromArray(
					['M15 19l-7-7 7-7']),
				b: _List_fromArray(
					['M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'chevron-right',
			{
				a: _List_fromArray(
					['M9 5l7 7-7 7']),
				b: _List_fromArray(
					['M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z'])
			}),
			_Utils_Tuple2(
			'chevron-up',
			{
				a: _List_fromArray(
					['M5 15l7-7 7 7']),
				b: _List_fromArray(
					['M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z'])
			}),
			_Utils_Tuple2(
			'chip',
			{
				a: _List_fromArray(
					['M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z']),
				b: _List_fromArray(
					['M13 7H7v6h6V7z', 'M7 2a1 1 0 012 0v1h2V2a1 1 0 112 0v1h2a2 2 0 012 2v2h1a1 1 0 110 2h-1v2h1a1 1 0 110 2h-1v2a2 2 0 01-2 2h-2v1a1 1 0 11-2 0v-1H9v1a1 1 0 11-2 0v-1H5a2 2 0 01-2-2v-2H2a1 1 0 110-2h1V9H2a1 1 0 010-2h1V5a2 2 0 012-2h2V2zM5 5h10v10H5V5z'])
			}),
			_Utils_Tuple2(
			'clipboard',
			{
				a: _List_fromArray(
					['M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2']),
				b: _List_fromArray(
					['M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z', 'M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z'])
			}),
			_Utils_Tuple2(
			'clipboard-check',
			{
				a: _List_fromArray(
					['M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4']),
				b: _List_fromArray(
					['M9 2a1 1 0 000 2h2a1 1 0 100-2H9z', 'M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm9.707 5.707a1 1 0 00-1.414-1.414L9 12.586l-1.293-1.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'])
			}),
			_Utils_Tuple2(
			'clipboard-copy',
			{
				a: _List_fromArray(
					['M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3']),
				b: _List_fromArray(
					['M8 2a1 1 0 000 2h2a1 1 0 100-2H8z', 'M3 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v6h-4.586l1.293-1.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L10.414 13H15v3a2 2 0 01-2 2H5a2 2 0 01-2-2V5zM15 11h2a1 1 0 110 2h-2v-2z'])
			}),
			_Utils_Tuple2(
			'clipboard-list',
			{
				a: _List_fromArray(
					['M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01']),
				b: _List_fromArray(
					['M9 2a1 1 0 000 2h2a1 1 0 100-2H9z', 'M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z'])
			}),
			_Utils_Tuple2(
			'clock',
			{
				a: _List_fromArray(
					['M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z'])
			}),
			_Utils_Tuple2(
			'cloud',
			{
				a: _List_fromArray(
					['M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z']),
				b: _List_fromArray(
					['M5.5 16a3.5 3.5 0 01-.369-6.98 4 4 0 117.753-1.977A4.5 4.5 0 1113.5 16h-8z'])
			}),
			_Utils_Tuple2(
			'cloud-download',
			{
				a: _List_fromArray(
					['M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10']),
				b: _List_fromArray(
					['M2 9.5A3.5 3.5 0 005.5 13H9v2.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 15.586V13h2.5a4.5 4.5 0 10-.616-8.958 4.002 4.002 0 10-7.753 1.977A3.5 3.5 0 002 9.5zm9 3.5H9V8a1 1 0 012 0v5z'])
			}),
			_Utils_Tuple2(
			'cloud-upload',
			{
				a: _List_fromArray(
					['M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12']),
				b: _List_fromArray(
					['M5.5 13a3.5 3.5 0 01-.369-6.98 4 4 0 117.753-1.977A4.5 4.5 0 1113.5 13H11V9.413l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13H5.5z', 'M9 13h2v5a1 1 0 11-2 0v-5z'])
			}),
			_Utils_Tuple2(
			'code',
			{
				a: _List_fromArray(
					['M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4']),
				b: _List_fromArray(
					['M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'cog',
			{
				a: _List_fromArray(
					['M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z', 'M15 12a3 3 0 11-6 0 3 3 0 016 0z']),
				b: _List_fromArray(
					['M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z'])
			}),
			_Utils_Tuple2(
			'collection',
			{
				a: _List_fromArray(
					['M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10']),
				b: _List_fromArray(
					['M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z'])
			}),
			_Utils_Tuple2(
			'color-swatch',
			{
				a: _List_fromArray(
					['M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01']),
				b: _List_fromArray(
					['M4 2a2 2 0 00-2 2v11a3 3 0 106 0V4a2 2 0 00-2-2H4zm1 14a1 1 0 100-2 1 1 0 000 2zm5-1.757l4.9-4.9a2 2 0 000-2.828L13.485 5.1a2 2 0 00-2.828 0L10 5.757v8.486zM16 18H9.071l6-6H16a2 2 0 012 2v2a2 2 0 01-2 2z'])
			}),
			_Utils_Tuple2(
			'credit-card',
			{
				a: _List_fromArray(
					['M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z']),
				b: _List_fromArray(
					['M4 4a2 2 0 00-2 2v1h16V6a2 2 0 00-2-2H4z', 'M18 9H2v5a2 2 0 002 2h12a2 2 0 002-2V9zM4 13a1 1 0 011-1h1a1 1 0 110 2H5a1 1 0 01-1-1zm5-1a1 1 0 100 2h1a1 1 0 100-2H9z'])
			}),
			_Utils_Tuple2(
			'cube',
			{
				a: _List_fromArray(
					['M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4']),
				b: _List_fromArray(
					['M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z'])
			}),
			_Utils_Tuple2(
			'cube-transparent',
			{
				a: _List_fromArray(
					['M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5']),
				b: _List_fromArray(
					['M9.504 1.132a1 1 0 01.992 0l1.75 1a1 1 0 11-.992 1.736L10 3.152l-1.254.716a1 1 0 11-.992-1.736l1.75-1zM5.618 4.504a1 1 0 01-.372 1.364L5.016 6l.23.132a1 1 0 11-.992 1.736L4 7.723V8a1 1 0 01-2 0V6a.996.996 0 01.52-.878l1.734-.99a1 1 0 011.364.372zm8.764 0a1 1 0 011.364-.372l1.733.99A1.002 1.002 0 0118 6v2a1 1 0 11-2 0v-.277l-.254.145a1 1 0 11-.992-1.736l.23-.132-.23-.132a1 1 0 01-.372-1.364zm-7 4a1 1 0 011.364-.372L10 8.848l1.254-.716a1 1 0 11.992 1.736L11 10.58V12a1 1 0 11-2 0v-1.42l-1.246-.712a1 1 0 01-.372-1.364zM3 11a1 1 0 011 1v1.42l1.246.712a1 1 0 11-.992 1.736l-1.75-1A1 1 0 012 14v-2a1 1 0 011-1zm14 0a1 1 0 011 1v2a1 1 0 01-.504.868l-1.75 1a1 1 0 11-.992-1.736L16 13.42V12a1 1 0 011-1zm-9.618 5.504a1 1 0 011.364-.372l.254.145V16a1 1 0 112 0v.277l.254-.145a1 1 0 11.992 1.736l-1.735.992a.995.995 0 01-1.022 0l-1.735-.992a1 1 0 01-.372-1.364z'])
			}),
			_Utils_Tuple2(
			'currency-bangladeshi',
			{
				a: _List_fromArray(
					['M11 11V9a2 2 0 00-2-2m2 4v4a2 2 0 104 0v-1m-4-3H9m2 0h4m6 1a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM7 4a1 1 0 000 2 1 1 0 011 1v1H7a1 1 0 000 2h1v3a3 3 0 106 0v-1a1 1 0 10-2 0v1a1 1 0 11-2 0v-3h3a1 1 0 100-2h-3V7a3 3 0 00-3-3z'])
			}),
			_Utils_Tuple2(
			'currency-dollar',
			{
				a: _List_fromArray(
					['M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z', 'M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z'])
			}),
			_Utils_Tuple2(
			'currency-euro',
			{
				a: _List_fromArray(
					['M14.121 15.536c-1.171 1.952-3.07 1.952-4.242 0-1.172-1.953-1.172-5.119 0-7.072 1.171-1.952 3.07-1.952 4.242 0M8 10.5h4m-4 3h4m9-1.5a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM8.736 6.979C9.208 6.193 9.696 6 10 6c.304 0 .792.193 1.264.979a1 1 0 001.715-1.029C12.279 4.784 11.232 4 10 4s-2.279.784-2.979 1.95c-.285.475-.507 1-.67 1.55H6a1 1 0 000 2h.013a9.358 9.358 0 000 1H6a1 1 0 100 2h.351c.163.55.385 1.075.67 1.55C7.721 15.216 8.768 16 10 16s2.279-.784 2.979-1.95a1 1 0 10-1.715-1.029c-.472.786-.96.979-1.264.979-.304 0-.792-.193-1.264-.979a4.265 4.265 0 01-.264-.521H10a1 1 0 100-2H8.017a7.36 7.36 0 010-1H10a1 1 0 100-2H8.472c.08-.185.167-.36.264-.521z'])
			}),
			_Utils_Tuple2(
			'currency-pound',
			{
				a: _List_fromArray(
					['M15 9a2 2 0 10-4 0v5a2 2 0 01-2 2h6m-6-4h4m8 0a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm1-14a3 3 0 00-3 3v2H7a1 1 0 000 2h1v1a1 1 0 01-1 1 1 1 0 100 2h6a1 1 0 100-2H9.83c.11-.313.17-.65.17-1v-1h1a1 1 0 100-2h-1V7a1 1 0 112 0 1 1 0 102 0 3 3 0 00-3-3z'])
			}),
			_Utils_Tuple2(
			'currency-rupee',
			{
				a: _List_fromArray(
					['M9 8h6m-5 0a3 3 0 110 6H9l3 3m-3-6h6m6 1a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM7 5a1 1 0 100 2h1a2 2 0 011.732 1H7a1 1 0 100 2h2.732A2 2 0 018 11H7a1 1 0 00-.707 1.707l3 3a1 1 0 001.414-1.414l-1.483-1.484A4.008 4.008 0 0011.874 10H13a1 1 0 100-2h-1.126a3.976 3.976 0 00-.41-1H13a1 1 0 100-2H7z'])
			}),
			_Utils_Tuple2(
			'currency-yen',
			{
				a: _List_fromArray(
					['M9 8l3 5m0 0l3-5m-3 5v4m-3-5h6m-6 3h6m6-3a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM7.858 5.485a1 1 0 00-1.715 1.03L7.633 9H7a1 1 0 100 2h1.834l.166.277V12H7a1 1 0 100 2h2v1a1 1 0 102 0v-1h2a1 1 0 100-2h-2v-.723l.166-.277H13a1 1 0 100-2h-.634l1.492-2.486a1 1 0 10-1.716-1.029L10.034 9h-.068L7.858 5.485z'])
			}),
			_Utils_Tuple2(
			'cursor-click',
			{
				a: _List_fromArray(
					['M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122']),
				b: _List_fromArray(
					['M6.672 1.911a1 1 0 10-1.932.518l.259.966a1 1 0 001.932-.518l-.26-.966zM2.429 4.74a1 1 0 10-.517 1.932l.966.259a1 1 0 00.517-1.932l-.966-.26zm8.814-.569a1 1 0 00-1.415-1.414l-.707.707a1 1 0 101.415 1.415l.707-.708zm-7.071 7.072l.707-.707A1 1 0 003.465 9.12l-.708.707a1 1 0 001.415 1.415zm3.2-5.171a1 1 0 00-1.3 1.3l4 10a1 1 0 001.823.075l1.38-2.759 3.018 3.02a1 1 0 001.414-1.415l-3.019-3.02 2.76-1.379a1 1 0 00-.076-1.822l-10-4z'])
			}),
			_Utils_Tuple2(
			'database',
			{
				a: _List_fromArray(
					['M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4']),
				b: _List_fromArray(
					['M3 12v3c0 1.657 3.134 3 7 3s7-1.343 7-3v-3c0 1.657-3.134 3-7 3s-7-1.343-7-3z', 'M3 7v3c0 1.657 3.134 3 7 3s7-1.343 7-3V7c0 1.657-3.134 3-7 3S3 8.657 3 7z', 'M17 5c0 1.657-3.134 3-7 3S3 6.657 3 5s3.134-3 7-3 7 1.343 7 3z'])
			}),
			_Utils_Tuple2(
			'desktop-computer',
			{
				a: _List_fromArray(
					['M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z']),
				b: _List_fromArray(
					['M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z'])
			}),
			_Utils_Tuple2(
			'device-mobile',
			{
				a: _List_fromArray(
					['M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z']),
				b: _List_fromArray(
					['M7 2a2 2 0 00-2 2v12a2 2 0 002 2h6a2 2 0 002-2V4a2 2 0 00-2-2H7zm3 14a1 1 0 100-2 1 1 0 000 2z'])
			}),
			_Utils_Tuple2(
			'device-tablet',
			{
				a: _List_fromArray(
					['M12 18h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z']),
				b: _List_fromArray(
					['M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V4a2 2 0 00-2-2H6zm4 14a1 1 0 100-2 1 1 0 000 2z'])
			}),
			_Utils_Tuple2(
			'document',
			{
				a: _List_fromArray(
					['M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z']),
				b: _List_fromArray(
					['M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z'])
			}),
			_Utils_Tuple2(
			'document-add',
			{
				a: _List_fromArray(
					['M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z']),
				b: _List_fromArray(
					['M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V8z'])
			}),
			_Utils_Tuple2(
			'document-download',
			{
				a: _List_fromArray(
					['M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z']),
				b: _List_fromArray(
					['M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z'])
			}),
			_Utils_Tuple2(
			'document-duplicate',
			{
				a: _List_fromArray(
					['M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2']),
				b: _List_fromArray(
					['M9 2a2 2 0 00-2 2v8a2 2 0 002 2h6a2 2 0 002-2V6.414A2 2 0 0016.414 5L14 2.586A2 2 0 0012.586 2H9z', 'M3 8a2 2 0 012-2v10h8a2 2 0 01-2 2H5a2 2 0 01-2-2V8z'])
			}),
			_Utils_Tuple2(
			'document-remove',
			{
				a: _List_fromArray(
					['M9 13h6m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z']),
				b: _List_fromArray(
					['M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm1 8a1 1 0 100 2h6a1 1 0 100-2H7z'])
			}),
			_Utils_Tuple2(
			'document-report',
			{
				a: _List_fromArray(
					['M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z']),
				b: _List_fromArray(
					['M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm2 10a1 1 0 10-2 0v3a1 1 0 102 0v-3zm2-3a1 1 0 011 1v5a1 1 0 11-2 0v-5a1 1 0 011-1zm4-1a1 1 0 10-2 0v7a1 1 0 102 0V8z'])
			}),
			_Utils_Tuple2(
			'document-search',
			{
				a: _List_fromArray(
					['M10 21h7a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v11m0 5l4.879-4.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242z']),
				b: _List_fromArray(
					['M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2h-1.528A6 6 0 004 9.528V4z', 'M8 10a4 4 0 00-3.446 6.032l-1.261 1.26a1 1 0 101.414 1.415l1.261-1.261A4 4 0 108 10zm-2 4a2 2 0 114 0 2 2 0 01-4 0z'])
			}),
			_Utils_Tuple2(
			'document-text',
			{
				a: _List_fromArray(
					['M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z']),
				b: _List_fromArray(
					['M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z'])
			}),
			_Utils_Tuple2(
			'dots-circle-horizontal',
			{
				a: _List_fromArray(
					['M8 12h.01M12 12h.01M16 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z'])
			}),
			_Utils_Tuple2(
			'dots-horizontal',
			{
				a: _List_fromArray(
					['M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z']),
				b: _List_fromArray(
					['M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z'])
			}),
			_Utils_Tuple2(
			'dots-vertical',
			{
				a: _List_fromArray(
					['M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z']),
				b: _List_fromArray(
					['M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z'])
			}),
			_Utils_Tuple2(
			'download',
			{
				a: _List_fromArray(
					['M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4']),
				b: _List_fromArray(
					['M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'duplicate',
			{
				a: _List_fromArray(
					['M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z']),
				b: _List_fromArray(
					['M7 9a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H9a2 2 0 01-2-2V9z', 'M5 3a2 2 0 00-2 2v6a2 2 0 002 2V5h8a2 2 0 00-2-2H5z'])
			}),
			_Utils_Tuple2(
			'emoji-happy',
			{
				a: _List_fromArray(
					['M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-.464 5.535a1 1 0 10-1.415-1.414 3 3 0 01-4.242 0 1 1 0 00-1.415 1.414 5 5 0 007.072 0z'])
			}),
			_Utils_Tuple2(
			'emoji-sad',
			{
				a: _List_fromArray(
					['M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-7.536 5.879a1 1 0 001.415 0 3 3 0 014.242 0 1 1 0 001.415-1.415 5 5 0 00-7.072 0 1 1 0 000 1.415z'])
			}),
			_Utils_Tuple2(
			'empty',
			{a: _List_Nil, b: _List_Nil}),
			_Utils_Tuple2(
			'exclamation',
			{
				a: _List_fromArray(
					['M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z']),
				b: _List_fromArray(
					['M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z'])
			}),
			_Utils_Tuple2(
			'exclamation-circle',
			{
				a: _List_fromArray(
					['M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z'])
			}),
			_Utils_Tuple2(
			'external-link',
			{
				a: _List_fromArray(
					['M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14']),
				b: _List_fromArray(
					['M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z', 'M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z'])
			}),
			_Utils_Tuple2(
			'eye',
			{
				a: _List_fromArray(
					['M15 12a3 3 0 11-6 0 3 3 0 016 0z', 'M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z']),
				b: _List_fromArray(
					['M10 12a2 2 0 100-4 2 2 0 000 4z', 'M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z'])
			}),
			_Utils_Tuple2(
			'eye-off',
			{
				a: _List_fromArray(
					['M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21']),
				b: _List_fromArray(
					['M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z', 'M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z'])
			}),
			_Utils_Tuple2(
			'fast-forward',
			{
				a: _List_fromArray(
					['M11.933 12.8a1 1 0 000-1.6L6.6 7.2A1 1 0 005 8v8a1 1 0 001.6.8l5.333-4zM19.933 12.8a1 1 0 000-1.6l-5.333-4A1 1 0 0013 8v8a1 1 0 001.6.8l5.333-4z']),
				b: _List_fromArray(
					['M4.555 5.168A1 1 0 003 6v8a1 1 0 001.555.832L10 11.202V14a1 1 0 001.555.832l6-4a1 1 0 000-1.664l-6-4A1 1 0 0010 6v2.798l-5.445-3.63z'])
			}),
			_Utils_Tuple2(
			'film',
			{
				a: _List_fromArray(
					['M7 4v16M17 4v16M3 8h4m10 0h4M3 12h18M3 16h4m10 0h4M4 20h16a1 1 0 001-1V5a1 1 0 00-1-1H4a1 1 0 00-1 1v14a1 1 0 001 1z']),
				b: _List_fromArray(
					['M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm3 2h6v4H7V5zm8 8v2h1v-2h-1zm-2-2H7v4h6v-4zm2 0h1V9h-1v2zm1-4V5h-1v2h1zM5 5v2H4V5h1zm0 4H4v2h1V9zm-1 4h1v2H4v-2z'])
			}),
			_Utils_Tuple2(
			'filter',
			{
				a: _List_fromArray(
					['M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z']),
				b: _List_fromArray(
					['M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z'])
			}),
			_Utils_Tuple2(
			'finger-print',
			{
				a: _List_fromArray(
					['M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4']),
				b: _List_fromArray(
					['M6.625 2.655A9 9 0 0119 11a1 1 0 11-2 0 7 7 0 00-9.625-6.492 1 1 0 11-.75-1.853zM4.662 4.959A1 1 0 014.75 6.37 6.97 6.97 0 003 11a1 1 0 11-2 0 8.97 8.97 0 012.25-5.953 1 1 0 011.412-.088z', 'M5 11a5 5 0 1110 0 1 1 0 11-2 0 3 3 0 10-6 0c0 1.677-.345 3.276-.968 4.729a1 1 0 11-1.838-.789A9.964 9.964 0 005 11zm8.921 2.012a1 1 0 01.831 1.145 19.86 19.86 0 01-.545 2.436 1 1 0 11-1.92-.558c.207-.713.371-1.445.49-2.192a1 1 0 011.144-.83z', 'M10 10a1 1 0 011 1c0 2.236-.46 4.368-1.29 6.304a1 1 0 01-1.838-.789A13.952 13.952 0 009 11a1 1 0 011-1z'])
			}),
			_Utils_Tuple2(
			'fire',
			{
				a: _List_fromArray(
					['M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z', 'M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z']),
				b: _List_fromArray(
					['M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z'])
			}),
			_Utils_Tuple2(
			'flag',
			{
				a: _List_fromArray(
					['M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6h-8.5l-1-1H5a2 2 0 00-2 2zm9-13.5V9']),
				b: _List_fromArray(
					['M3 6a3 3 0 013-3h10a1 1 0 01.8 1.6L14.25 8l2.55 3.4A1 1 0 0116 13H6a1 1 0 00-1 1v3a1 1 0 11-2 0V6z'])
			}),
			_Utils_Tuple2(
			'folder',
			{
				a: _List_fromArray(
					['M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z']),
				b: _List_fromArray(
					['M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z'])
			}),
			_Utils_Tuple2(
			'folder-add',
			{
				a: _List_fromArray(
					['M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z']),
				b: _List_fromArray(
					['M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z', 'M8 11h4m-2-2v4'])
			}),
			_Utils_Tuple2(
			'folder-download',
			{
				a: _List_fromArray(
					['M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z']),
				b: _List_fromArray(
					['M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z', 'M10 9v4m0 0l-2-2m2 2l2-2'])
			}),
			_Utils_Tuple2(
			'folder-open',
			{
				a: _List_fromArray(
					['M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z']),
				b: _List_fromArray(
					['M2 6a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1H8a3 3 0 00-3 3v1.5a1.5 1.5 0 01-3 0V6z', 'M6 12a2 2 0 012-2h8a2 2 0 012 2v2a2 2 0 01-2 2H2h2a2 2 0 002-2v-2z'])
			}),
			_Utils_Tuple2(
			'folder-remove',
			{
				a: _List_fromArray(
					['M9 13h6M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z']),
				b: _List_fromArray(
					['M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z', 'M8 11h4'])
			}),
			_Utils_Tuple2(
			'gift',
			{
				a: _List_fromArray(
					['M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7']),
				b: _List_fromArray(
					['M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z', 'M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z'])
			}),
			_Utils_Tuple2(
			'globe',
			{
				a: _List_fromArray(
					['M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM4.332 8.027a6.012 6.012 0 011.912-2.706C6.512 5.73 6.974 6 7.5 6A1.5 1.5 0 019 7.5V8a2 2 0 004 0 2 2 0 011.523-1.943A5.977 5.977 0 0116 10c0 .34-.028.675-.083 1H15a2 2 0 00-2 2v2.197A5.973 5.973 0 0110 16v-2a2 2 0 00-2-2 2 2 0 01-2-2 2 2 0 00-1.668-1.973z'])
			}),
			_Utils_Tuple2(
			'globe-alt',
			{
				a: _List_fromArray(
					['M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9']),
				b: _List_fromArray(
					['M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z'])
			}),
			_Utils_Tuple2(
			'hand',
			{
				a: _List_fromArray(
					['M7 11.5V14m0-2.5v-6a1.5 1.5 0 113 0m-3 6a1.5 1.5 0 00-3 0v2a7.5 7.5 0 0015 0v-5a1.5 1.5 0 00-3 0m-6-3V11m0-5.5v-1a1.5 1.5 0 013 0v1m0 0V11m0-5.5a1.5 1.5 0 013 0v3m0 0V11']),
				b: _List_fromArray(
					['M9 3a1 1 0 012 0v5.5a.5.5 0 001 0V4a1 1 0 112 0v4.5a.5.5 0 001 0V6a1 1 0 112 0v5a7 7 0 11-14 0V9a1 1 0 012 0v2.5a.5.5 0 001 0V4a1 1 0 012 0v4.5a.5.5 0 001 0V3z'])
			}),
			_Utils_Tuple2(
			'hashtag',
			{
				a: _List_fromArray(
					['M7 20l4-16m2 16l4-16M6 9h14M4 15h14']),
				b: _List_fromArray(
					['M9.243 3.03a1 1 0 01.727 1.213L9.53 6h2.94l.56-2.243a1 1 0 111.94.486L14.53 6H17a1 1 0 110 2h-2.97l-1 4H15a1 1 0 110 2h-2.47l-.56 2.242a1 1 0 11-1.94-.485L10.47 14H7.53l-.56 2.242a1 1 0 11-1.94-.485L5.47 14H3a1 1 0 110-2h2.97l1-4H5a1 1 0 110-2h2.47l.56-2.243a1 1 0 011.213-.727zM9.03 8l-1 4h2.938l1-4H9.031z'])
			}),
			_Utils_Tuple2(
			'heart',
			{
				a: _List_fromArray(
					['M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z']),
				b: _List_fromArray(
					['M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z'])
			}),
			_Utils_Tuple2(
			'home',
			{
				a: _List_fromArray(
					['M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6']),
				b: _List_fromArray(
					['M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z'])
			}),
			_Utils_Tuple2(
			'identification',
			{
				a: _List_fromArray(
					['M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2']),
				b: _List_fromArray(
					['M10 2a1 1 0 00-1 1v1a1 1 0 002 0V3a1 1 0 00-1-1zM4 4h3a3 3 0 006 0h3a2 2 0 012 2v9a2 2 0 01-2 2H4a2 2 0 01-2-2V6a2 2 0 012-2zm2.5 7a1.5 1.5 0 100-3 1.5 1.5 0 000 3zm2.45 4a2.5 2.5 0 10-4.9 0h4.9zM12 9a1 1 0 100 2h3a1 1 0 100-2h-3zm-1 4a1 1 0 011-1h2a1 1 0 110 2h-2a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'inbox',
			{
				a: _List_fromArray(
					['M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4']),
				b: _List_fromArray(
					['M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm0 2h10v7h-2l-1 2H8l-1-2H5V5z'])
			}),
			_Utils_Tuple2(
			'inbox-in',
			{
				a: _List_fromArray(
					['M8 4H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-2m-4-1v8m0 0l3-3m-3 3L9 8m-5 5h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293h3.172a1 1 0 00.707-.293l2.414-2.414a1 1 0 01.707-.293H20']),
				b: _List_fromArray(
					['M8.707 7.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l2-2a1 1 0 00-1.414-1.414L11 7.586V3a1 1 0 10-2 0v4.586l-.293-.293z', 'M3 5a2 2 0 012-2h1a1 1 0 010 2H5v7h2l1 2h4l1-2h2V5h-1a1 1 0 110-2h1a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5z'])
			}),
			_Utils_Tuple2(
			'information-circle',
			{
				a: _List_fromArray(
					['M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z'])
			}),
			_Utils_Tuple2(
			'key',
			{
				a: _List_fromArray(
					['M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z']),
				b: _List_fromArray(
					['M18 8a6 6 0 01-7.743 5.743L10 14l-1 1-1 1H6v2H2v-4l4.257-4.257A6 6 0 1118 8zm-6-4a1 1 0 100 2 2 2 0 012 2 1 1 0 102 0 4 4 0 00-4-4z'])
			}),
			_Utils_Tuple2(
			'library',
			{
				a: _List_fromArray(
					['M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z']),
				b: _List_fromArray(
					['M10.496 2.132a1 1 0 00-.992 0l-7 4A1 1 0 003 8v7a1 1 0 100 2h14a1 1 0 100-2V8a1 1 0 00.496-1.868l-7-4zM6 9a1 1 0 00-1 1v3a1 1 0 102 0v-3a1 1 0 00-1-1zm3 1a1 1 0 012 0v3a1 1 0 11-2 0v-3zm5-1a1 1 0 00-1 1v3a1 1 0 102 0v-3a1 1 0 00-1-1z'])
			}),
			_Utils_Tuple2(
			'light-bulb',
			{
				a: _List_fromArray(
					['M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z']),
				b: _List_fromArray(
					['M11 3a1 1 0 10-2 0v1a1 1 0 102 0V3zM15.657 5.757a1 1 0 00-1.414-1.414l-.707.707a1 1 0 001.414 1.414l.707-.707zM18 10a1 1 0 01-1 1h-1a1 1 0 110-2h1a1 1 0 011 1zM5.05 6.464A1 1 0 106.464 5.05l-.707-.707a1 1 0 00-1.414 1.414l.707.707zM5 10a1 1 0 01-1 1H3a1 1 0 110-2h1a1 1 0 011 1zM8 16v-1h4v1a2 2 0 11-4 0zM12 14c.015-.34.208-.646.477-.859a4 4 0 10-4.954 0c.27.213.462.519.476.859h4.002z'])
			}),
			_Utils_Tuple2(
			'lightning-bolt',
			{
				a: _List_fromArray(
					['M13 10V3L4 14h7v7l9-11h-7z']),
				b: _List_fromArray(
					['M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z'])
			}),
			_Utils_Tuple2(
			'link',
			{
				a: _List_fromArray(
					['M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1']),
				b: _List_fromArray(
					['M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z'])
			}),
			_Utils_Tuple2(
			'location-marker',
			{
				a: _List_fromArray(
					['M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z', 'M15 11a3 3 0 11-6 0 3 3 0 016 0z']),
				b: _List_fromArray(
					['M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z'])
			}),
			_Utils_Tuple2(
			'lock-closed',
			{
				a: _List_fromArray(
					['M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z']),
				b: _List_fromArray(
					['M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z'])
			}),
			_Utils_Tuple2(
			'lock-open',
			{
				a: _List_fromArray(
					['M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z']),
				b: _List_fromArray(
					['M10 2a5 5 0 00-5 5v2a2 2 0 00-2 2v5a2 2 0 002 2h10a2 2 0 002-2v-5a2 2 0 00-2-2H7V7a3 3 0 015.905-.75 1 1 0 001.937-.5A5.002 5.002 0 0010 2z'])
			}),
			_Utils_Tuple2(
			'login',
			{
				a: _List_fromArray(
					['M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1']),
				b: _List_fromArray(
					['M3 3a1 1 0 011 1v12a1 1 0 11-2 0V4a1 1 0 011-1zm7.707 3.293a1 1 0 010 1.414L9.414 9H17a1 1 0 110 2H9.414l1.293 1.293a1 1 0 01-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'logout',
			{
				a: _List_fromArray(
					['M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1']),
				b: _List_fromArray(
					['M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z'])
			}),
			_Utils_Tuple2(
			'mail',
			{
				a: _List_fromArray(
					['M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z']),
				b: _List_fromArray(
					['M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z', 'M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z'])
			}),
			_Utils_Tuple2(
			'mail-open',
			{
				a: _List_fromArray(
					['M3 19v-8.93a2 2 0 01.89-1.664l7-4.666a2 2 0 012.22 0l7 4.666A2 2 0 0121 10.07V19M3 19a2 2 0 002 2h14a2 2 0 002-2M3 19l6.75-4.5M21 19l-6.75-4.5M3 10l6.75 4.5M21 10l-6.75 4.5m0 0l-1.14.76a2 2 0 01-2.22 0l-1.14-.76']),
				b: _List_fromArray(
					['M2.94 6.412A2 2 0 002 8.108V16a2 2 0 002 2h12a2 2 0 002-2V8.108a2 2 0 00-.94-1.696l-6-3.75a2 2 0 00-2.12 0l-6 3.75zm2.615 2.423a1 1 0 10-1.11 1.664l5 3.333a1 1 0 001.11 0l5-3.333a1 1 0 00-1.11-1.664L10 11.798 5.555 8.835z'])
			}),
			_Utils_Tuple2(
			'map',
			{
				a: _List_fromArray(
					['M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7']),
				b: _List_fromArray(
					['M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z'])
			}),
			_Utils_Tuple2(
			'menu',
			{
				a: _List_fromArray(
					['M4 6h16M4 12h16M4 18h16']),
				b: _List_fromArray(
					['M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'menu-alt-1',
			{
				a: _List_fromArray(
					['M4 6h16M4 12h8m-8 6h16']),
				b: _List_fromArray(
					['M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h6a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'menu-alt-2',
			{
				a: _List_fromArray(
					['M4 6h16M4 12h16M4 18h7']),
				b: _List_fromArray(
					['M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h6a1 1 0 110 2H4a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'menu-alt-3',
			{
				a: _List_fromArray(
					['M4 6h16M4 12h16m-7 6h7']),
				b: _List_fromArray(
					['M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM9 15a1 1 0 011-1h6a1 1 0 110 2h-6a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'menu-alt-4',
			{
				a: _List_fromArray(
					['M4 8h16M4 16h16']),
				b: _List_fromArray(
					['M3 7a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 13a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'microphone',
			{
				a: _List_fromArray(
					['M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z']),
				b: _List_fromArray(
					['M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z'])
			}),
			_Utils_Tuple2(
			'minus',
			{
				a: _List_fromArray(
					['M20 12H4']),
				b: _List_fromArray(
					['M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'minus-circle',
			{
				a: _List_fromArray(
					['M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z'])
			}),
			_Utils_Tuple2(
			'minus-sm',
			{
				a: _List_fromArray(
					['M18 12H6']),
				b: _List_fromArray(
					['M5 10a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'moon',
			{
				a: _List_fromArray(
					['M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z']),
				b: _List_fromArray(
					['M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z'])
			}),
			_Utils_Tuple2(
			'music-note',
			{
				a: _List_fromArray(
					['M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3']),
				b: _List_fromArray(
					['M18 3a1 1 0 00-1.196-.98l-10 2A1 1 0 006 5v9.114A4.369 4.369 0 005 14c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V7.82l8-1.6v5.894A4.37 4.37 0 0015 12c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V3z'])
			}),
			_Utils_Tuple2(
			'newspaper',
			{
				a: _List_fromArray(
					['M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z']),
				b: _List_fromArray(
					['M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z', 'M15 7h1a2 2 0 012 2v5.5a1.5 1.5 0 01-3 0V7z'])
			}),
			_Utils_Tuple2(
			'office-building',
			{
				a: _List_fromArray(
					['M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4']),
				b: _List_fromArray(
					['M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z'])
			}),
			_Utils_Tuple2(
			'paper-airplane',
			{
				a: _List_fromArray(
					['M12 19l9 2-9-18-9 18 9-2zm0 0v-8']),
				b: _List_fromArray(
					['M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z'])
			}),
			_Utils_Tuple2(
			'paper-clip',
			{
				a: _List_fromArray(
					['M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13']),
				b: _List_fromArray(
					['M8 4a3 3 0 00-3 3v4a5 5 0 0010 0V7a1 1 0 112 0v4a7 7 0 11-14 0V7a5 5 0 0110 0v4a3 3 0 11-6 0V7a1 1 0 012 0v4a1 1 0 102 0V7a3 3 0 00-3-3z'])
			}),
			_Utils_Tuple2(
			'pause',
			{
				a: _List_fromArray(
					['M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z'])
			}),
			_Utils_Tuple2(
			'pencil',
			{
				a: _List_fromArray(
					['M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z']),
				b: _List_fromArray(
					['M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z'])
			}),
			_Utils_Tuple2(
			'pencil-alt',
			{
				a: _List_fromArray(
					['M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z']),
				b: _List_fromArray(
					['M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z', 'M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z'])
			}),
			_Utils_Tuple2(
			'phone',
			{
				a: _List_fromArray(
					['M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z']),
				b: _List_fromArray(
					['M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z'])
			}),
			_Utils_Tuple2(
			'phone-incoming',
			{
				a: _List_fromArray(
					['M21 3l-6 6m0 0V4m0 5h5M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z']),
				b: _List_fromArray(
					['M14.414 7l3.293-3.293a1 1 0 00-1.414-1.414L13 5.586V4a1 1 0 10-2 0v4.003a.996.996 0 00.617.921A.997.997 0 0012 9h4a1 1 0 100-2h-1.586z', 'M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z'])
			}),
			_Utils_Tuple2(
			'phone-missed-call',
			{
				a: _List_fromArray(
					['M16 8l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z']),
				b: _List_fromArray(
					['M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z', 'M16.707 3.293a1 1 0 010 1.414L15.414 6l1.293 1.293a1 1 0 01-1.414 1.414L14 7.414l-1.293 1.293a1 1 0 11-1.414-1.414L12.586 6l-1.293-1.293a1 1 0 011.414-1.414L14 4.586l1.293-1.293a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'phone-outgoing',
			{
				a: _List_fromArray(
					['M16 3h5m0 0v5m0-5l-6 6M5 3a2 2 0 00-2 2v1c0 8.284 6.716 15 15 15h1a2 2 0 002-2v-3.28a1 1 0 00-.684-.948l-4.493-1.498a1 1 0 00-1.21.502l-1.13 2.257a11.042 11.042 0 01-5.516-5.517l2.257-1.128a1 1 0 00.502-1.21L9.228 3.683A1 1 0 008.279 3H5z']),
				b: _List_fromArray(
					['M17.924 2.617a.997.997 0 00-.215-.322l-.004-.004A.997.997 0 0017 2h-4a1 1 0 100 2h1.586l-3.293 3.293a1 1 0 001.414 1.414L16 5.414V7a1 1 0 102 0V3a.997.997 0 00-.076-.383z', 'M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z'])
			}),
			_Utils_Tuple2(
			'photograph',
			{
				a: _List_fromArray(
					['M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z']),
				b: _List_fromArray(
					['M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z'])
			}),
			_Utils_Tuple2(
			'play',
			{
				a: _List_fromArray(
					['M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z', 'M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z'])
			}),
			_Utils_Tuple2(
			'plus',
			{
				a: _List_fromArray(
					['M12 4v16m8-8H4']),
				b: _List_fromArray(
					['M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z'])
			}),
			_Utils_Tuple2(
			'plus-circle',
			{
				a: _List_fromArray(
					['M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z'])
			}),
			_Utils_Tuple2(
			'plus-sm',
			{
				a: _List_fromArray(
					['M12 6v6m0 0v6m0-6h6m-6 0H6']),
				b: _List_fromArray(
					['M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z'])
			}),
			_Utils_Tuple2(
			'presentation-chart-bar',
			{
				a: _List_fromArray(
					['M8 13v-1m4 1v-3m4 3V8M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z']),
				b: _List_fromArray(
					['M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11 4a1 1 0 10-2 0v4a1 1 0 102 0V7zm-3 1a1 1 0 10-2 0v3a1 1 0 102 0V8zM8 9a1 1 0 00-2 0v2a1 1 0 102 0V9z'])
			}),
			_Utils_Tuple2(
			'presentation-chart-line',
			{
				a: _List_fromArray(
					['M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z']),
				b: _List_fromArray(
					['M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 0l-2 2a1 1 0 101.414 1.414L8 10.414l1.293 1.293a1 1 0 001.414 0l4-4z'])
			}),
			_Utils_Tuple2(
			'printer',
			{
				a: _List_fromArray(
					['M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z']),
				b: _List_fromArray(
					['M5 4v3H4a2 2 0 00-2 2v3a2 2 0 002 2h1v2a2 2 0 002 2h6a2 2 0 002-2v-2h1a2 2 0 002-2V9a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H7a2 2 0 00-2 2zm8 0H7v3h6V4zm0 8H7v4h6v-4z'])
			}),
			_Utils_Tuple2(
			'puzzle',
			{
				a: _List_fromArray(
					['M11 4a2 2 0 114 0v1a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-1a2 2 0 100 4h1a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-1a2 2 0 10-4 0v1a1 1 0 01-1 1H7a1 1 0 01-1-1v-3a1 1 0 00-1-1H4a2 2 0 110-4h1a1 1 0 001-1V7a1 1 0 011-1h3a1 1 0 001-1V4z']),
				b: _List_fromArray(
					['M10 3.5a1.5 1.5 0 013 0V4a1 1 0 001 1h3a1 1 0 011 1v3a1 1 0 01-1 1h-.5a1.5 1.5 0 000 3h.5a1 1 0 011 1v3a1 1 0 01-1 1h-3a1 1 0 01-1-1v-.5a1.5 1.5 0 00-3 0v.5a1 1 0 01-1 1H6a1 1 0 01-1-1v-3a1 1 0 00-1-1h-.5a1.5 1.5 0 010-3H4a1 1 0 001-1V6a1 1 0 011-1h3a1 1 0 001-1v-.5z'])
			}),
			_Utils_Tuple2(
			'qrcode',
			{
				a: _List_fromArray(
					['M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z']),
				b: _List_fromArray(
					['M3 4a1 1 0 011-1h3a1 1 0 011 1v3a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm2 2V5h1v1H5zM3 13a1 1 0 011-1h3a1 1 0 011 1v3a1 1 0 01-1 1H4a1 1 0 01-1-1v-3zm2 2v-1h1v1H5zM13 3a1 1 0 00-1 1v3a1 1 0 001 1h3a1 1 0 001-1V4a1 1 0 00-1-1h-3zm1 2v1h1V5h-1z', 'M11 4a1 1 0 10-2 0v1a1 1 0 002 0V4zM10 7a1 1 0 011 1v1h2a1 1 0 110 2h-3a1 1 0 01-1-1V8a1 1 0 011-1zM16 9a1 1 0 100 2 1 1 0 000-2zM9 13a1 1 0 011-1h1a1 1 0 110 2v2a1 1 0 11-2 0v-3zM7 11a1 1 0 100-2H4a1 1 0 100 2h3zM17 13a1 1 0 01-1 1h-2a1 1 0 110-2h2a1 1 0 011 1zM16 17a1 1 0 100-2h-3a1 1 0 100 2h3z'])
			}),
			_Utils_Tuple2(
			'question-mark-circle',
			{
				a: _List_fromArray(
					['M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z'])
			}),
			_Utils_Tuple2(
			'receipt-refund',
			{
				a: _List_fromArray(
					['M16 15v-1a4 4 0 00-4-4H8m0 0l3 3m-3-3l3-3m9 14V5a2 2 0 00-2-2H6a2 2 0 00-2 2v16l4-2 4 2 4-2 4 2z']),
				b: _List_fromArray(
					['M5 2a2 2 0 00-2 2v14l3.5-2 3.5 2 3.5-2 3.5 2V4a2 2 0 00-2-2H5zm4.707 3.707a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L8.414 9H10a3 3 0 013 3v1a1 1 0 102 0v-1a5 5 0 00-5-5H8.414l1.293-1.293z'])
			}),
			_Utils_Tuple2(
			'receipt-tax',
			{
				a: _List_fromArray(
					['M9 14l6-6m-5.5.5h.01m4.99 5h.01M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16l3.5-2 3.5 2 3.5-2 3.5 2zM10 8.5a.5.5 0 11-1 0 .5.5 0 011 0zm5 5a.5.5 0 11-1 0 .5.5 0 011 0z']),
				b: _List_fromArray(
					['M5 2a2 2 0 00-2 2v14l3.5-2 3.5 2 3.5-2 3.5 2V4a2 2 0 00-2-2H5zm2.5 3a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm6.207.293a1 1 0 00-1.414 0l-6 6a1 1 0 101.414 1.414l6-6a1 1 0 000-1.414zM12.5 10a1.5 1.5 0 100 3 1.5 1.5 0 000-3z'])
			}),
			_Utils_Tuple2(
			'refresh',
			{
				a: _List_fromArray(
					['M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15']),
				b: _List_fromArray(
					['M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z'])
			}),
			_Utils_Tuple2(
			'reply',
			{
				a: _List_fromArray(
					['M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6']),
				b: _List_fromArray(
					['M7.707 3.293a1 1 0 010 1.414L5.414 7H11a7 7 0 017 7v2a1 1 0 11-2 0v-2a5 5 0 00-5-5H5.414l2.293 2.293a1 1 0 11-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z'])
			}),
			_Utils_Tuple2(
			'rewind',
			{
				a: _List_fromArray(
					['M12.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0019 16V8a1 1 0 00-1.6-.8l-5.333 4zM4.066 11.2a1 1 0 000 1.6l5.334 4A1 1 0 0011 16V8a1 1 0 00-1.6-.8l-5.334 4z']),
				b: _List_fromArray(
					['M8.445 14.832A1 1 0 0010 14v-2.798l5.445 3.63A1 1 0 0017 14V6a1 1 0 00-1.555-.832L10 8.798V6a1 1 0 00-1.555-.832l-6 4a1 1 0 000 1.664l6 4z'])
			}),
			_Utils_Tuple2(
			'rss',
			{
				a: _List_fromArray(
					['M6 5c7.18 0 13 5.82 13 13M6 11a7 7 0 017 7m-6 0a1 1 0 11-2 0 1 1 0 012 0z']),
				b: _List_fromArray(
					['M5 3a1 1 0 000 2c5.523 0 10 4.477 10 10a1 1 0 102 0C17 8.373 11.627 3 5 3z', 'M4 9a1 1 0 011-1 7 7 0 017 7 1 1 0 11-2 0 5 5 0 00-5-5 1 1 0 01-1-1zM3 15a2 2 0 114 0 2 2 0 01-4 0z'])
			}),
			_Utils_Tuple2(
			'save',
			{
				a: _List_fromArray(
					['M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4']),
				b: _List_fromArray(
					['M7.707 10.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V6h5a2 2 0 012 2v7a2 2 0 01-2 2H4a2 2 0 01-2-2V8a2 2 0 012-2h5v5.586l-1.293-1.293zM9 4a1 1 0 012 0v2H9V4z'])
			}),
			_Utils_Tuple2(
			'save-as',
			{
				a: _List_fromArray(
					['M17 16v2a2 2 0 01-2 2H5a2 2 0 01-2-2v-7a2 2 0 012-2h2m3-4H9a2 2 0 00-2 2v7a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-1m-1 4l-3 3m0 0l-3-3m3 3V3']),
				b: _List_fromArray(
					['M9.707 7.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L13 8.586V5h3a2 2 0 012 2v5a2 2 0 01-2 2H8a2 2 0 01-2-2V7a2 2 0 012-2h3v3.586L9.707 7.293zM11 3a1 1 0 112 0v2h-2V3z', 'M4 9a2 2 0 00-2 2v5a2 2 0 002 2h8a2 2 0 002-2H4V9z'])
			}),
			_Utils_Tuple2(
			'scale',
			{
				a: _List_fromArray(
					['M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3']),
				b: _List_fromArray(
					['M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1zm-5 8.274l-.818 2.552c.25.112.526.174.818.174.292 0 .569-.062.818-.174L5 10.274zm10 0l-.818 2.552c.25.112.526.174.818.174.292 0 .569-.062.818-.174L15 10.274z'])
			}),
			_Utils_Tuple2(
			'scissors',
			{
				a: _List_fromArray(
					['M14.121 14.121L19 19m-7-7l7-7m-7 7l-2.879 2.879M12 12L9.121 9.121m0 5.758a3 3 0 10-4.243 4.243 3 3 0 004.243-4.243zm0-5.758a3 3 0 10-4.243-4.243 3 3 0 004.243 4.243z']),
				b: _List_fromArray(
					['M5.5 2a3.5 3.5 0 101.665 6.58L8.585 10l-1.42 1.42a3.5 3.5 0 101.414 1.414l8.128-8.127a1 1 0 00-1.414-1.414L10 8.586l-1.42-1.42A3.5 3.5 0 005.5 2zM4 5.5a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zm0 9a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0z', 'M12.828 11.414a1 1 0 00-1.414 1.414l3.879 3.88a1 1 0 001.414-1.415l-3.879-3.879z'])
			}),
			_Utils_Tuple2(
			'search',
			{
				a: _List_fromArray(
					['M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z']),
				b: _List_fromArray(
					['M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z'])
			}),
			_Utils_Tuple2(
			'search-circle',
			{
				a: _List_fromArray(
					['M8 16l2.879-2.879m0 0a3 3 0 104.243-4.242 3 3 0 00-4.243 4.242zM21 12a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M9 9a2 2 0 114 0 2 2 0 01-4 0z', 'M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a4 4 0 00-3.446 6.032l-2.261 2.26a1 1 0 101.414 1.415l2.261-2.261A4 4 0 1011 5z'])
			}),
			_Utils_Tuple2(
			'selector',
			{
				a: _List_fromArray(
					['M8 9l4-4 4 4m0 6l-4 4-4-4']),
				b: _List_fromArray(
					['M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'server',
			{
				a: _List_fromArray(
					['M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01']),
				b: _List_fromArray(
					['M2 5a2 2 0 012-2h12a2 2 0 012 2v2a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm14 1a1 1 0 11-2 0 1 1 0 012 0zM2 13a2 2 0 012-2h12a2 2 0 012 2v2a2 2 0 01-2 2H4a2 2 0 01-2-2v-2zm14 1a1 1 0 11-2 0 1 1 0 012 0z'])
			}),
			_Utils_Tuple2(
			'share',
			{
				a: _List_fromArray(
					['M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z']),
				b: _List_fromArray(
					['M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z'])
			}),
			_Utils_Tuple2(
			'shield-check',
			{
				a: _List_fromArray(
					['M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z']),
				b: _List_fromArray(
					['M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'])
			}),
			_Utils_Tuple2(
			'shield-exclamation',
			{
				a: _List_fromArray(
					['M20.618 5.984A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016zM12 9v2m0 4h.01']),
				b: _List_fromArray(
					['M10 1.944A11.954 11.954 0 012.166 5C2.056 5.649 2 6.319 2 7c0 5.225 3.34 9.67 8 11.317C14.66 16.67 18 12.225 18 7c0-.682-.057-1.35-.166-2.001A11.954 11.954 0 0110 1.944zM11 14a1 1 0 11-2 0 1 1 0 012 0zm0-7a1 1 0 10-2 0v3a1 1 0 102 0V7z'])
			}),
			_Utils_Tuple2(
			'shopping-bag',
			{
				a: _List_fromArray(
					['M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z']),
				b: _List_fromArray(
					['M10 2a4 4 0 00-4 4v1H5a1 1 0 00-.994.89l-1 9A1 1 0 004 18h12a1 1 0 00.994-1.11l-1-9A1 1 0 0015 7h-1V6a4 4 0 00-4-4zm2 5V6a2 2 0 10-4 0v1h4zm-6 3a1 1 0 112 0 1 1 0 01-2 0zm7-1a1 1 0 100 2 1 1 0 000-2z'])
			}),
			_Utils_Tuple2(
			'shopping-cart',
			{
				a: _List_fromArray(
					['M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z']),
				b: _List_fromArray(
					['M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z'])
			}),
			_Utils_Tuple2(
			'sort-ascending',
			{
				a: _List_fromArray(
					['M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12']),
				b: _List_fromArray(
					['M3 3a1 1 0 000 2h11a1 1 0 100-2H3zM3 7a1 1 0 000 2h5a1 1 0 000-2H3zM3 11a1 1 0 100 2h4a1 1 0 100-2H3zM13 16a1 1 0 102 0v-5.586l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 101.414 1.414L13 10.414V16z'])
			}),
			_Utils_Tuple2(
			'sort-descending',
			{
				a: _List_fromArray(
					['M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4']),
				b: _List_fromArray(
					['M3 3a1 1 0 000 2h11a1 1 0 100-2H3zM3 7a1 1 0 000 2h7a1 1 0 100-2H3zM3 11a1 1 0 100 2h4a1 1 0 100-2H3zM15 8a1 1 0 10-2 0v5.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L15 13.586V8z'])
			}),
			_Utils_Tuple2(
			'sparkles',
			{
				a: _List_fromArray(
					['M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z']),
				b: _List_fromArray(
					['M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732l-3.354 1.935-1.18 4.455a1 1 0 01-1.933 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732l3.354-1.935 1.18-4.455A1 1 0 0112 2z'])
			}),
			_Utils_Tuple2(
			'speakerphone',
			{
				a: _List_fromArray(
					['M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z']),
				b: _List_fromArray(
					['M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h.28l1.771 5.316A1 1 0 008 18h1a1 1 0 001-1v-4.382l6.553 3.276A1 1 0 0018 15V3z'])
			}),
			_Utils_Tuple2(
			'star',
			{
				a: _List_fromArray(
					['M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z']),
				b: _List_fromArray(
					['M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z'])
			}),
			_Utils_Tuple2(
			'status-offline',
			{
				a: _List_fromArray(
					['M18.364 5.636a9 9 0 010 12.728m0 0l-2.829-2.829m2.829 2.829L21 21M15.536 8.464a5 5 0 010 7.072m0 0l-2.829-2.829m-4.243 2.829a4.978 4.978 0 01-1.414-2.83m-1.414 5.658a9 9 0 01-2.167-9.238m7.824 2.167a1 1 0 111.414 1.414m-1.414-1.414L3 3m8.293 8.293l1.414 1.414']),
				b: _List_fromArray(
					['M3.707 2.293a1 1 0 00-1.414 1.414l6.921 6.922c.05.062.105.118.168.167l6.91 6.911a1 1 0 001.415-1.414l-.675-.675a9.001 9.001 0 00-.668-11.982A1 1 0 1014.95 5.05a7.002 7.002 0 01.657 9.143l-1.435-1.435a5.002 5.002 0 00-.636-6.294A1 1 0 0012.12 7.88c.924.923 1.12 2.3.587 3.415l-1.992-1.992a.922.922 0 00-.018-.018l-6.99-6.991zM3.238 8.187a1 1 0 00-1.933-.516c-.8 3-.025 6.336 2.331 8.693a1 1 0 001.414-1.415 6.997 6.997 0 01-1.812-6.762zM7.4 11.5a1 1 0 10-1.73 1c.214.371.48.72.795 1.035a1 1 0 001.414-1.414c-.191-.191-.35-.4-.478-.622z'])
			}),
			_Utils_Tuple2(
			'status-online',
			{
				a: _List_fromArray(
					['M5.636 18.364a9 9 0 010-12.728m12.728 0a9 9 0 010 12.728m-9.9-2.829a5 5 0 010-7.07m7.072 0a5 5 0 010 7.07M13 12a1 1 0 11-2 0 1 1 0 012 0z']),
				b: _List_fromArray(
					['M5.05 3.636a1 1 0 010 1.414 7 7 0 000 9.9 1 1 0 11-1.414 1.414 9 9 0 010-12.728 1 1 0 011.414 0zm9.9 0a1 1 0 011.414 0 9 9 0 010 12.728 1 1 0 11-1.414-1.414 7 7 0 000-9.9 1 1 0 010-1.414zM7.879 6.464a1 1 0 010 1.414 3 3 0 000 4.243 1 1 0 11-1.415 1.414 5 5 0 010-7.07 1 1 0 011.415 0zm4.242 0a1 1 0 011.415 0 5 5 0 010 7.072 1 1 0 01-1.415-1.415 3 3 0 000-4.242 1 1 0 010-1.415zM10 9a1 1 0 011 1v.01a1 1 0 11-2 0V10a1 1 0 011-1z'])
			}),
			_Utils_Tuple2(
			'stop',
			{
				a: _List_fromArray(
					['M21 12a9 9 0 11-18 0 9 9 0 0118 0z', 'M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z'])
			}),
			_Utils_Tuple2(
			'sun',
			{
				a: _List_fromArray(
					['M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z']),
				b: _List_fromArray(
					['M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z'])
			}),
			_Utils_Tuple2(
			'support',
			{
				a: _List_fromArray(
					['M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192l-3.536 3.536M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z']),
				b: _List_fromArray(
					['M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-2 0c0 .993-.241 1.929-.668 2.754l-1.524-1.525a3.997 3.997 0 00.078-2.183l1.562-1.562C15.802 8.249 16 9.1 16 10zm-5.165 3.913l1.58 1.58A5.98 5.98 0 0110 16a5.976 5.976 0 01-2.516-.552l1.562-1.562a4.006 4.006 0 001.789.027zm-4.677-2.796a4.002 4.002 0 01-.041-2.08l-.08.08-1.53-1.533A5.98 5.98 0 004 10c0 .954.223 1.856.619 2.657l1.54-1.54zm1.088-6.45A5.974 5.974 0 0110 4c.954 0 1.856.223 2.657.619l-1.54 1.54a4.002 4.002 0 00-2.346.033L7.246 4.668zM12 10a2 2 0 11-4 0 2 2 0 014 0z'])
			}),
			_Utils_Tuple2(
			'switch-horizontal',
			{
				a: _List_fromArray(
					['M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4']),
				b: _List_fromArray(
					['M8 5a1 1 0 100 2h5.586l-1.293 1.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L13.586 5H8zM12 15a1 1 0 100-2H6.414l1.293-1.293a1 1 0 10-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L6.414 15H12z'])
			}),
			_Utils_Tuple2(
			'switch-vertical',
			{
				a: _List_fromArray(
					['M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4']),
				b: _List_fromArray(
					['M5 12a1 1 0 102 0V6.414l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L5 6.414V12zM15 8a1 1 0 10-2 0v5.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L15 13.586V8z'])
			}),
			_Utils_Tuple2(
			'table',
			{
				a: _List_fromArray(
					['M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z']),
				b: _List_fromArray(
					['M5 4a3 3 0 00-3 3v6a3 3 0 003 3h10a3 3 0 003-3V7a3 3 0 00-3-3H5zm-1 9v-1h5v2H5a1 1 0 01-1-1zm7 1h4a1 1 0 001-1v-1h-5v2zm0-4h5V8h-5v2zM9 8H4v2h5V8z'])
			}),
			_Utils_Tuple2(
			'tag',
			{
				a: _List_fromArray(
					['M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z']),
				b: _List_fromArray(
					['M17.707 9.293a1 1 0 010 1.414l-7 7a1 1 0 01-1.414 0l-7-7A.997.997 0 012 10V5a3 3 0 013-3h5c.256 0 .512.098.707.293l7 7zM5 6a1 1 0 100-2 1 1 0 000 2z'])
			}),
			_Utils_Tuple2(
			'template',
			{
				a: _List_fromArray(
					['M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z']),
				b: _List_fromArray(
					['M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z'])
			}),
			_Utils_Tuple2(
			'terminal',
			{
				a: _List_fromArray(
					['M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z']),
				b: _List_fromArray(
					['M2 5a2 2 0 012-2h12a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V5zm3.293 1.293a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 01-1.414-1.414L7.586 10 5.293 7.707a1 1 0 010-1.414zM11 12a1 1 0 100 2h3a1 1 0 100-2h-3z'])
			}),
			_Utils_Tuple2(
			'thumb-down',
			{
				a: _List_fromArray(
					['M10 14H5.236a2 2 0 01-1.789-2.894l3.5-7A2 2 0 018.736 3h4.018a2 2 0 01.485.06l3.76.94m-7 10v5a2 2 0 002 2h.096c.5 0 .905-.405.905-.904 0-.715.211-1.413.608-2.008L17 13V4m-7 10h2m5-10h2a2 2 0 012 2v6a2 2 0 01-2 2h-2.5']),
				b: _List_fromArray(
					['M18 9.5a1.5 1.5 0 11-3 0v-6a1.5 1.5 0 013 0v6zM14 9.667v-5.43a2 2 0 00-1.105-1.79l-.05-.025A4 4 0 0011.055 2H5.64a2 2 0 00-1.962 1.608l-1.2 6A2 2 0 004.44 12H8v4a2 2 0 002 2 1 1 0 001-1v-.667a4 4 0 01.8-2.4l1.4-1.866a4 4 0 00.8-2.4z'])
			}),
			_Utils_Tuple2(
			'thumb-up',
			{
				a: _List_fromArray(
					['M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5']),
				b: _List_fromArray(
					['M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z'])
			}),
			_Utils_Tuple2(
			'ticket',
			{
				a: _List_fromArray(
					['M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z']),
				b: _List_fromArray(
					['M2 6a2 2 0 012-2h12a2 2 0 012 2v2a2 2 0 100 4v2a2 2 0 01-2 2H4a2 2 0 01-2-2v-2a2 2 0 100-4V6z'])
			}),
			_Utils_Tuple2(
			'translate',
			{
				a: _List_fromArray(
					['M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129']),
				b: _List_fromArray(
					['M7 2a1 1 0 011 1v1h3a1 1 0 110 2H9.578a18.87 18.87 0 01-1.724 4.78c.29.354.596.696.914 1.026a1 1 0 11-1.44 1.389c-.188-.196-.373-.396-.554-.6a19.098 19.098 0 01-3.107 3.567 1 1 0 01-1.334-1.49 17.087 17.087 0 003.13-3.733 18.992 18.992 0 01-1.487-2.494 1 1 0 111.79-.89c.234.47.489.928.764 1.372.417-.934.752-1.913.997-2.927H3a1 1 0 110-2h3V3a1 1 0 011-1zm6 6a1 1 0 01.894.553l2.991 5.982a.869.869 0 01.02.037l.99 1.98a1 1 0 11-1.79.895L15.383 16h-4.764l-.724 1.447a1 1 0 11-1.788-.894l.99-1.98.019-.038 2.99-5.982A1 1 0 0113 8zm-1.382 6h2.764L13 11.236 11.618 14z'])
			}),
			_Utils_Tuple2(
			'trash',
			{
				a: _List_fromArray(
					['M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16']),
				b: _List_fromArray(
					['M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z'])
			}),
			_Utils_Tuple2(
			'trending-down',
			{
				a: _List_fromArray(
					['M13 17h8m0 0V9m0 8l-8-8-4 4-6-6']),
				b: _List_fromArray(
					['M12 13a1 1 0 100 2h5a1 1 0 001-1V9a1 1 0 10-2 0v2.586l-4.293-4.293a1 1 0 00-1.414 0L8 9.586 3.707 5.293a1 1 0 00-1.414 1.414l5 5a1 1 0 001.414 0L11 9.414 14.586 13H12z'])
			}),
			_Utils_Tuple2(
			'trending-up',
			{
				a: _List_fromArray(
					['M13 7h8m0 0v8m0-8l-8 8-4-4-6 6']),
				b: _List_fromArray(
					['M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z'])
			}),
			_Utils_Tuple2(
			'truck',
			{
				a: _List_fromArray(
					['M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z', 'M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0']),
				b: _List_fromArray(
					['M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z', 'M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H10a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7a1 1 0 00-1 1v6.05A2.5 2.5 0 0115.95 16H17a1 1 0 001-1v-5a1 1 0 00-.293-.707l-2-2A1 1 0 0015 7h-1z'])
			}),
			_Utils_Tuple2(
			'upload',
			{
				a: _List_fromArray(
					['M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12']),
				b: _List_fromArray(
					['M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM6.293 6.707a1 1 0 010-1.414l3-3a1 1 0 011.414 0l3 3a1 1 0 01-1.414 1.414L11 5.414V13a1 1 0 11-2 0V5.414L7.707 6.707a1 1 0 01-1.414 0z'])
			}),
			_Utils_Tuple2(
			'user',
			{
				a: _List_fromArray(
					['M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z']),
				b: _List_fromArray(
					['M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z'])
			}),
			_Utils_Tuple2(
			'user-add',
			{
				a: _List_fromArray(
					['M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z']),
				b: _List_fromArray(
					['M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z'])
			}),
			_Utils_Tuple2(
			'user-circle',
			{
				a: _List_fromArray(
					['M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z'])
			}),
			_Utils_Tuple2(
			'user-group',
			{
				a: _List_fromArray(
					['M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z']),
				b: _List_fromArray(
					['M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z'])
			}),
			_Utils_Tuple2(
			'user-remove',
			{
				a: _List_fromArray(
					['M13 7a4 4 0 11-8 0 4 4 0 018 0zM9 14a6 6 0 00-6 6v1h12v-1a6 6 0 00-6-6zM21 12h-6']),
				b: _List_fromArray(
					['M11 6a3 3 0 11-6 0 3 3 0 016 0zM14 17a6 6 0 00-12 0h12zM13 8a1 1 0 100 2h4a1 1 0 100-2h-4z'])
			}),
			_Utils_Tuple2(
			'users',
			{
				a: _List_fromArray(
					['M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z']),
				b: _List_fromArray(
					['M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z'])
			}),
			_Utils_Tuple2(
			'variable',
			{
				a: _List_fromArray(
					['M4.871 4A17.926 17.926 0 003 12c0 2.874.673 5.59 1.871 8m14.13 0a17.926 17.926 0 001.87-8c0-2.874-.673-5.59-1.87-8M9 9h1.246a1 1 0 01.961.725l1.586 5.55a1 1 0 00.961.725H15m1-7h-.08a2 2 0 00-1.519.698L9.6 15.302A2 2 0 018.08 16H8']),
				b: _List_fromArray(
					['M4.649 3.084A1 1 0 015.163 4.4 13.95 13.95 0 004 10c0 1.993.416 3.886 1.164 5.6a1 1 0 01-1.832.8A15.95 15.95 0 012 10c0-2.274.475-4.44 1.332-6.4a1 1 0 011.317-.516zM12.96 7a3 3 0 00-2.342 1.126l-.328.41-.111-.279A2 2 0 008.323 7H8a1 1 0 000 2h.323l.532 1.33-1.035 1.295a1 1 0 01-.781.375H7a1 1 0 100 2h.039a3 3 0 002.342-1.126l.328-.41.111.279A2 2 0 0011.677 14H12a1 1 0 100-2h-.323l-.532-1.33 1.035-1.295A1 1 0 0112.961 9H13a1 1 0 100-2h-.039zm1.874-2.6a1 1 0 011.833-.8A15.95 15.95 0 0118 10c0 2.274-.475 4.44-1.332 6.4a1 1 0 11-1.832-.8A13.949 13.949 0 0016 10c0-1.993-.416-3.886-1.165-5.6z'])
			}),
			_Utils_Tuple2(
			'video-camera',
			{
				a: _List_fromArray(
					['M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z']),
				b: _List_fromArray(
					['M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z'])
			}),
			_Utils_Tuple2(
			'view-boards',
			{
				a: _List_fromArray(
					['M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2']),
				b: _List_fromArray(
					['M2 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1H3a1 1 0 01-1-1V4zM8 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1H9a1 1 0 01-1-1V4zM15 3a1 1 0 00-1 1v12a1 1 0 001 1h2a1 1 0 001-1V4a1 1 0 00-1-1h-2z'])
			}),
			_Utils_Tuple2(
			'view-grid',
			{
				a: _List_fromArray(
					['M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z']),
				b: _List_fromArray(
					['M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z'])
			}),
			_Utils_Tuple2(
			'view-grid-add',
			{
				a: _List_fromArray(
					['M17 14v6m-3-3h6M6 10h2a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2zm10 0h2a2 2 0 002-2V6a2 2 0 00-2-2h-2a2 2 0 00-2 2v2a2 2 0 002 2zM6 20h2a2 2 0 002-2v-2a2 2 0 00-2-2H6a2 2 0 00-2 2v2a2 2 0 002 2z']),
				b: _List_fromArray(
					['M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM14 11a1 1 0 011 1v1h1a1 1 0 110 2h-1v1a1 1 0 11-2 0v-1h-1a1 1 0 110-2h1v-1a1 1 0 011-1z'])
			}),
			_Utils_Tuple2(
			'view-list',
			{
				a: _List_fromArray(
					['M4 6h16M4 10h16M4 14h16M4 18h16']),
				b: _List_fromArray(
					['M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'volume-off',
			{
				a: _List_fromArray(
					['M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z', 'M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2']),
				b: _List_fromArray(
					['M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM12.293 7.293a1 1 0 011.414 0L15 8.586l1.293-1.293a1 1 0 111.414 1.414L16.414 10l1.293 1.293a1 1 0 01-1.414 1.414L15 11.414l-1.293 1.293a1 1 0 01-1.414-1.414L13.586 10l-1.293-1.293a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'volume-up',
			{
				a: _List_fromArray(
					['M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z']),
				b: _List_fromArray(
					['M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071 1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.984 5.984 0 01-1.757 4.243 1 1 0 01-1.415-1.415A3.984 3.984 0 0013 10a3.983 3.983 0 00-1.172-2.828 1 1 0 010-1.415z'])
			}),
			_Utils_Tuple2(
			'wifi',
			{
				a: _List_fromArray(
					['M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0']),
				b: _List_fromArray(
					['M17.778 8.222c-4.296-4.296-11.26-4.296-15.556 0A1 1 0 01.808 6.808c5.076-5.077 13.308-5.077 18.384 0a1 1 0 01-1.414 1.414zM14.95 11.05a7 7 0 00-9.9 0 1 1 0 01-1.414-1.414 9 9 0 0112.728 0 1 1 0 01-1.414 1.414zM12.12 13.88a3 3 0 00-4.242 0 1 1 0 01-1.415-1.415 5 5 0 017.072 0 1 1 0 01-1.415 1.415zM9 16a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z'])
			}),
			_Utils_Tuple2(
			'x',
			{
				a: _List_fromArray(
					['M6 18L18 6M6 6l12 12']),
				b: _List_fromArray(
					['M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z'])
			}),
			_Utils_Tuple2(
			'x-circle',
			{
				a: _List_fromArray(
					['M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z']),
				b: _List_fromArray(
					['M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z'])
			}),
			_Utils_Tuple2(
			'zoom-in',
			{
				a: _List_fromArray(
					['M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7']),
				b: _List_fromArray(
					['M5 8a1 1 0 011-1h1V6a1 1 0 012 0v1h1a1 1 0 110 2H9v1a1 1 0 11-2 0V9H6a1 1 0 01-1-1z', 'M2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8zm6-4a4 4 0 100 8 4 4 0 000-8z'])
			}),
			_Utils_Tuple2(
			'zoom-out',
			{
				a: _List_fromArray(
					['M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM13 10H7']),
				b: _List_fromArray(
					['M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z', 'M5 8a1 1 0 011-1h4a1 1 0 110 2H6a1 1 0 01-1-1z'])
			})
		]));
var $author$project$Components$Atoms$Icon$toString = function (icon) {
	switch (icon) {
		case 0:
			return 'academic-cap';
		case 1:
			return 'adjustments';
		case 2:
			return 'annotation';
		case 3:
			return 'archive';
		case 4:
			return 'arrow-circle-down';
		case 5:
			return 'arrow-circle-left';
		case 6:
			return 'arrow-circle-right';
		case 7:
			return 'arrow-circle-up';
		case 8:
			return 'arrow-down';
		case 9:
			return 'arrow-left';
		case 10:
			return 'arrow-narrow-down';
		case 11:
			return 'arrow-narrow-left';
		case 12:
			return 'arrow-narrow-right';
		case 13:
			return 'arrow-narrow-up';
		case 14:
			return 'arrow-right';
		case 15:
			return 'arrow-sm-down';
		case 16:
			return 'arrow-sm-left';
		case 17:
			return 'arrow-sm-right';
		case 18:
			return 'arrow-sm-up';
		case 19:
			return 'arrow-up';
		case 20:
			return 'arrows-expand';
		case 21:
			return 'at-symbol';
		case 22:
			return 'backspace';
		case 23:
			return 'badge-check';
		case 24:
			return 'ban';
		case 25:
			return 'beaker';
		case 26:
			return 'bell';
		case 27:
			return 'book-open';
		case 28:
			return 'bookmark';
		case 29:
			return 'bookmark-alt';
		case 30:
			return 'briefcase';
		case 31:
			return 'cake';
		case 32:
			return 'calculator';
		case 33:
			return 'calendar';
		case 34:
			return 'camera';
		case 35:
			return 'cash';
		case 36:
			return 'chart-bar';
		case 37:
			return 'chart-pie';
		case 38:
			return 'chart-square-bar';
		case 39:
			return 'chat';
		case 40:
			return 'chat-alt';
		case 41:
			return 'chat-alt-2';
		case 42:
			return 'check';
		case 43:
			return 'check-circle';
		case 44:
			return 'chevron-double-down';
		case 45:
			return 'chevron-double-left';
		case 46:
			return 'chevron-double-right';
		case 47:
			return 'chevron-double-up';
		case 48:
			return 'chevron-down';
		case 49:
			return 'chevron-left';
		case 50:
			return 'chevron-right';
		case 51:
			return 'chevron-up';
		case 52:
			return 'chip';
		case 53:
			return 'clipboard';
		case 54:
			return 'clipboard-check';
		case 55:
			return 'clipboard-copy';
		case 56:
			return 'clipboard-list';
		case 57:
			return 'clock';
		case 58:
			return 'cloud';
		case 59:
			return 'cloud-download';
		case 60:
			return 'cloud-upload';
		case 61:
			return 'code';
		case 62:
			return 'cog';
		case 63:
			return 'collection';
		case 64:
			return 'color-swatch';
		case 65:
			return 'credit-card';
		case 66:
			return 'cube';
		case 67:
			return 'cube-transparent';
		case 68:
			return 'currency-bangladeshi';
		case 69:
			return 'currency-dollar';
		case 70:
			return 'currency-euro';
		case 71:
			return 'currency-pound';
		case 72:
			return 'currency-rupee';
		case 73:
			return 'currency-yen';
		case 74:
			return 'cursor-click';
		case 75:
			return 'database';
		case 76:
			return 'desktop-computer';
		case 77:
			return 'device-mobile';
		case 78:
			return 'device-tablet';
		case 79:
			return 'document';
		case 80:
			return 'document-add';
		case 81:
			return 'document-download';
		case 82:
			return 'document-duplicate';
		case 83:
			return 'document-remove';
		case 84:
			return 'document-report';
		case 85:
			return 'document-search';
		case 86:
			return 'document-text';
		case 87:
			return 'dots-circle-horizontal';
		case 88:
			return 'dots-horizontal';
		case 89:
			return 'dots-vertical';
		case 90:
			return 'download';
		case 91:
			return 'duplicate';
		case 92:
			return 'emoji-happy';
		case 93:
			return 'emoji-sad';
		case 94:
			return 'empty';
		case 95:
			return 'exclamation';
		case 96:
			return 'exclamation-circle';
		case 97:
			return 'external-link';
		case 98:
			return 'eye';
		case 99:
			return 'eye-off';
		case 100:
			return 'fast-forward';
		case 101:
			return 'film';
		case 102:
			return 'filter';
		case 103:
			return 'finger-print';
		case 104:
			return 'fire';
		case 105:
			return 'flag';
		case 106:
			return 'folder';
		case 107:
			return 'folder-add';
		case 108:
			return 'folder-download';
		case 109:
			return 'folder-open';
		case 110:
			return 'folder-remove';
		case 111:
			return 'gift';
		case 112:
			return 'globe';
		case 113:
			return 'globe-alt';
		case 114:
			return 'hand';
		case 115:
			return 'hashtag';
		case 116:
			return 'heart';
		case 117:
			return 'home';
		case 118:
			return 'identification';
		case 119:
			return 'inbox';
		case 120:
			return 'inbox-in';
		case 121:
			return 'information-circle';
		case 122:
			return 'key';
		case 123:
			return 'library';
		case 124:
			return 'light-bulb';
		case 125:
			return 'lightning-bolt';
		case 126:
			return 'link';
		case 127:
			return 'location-marker';
		case 128:
			return 'lock-closed';
		case 129:
			return 'lock-open';
		case 130:
			return 'login';
		case 131:
			return 'logout';
		case 132:
			return 'mail';
		case 133:
			return 'mail-open';
		case 134:
			return 'map';
		case 135:
			return 'menu';
		case 136:
			return 'menu-alt-1';
		case 137:
			return 'menu-alt-2';
		case 138:
			return 'menu-alt-3';
		case 139:
			return 'menu-alt-4';
		case 140:
			return 'microphone';
		case 141:
			return 'minus';
		case 142:
			return 'minus-circle';
		case 143:
			return 'minus-sm';
		case 144:
			return 'moon';
		case 145:
			return 'music-note';
		case 146:
			return 'newspaper';
		case 147:
			return 'office-building';
		case 148:
			return 'paper-airplane';
		case 149:
			return 'paper-clip';
		case 150:
			return 'pause';
		case 151:
			return 'pencil';
		case 152:
			return 'pencil-alt';
		case 153:
			return 'phone';
		case 154:
			return 'phone-incoming';
		case 155:
			return 'phone-missed-call';
		case 156:
			return 'phone-outgoing';
		case 157:
			return 'photograph';
		case 158:
			return 'play';
		case 159:
			return 'plus';
		case 160:
			return 'plus-circle';
		case 161:
			return 'plus-sm';
		case 162:
			return 'presentation-chart-bar';
		case 163:
			return 'presentation-chart-line';
		case 164:
			return 'printer';
		case 165:
			return 'puzzle';
		case 166:
			return 'qrcode';
		case 167:
			return 'question-mark-circle';
		case 168:
			return 'receipt-refund';
		case 169:
			return 'receipt-tax';
		case 170:
			return 'refresh';
		case 171:
			return 'reply';
		case 172:
			return 'rewind';
		case 173:
			return 'rss';
		case 174:
			return 'save';
		case 175:
			return 'save-as';
		case 176:
			return 'scale';
		case 177:
			return 'scissors';
		case 178:
			return 'search';
		case 179:
			return 'search-circle';
		case 180:
			return 'selector';
		case 181:
			return 'server';
		case 182:
			return 'share';
		case 183:
			return 'shield-check';
		case 184:
			return 'shield-exclamation';
		case 185:
			return 'shopping-bag';
		case 186:
			return 'shopping-cart';
		case 187:
			return 'sort-ascending';
		case 188:
			return 'sort-descending';
		case 189:
			return 'sparkles';
		case 190:
			return 'speakerphone';
		case 191:
			return 'star';
		case 192:
			return 'status-offline';
		case 193:
			return 'status-online';
		case 194:
			return 'stop';
		case 195:
			return 'sun';
		case 196:
			return 'support';
		case 197:
			return 'switch-horizontal';
		case 198:
			return 'switch-vertical';
		case 199:
			return 'table';
		case 200:
			return 'tag';
		case 201:
			return 'template';
		case 202:
			return 'terminal';
		case 203:
			return 'thumb-down';
		case 204:
			return 'thumb-up';
		case 205:
			return 'ticket';
		case 206:
			return 'translate';
		case 207:
			return 'trash';
		case 208:
			return 'trending-down';
		case 209:
			return 'trending-up';
		case 210:
			return 'truck';
		case 211:
			return 'upload';
		case 212:
			return 'user';
		case 213:
			return 'user-add';
		case 214:
			return 'user-circle';
		case 215:
			return 'user-group';
		case 216:
			return 'user-remove';
		case 217:
			return 'users';
		case 218:
			return 'variable';
		case 219:
			return 'video-camera';
		case 220:
			return 'view-boards';
		case 221:
			return 'view-grid';
		case 222:
			return 'view-grid-add';
		case 223:
			return 'view-list';
		case 224:
			return 'volume-off';
		case 225:
			return 'volume-up';
		case 226:
			return 'wifi';
		case 227:
			return 'x';
		case 228:
			return 'x-circle';
		case 229:
			return 'zoom-in';
		default:
			return 'zoom-out';
	}
};
var $elm$svg$Svg$Attributes$clipRule = _VirtualDom_attribute('clip-rule');
var $elm$svg$Svg$Attributes$fillRule = _VirtualDom_attribute('fill-rule');
var $author$project$Components$Atoms$Icon$viewSolid = F2(
	function (lines, styles) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('0 0 20 20'),
					$elm$svg$Svg$Attributes$fill('currentColor'),
					$author$project$Libs$Html$Attributes$ariaHidden(true),
					$author$project$Libs$Svg$Attributes$css(
					_List_fromArray(
						['flex-shrink-0', styles]))
				]),
			A2(
				$elm$core$List$map,
				function (line) {
					return A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d(line),
								$elm$svg$Svg$Attributes$fillRule('evenodd'),
								$elm$svg$Svg$Attributes$clipRule('evenodd')
							]),
						_List_Nil);
				},
				lines));
	});
var $author$project$Components$Atoms$Icon$solid = F2(
	function (icon, styles) {
		return function (lines) {
			return A2($author$project$Components$Atoms$Icon$viewSolid, lines, 'h-5 w-5 ' + styles);
		}(
			A3(
				$author$project$Libs$Maybe$mapOrElse,
				function ($) {
					return $.b;
				},
				_List_Nil,
				A2(
					$elm$core$Dict$get,
					$author$project$Components$Atoms$Icon$toString(icon),
					$author$project$Components$Atoms$Icon$icons)));
	});
var $author$project$Components$Molecules$Tooltip$tooltip = F4(
	function (bubble, caret, value, content) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('group relative inline-flex flex-col items-center align-middle')
				]),
			_List_fromArray(
				[
					content,
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('group-hover:flex hidden absolute flex-col z-max ' + bubble)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('absolute w-3 h-3 bg-black transform rotate-45 ' + caret)
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('relative p-2 bg-black text-white text-xs leading-none whitespace-nowrap rounded shadow-lg')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(value)
								]))
						]))
				]));
	});
var $author$project$Components$Molecules$Tooltip$t = A2($author$project$Components$Molecules$Tooltip$tooltip, 'bottom-full mb-3 items-center', 'top-full -translate-y-2/4');
var $author$project$Components$Molecules$Tooltip$tl = A2($author$project$Components$Molecules$Tooltip$tooltip, 'bottom-full mb-3 right-0 items-end', 'top-full -translate-y-2/4 mr-3');
var $author$project$PagesComponents$Projects$Id_$Views$Commands$viewCommands = F5(
	function (conf, cursorMode, canvasZoom, htmlId, openedDropdown) {
		var inverted = $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'bg-gray-700 text-white',
					$author$project$Libs$Tailwind$hover(
					_List_fromArray(
						['bg-gray-600']))
				]));
		var classic = $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'bg-white text-gray-700',
					$author$project$Libs$Tailwind$hover(
					_List_fromArray(
						['bg-gray-50']))
				]));
		var buttonStyles = $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'relative inline-flex items-center p-2 border border-gray-300 text-sm font-medium',
					$author$project$Libs$Tailwind$focus(
					_List_fromArray(
						['z-10 outline-none ring-1 ring-primary-500 border-primary-500']))
				]));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('az-commands absolute bottom-0 right-0 m-3 print:hidden')
				]),
			_List_fromArray(
				[
					conf.fC ? A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('relative z-0 inline-flex shadow-sm rounded-md')
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Components$Molecules$Tooltip$t,
							'Fit content in view',
							A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('button'),
										$elm$html$Html$Events$onClick($author$project$PagesComponents$Projects$Id_$Models$FitContent),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['rounded-l-md rounded-r-md', buttonStyles, classic]))
									]),
								_List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$solid, 20, '')
									])))
						])) : $author$project$Libs$Html$none,
					conf.fC ? A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('relative z-0 inline-flex shadow-sm rounded-md ml-2')
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Components$Molecules$Tooltip$t,
							'Select tool',
							A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('button'),
										$elm$html$Html$Events$onClick(
										$author$project$PagesComponents$Projects$Id_$Models$CursorMode(1)),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'rounded-l-md',
												buttonStyles,
												A3($author$project$Libs$Bool$cond, cursorMode === 1, inverted, classic)
											]))
									]),
								_List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$solid, 74, '')
									]))),
							A2(
							$author$project$Components$Molecules$Tooltip$t,
							'Drag tool',
							A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('button'),
										$elm$html$Html$Events$onClick(
										$author$project$PagesComponents$Projects$Id_$Models$CursorMode(0)),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'-ml-px rounded-r-md',
												buttonStyles,
												A3($author$project$Libs$Bool$cond, !cursorMode, inverted, classic)
											]))
									]),
								_List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$solid, 114, '')
									])))
						])) : $author$project$Libs$Html$none,
					conf.fC ? A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('relative z-0 inline-flex shadow-sm rounded-md ml-2')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$button,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('button'),
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$Id_$Models$Zoom((-canvasZoom) / 10)),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['rounded-l-md', buttonStyles, classic]))
								]),
							_List_fromArray(
								[
									A2($author$project$Components$Atoms$Icon$solid, 141, '')
								])),
							A3(
							$author$project$Components$Molecules$Dropdown$dropdown,
							{
								ao: 3,
								t: htmlId + '-zoom-level',
								ar: _Utils_eq(openedDropdown, htmlId + '-zoom-level')
							},
							function (m) {
								return A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$type_('button'),
											$elm$html$Html$Attributes$id(m.t),
											$elm$html$Html$Events$onClick(
											$author$project$PagesComponents$Projects$Id_$Models$DropdownToggle(m.t)),
											$author$project$Libs$Html$Attributes$ariaExpanded(false),
											$author$project$Libs$Html$Attributes$ariaHaspopup(true),
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['-ml-px', buttonStyles, classic]))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											$elm$core$String$fromInt(
												$elm$core$Basics$round(canvasZoom * 100)) + ' %')
										]));
							},
							function (_v0) {
								return A2(
									$elm$html$Html$div,
									_List_Nil,
									_List_fromArray(
										[
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$Zoom($author$project$Conf$canvas.dm.hX - canvasZoom),
											_List_fromArray(
												[
													$elm$html$Html$text(
													$elm$core$String$fromFloat($author$project$Conf$canvas.dm.hX * 100) + ' %')
												])),
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$Zoom(0.25 - canvasZoom),
											_List_fromArray(
												[
													$elm$html$Html$text('25%')
												])),
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$Zoom(0.5 - canvasZoom),
											_List_fromArray(
												[
													$elm$html$Html$text('50%')
												])),
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$Zoom(1 - canvasZoom),
											_List_fromArray(
												[
													$elm$html$Html$text('100%')
												])),
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$Zoom(1.5 - canvasZoom),
											_List_fromArray(
												[
													$elm$html$Html$text('150%')
												])),
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$Zoom(2 - canvasZoom),
											_List_fromArray(
												[
													$elm$html$Html$text('200%')
												])),
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$Zoom($author$project$Conf$canvas.dm.hT - canvasZoom),
											_List_fromArray(
												[
													$elm$html$Html$text(
													$elm$core$String$fromFloat($author$project$Conf$canvas.dm.hT * 100) + ' %')
												]))
										]));
							}),
							A2(
							$elm$html$Html$button,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('button'),
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$Id_$Models$Zoom(canvasZoom / 10)),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['-ml-px rounded-r-md', buttonStyles, classic]))
								]),
							_List_fromArray(
								[
									A2($author$project$Components$Atoms$Icon$solid, 159, '')
								]))
						])) : $author$project$Libs$Html$none,
					conf.dM ? A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('relative z-0 inline-flex shadow-sm rounded-md ml-2')
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Components$Molecules$Tooltip$tl,
							'View in full screen',
							A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('button'),
										$elm$html$Html$Events$onClick(
										$author$project$PagesComponents$Projects$Id_$Models$Fullscreen($elm$core$Maybe$Nothing)),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['rounded-l-md rounded-r-md', buttonStyles, classic]))
									]),
								_List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$solid, 162, '')
									])))
						])) : $author$project$Libs$Html$none
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$OnWheel = function (a) {
	return {$: 33, a: a};
};
var $author$project$Models$Project$CanvasProps$adapt = F3(
	function (screen, canvas, pos) {
		return A2(
			$author$project$Libs$Models$Position$div,
			canvas.dm,
			A2(
				$author$project$Libs$Models$Position$sub,
				canvas.iG,
				A2($author$project$Libs$Models$Position$sub, screen.iG, pos)));
	});
var $author$project$Libs$Maybe$filterNot = F2(
	function (predicate, maybe) {
		return A2(
			$elm$core$Maybe$andThen,
			function (a) {
				return A3(
					$author$project$Libs$Bool$cond,
					predicate(a),
					$elm$core$Maybe$Nothing,
					maybe);
			},
			maybe);
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$getColumn = F3(
	function (table, column, erd) {
		return A2(
			$elm$core$Maybe$andThen,
			function (t) {
				return A2($author$project$Libs$Ned$get, column, t.W);
			},
			A2($elm$core$Dict$get, table, erd.jr));
	});
var $author$project$PagesComponents$Projects$Id_$Models$Erd$getColumnProps = F3(
	function (table, column, erd) {
		return A2(
			$elm$core$Maybe$andThen,
			function (t) {
				return A2($elm$core$Dict$get, column, t.gS);
			},
			A2($elm$core$Dict$get, table, erd.bu));
	});
var $author$project$PagesComponents$Projects$Id_$Models$DragStart = F2(
	function (a, b) {
		return {$: 41, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$handleErdPointerDown = F3(
	function (conf, cursorMode, e) {
		if (e.bE === 1) {
			if (!cursorMode) {
				return conf.fC ? A2($author$project$PagesComponents$Projects$Id_$Models$DragStart, $author$project$Conf$ids.ha, e.iG) : $author$project$PagesComponents$Projects$Id_$Models$Noop('No erd drag');
			} else {
				return conf.c9 ? A2($author$project$PagesComponents$Projects$Id_$Models$DragStart, $author$project$Conf$ids.i9, e.iG) : $author$project$PagesComponents$Projects$Id_$Models$Noop('No selection box');
			}
		} else {
			if (e.bE === 2) {
				return conf.fC ? A2($author$project$PagesComponents$Projects$Id_$Models$DragStart, $author$project$Conf$ids.ha, e.iG) : $author$project$PagesComponents$Projects$Id_$Models$Noop('No middle button erd drag');
			} else {
				return $author$project$PagesComponents$Projects$Id_$Models$Noop('No match on erd pointer down');
			}
		}
	});
var $elm$html$Html$main_ = _VirtualDom_node('main');
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 3, a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $author$project$Libs$Html$Events$WheelEvent = F6(
	function (position, delta, ctrl, alt, shift, meta) {
		return {cr: alt, gZ: ctrl, g2: delta, cU: meta, iG: position, aV: shift};
	});
var $author$project$Libs$Html$Events$wheelDecoder = A7(
	$elm$json$Json$Decode$map6,
	$author$project$Libs$Html$Events$WheelEvent,
	A3(
		$elm$json$Json$Decode$map2,
		$author$project$Libs$Models$Position$Position,
		A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
		A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float)),
	A3(
		$elm$json$Json$Decode$map2,
		$author$project$Libs$Delta$Delta,
		A2($elm$json$Json$Decode$field, 'deltaX', $elm$json$Json$Decode$float),
		A2($elm$json$Json$Decode$field, 'deltaY', $elm$json$Json$Decode$float)),
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'altKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'shiftKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'metaKey', $elm$json$Json$Decode$bool));
var $author$project$Libs$Html$Events$onWheel = function (callback) {
	var preventDefaultAndStopPropagation = function (msg) {
		return {bg: msg, fQ: true, ew: true};
	};
	return A2(
		$elm$html$Html$Events$custom,
		'wheel',
		A2(
			$elm$json$Json$Decode$map,
			A2($elm$core$Basics$composeR, callback, preventDefaultAndStopPropagation),
			$author$project$Libs$Html$Events$wheelDecoder));
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event = F5(
	function (pointerType, pointer, pointerId, isPrimary, contactDetails) {
		return {gV: contactDetails, hE: isPrimary, b3: pointer, iE: pointerId, iF: pointerType};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails = F5(
	function (width, height, pressure, tiltX, tiltY) {
		return {ap: height, iJ: pressure, jv: tiltX, jw: tiltY, aF: width};
	});
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$ContactDetails,
	A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'pressure', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltX', $elm$json$Json$Decode$float),
	A2($elm$json$Json$Decode$field, 'tiltY', $elm$json$Json$Decode$float));
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$MouseType = 0;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$PenType = 2;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$TouchType = 1;
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType = function (str) {
	switch (str) {
		case 'pen':
			return 2;
		case 'touch':
			return 1;
		default:
			return 0;
	}
};
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder = A2($elm$json$Json$Decode$map, $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$stringToPointerType, $elm$json$Json$Decode$string);
var $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder = A6(
	$elm$json$Json$Decode$map5,
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$Event,
	A2($elm$json$Json$Decode$field, 'pointerType', $mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$pointerTypeDecoder),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder,
	A2($elm$json$Json$Decode$field, 'pointerId', $elm$json$Json$Decode$int),
	A2($elm$json$Json$Decode$field, 'isPrimary', $elm$json$Json$Decode$bool),
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$contactDetailsDecoder);
var $author$project$Libs$Html$Events$pointerDecoder = A2(
	$elm$json$Json$Decode$map,
	function (e) {
		return {
			cr: e.b3.bf.cr,
			bE: e.b3.bE,
			gZ: e.b3.bf.gZ,
			iG: $author$project$Libs$Models$Position$fromTuple(e.b3.fK),
			aV: e.b3.bf.aV
		};
	},
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Pointer$eventDecoder);
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $author$project$Libs$Html$Events$stopPointerDown = function (msg) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'pointerdown',
		A2(
			$elm$json$Json$Decode$map,
			function (e) {
				return _Utils_Tuple2(
					msg(e),
					true);
			},
			$author$project$Libs$Html$Events$pointerDecoder));
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$stringToArgs = function (args) {
	var _v0 = A2($elm$core$String$split, '#', args);
	if ((_v0.b && _v0.b.b) && (!_v0.b.b.b)) {
		var openedDropdown = _v0.a;
		var _v1 = _v0.b;
		var openedPopover = _v1.a;
		return _Utils_Tuple2(openedDropdown, openedPopover);
	} else {
		return _Utils_Tuple2('', '');
	}
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewEmptyRelation = A2(
	$elm$svg$Svg$svg,
	_List_fromArray(
		[
			$elm$svg$Svg$Attributes$class('az-empty-relation'),
			$elm$svg$Svg$Attributes$width('0px'),
			$elm$svg$Svg$Attributes$height('0px')
		]),
	_List_Nil);
var $author$project$PagesComponents$Projects$Id_$Models$Focus = function (a) {
	return {$: 35, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ShowTable = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$Components$Atoms$Icon$Template = 201;
var $elm$html$Html$b = _VirtualDom_node('b');
var $author$project$Libs$Html$bText = function (content) {
	return A2(
		$elm$html$Html$b,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(content)
			]));
};
var $author$project$Libs$Tailwind$bg_100 = function (_v0) {
	var color = _v0;
	return 'bg-' + (color + '-100');
};
var $author$project$Libs$Tailwind$text_800 = function (_v0) {
	var color = _v0;
	return 'text-' + (color + '-800');
};
var $author$project$Components$Atoms$Badge$basic = F3(
	function (color, attrs, content) {
		return A2(
			$elm$html$Html$span,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',
								$author$project$Libs$Tailwind$bg_100(color),
								$author$project$Libs$Tailwind$text_800(color)
							]))
					]),
				attrs),
			content);
	});
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeLinecap = _VirtualDom_attribute('stroke-linecap');
var $elm$svg$Svg$Attributes$strokeLinejoin = _VirtualDom_attribute('stroke-linejoin');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $author$project$Libs$Svg$Attributes$vectorEffect = function (value) {
	return A2($elm$html$Html$Attributes$attribute, 'vector-effect', value);
};
var $author$project$Components$Atoms$Icon$viewOutline = F2(
	function (lines, styles) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$viewBox('0 0 24 24'),
					$elm$svg$Svg$Attributes$fill('none'),
					$elm$svg$Svg$Attributes$stroke('currentColor'),
					$author$project$Libs$Html$Attributes$ariaHidden(true),
					$author$project$Libs$Svg$Attributes$css(
					_List_fromArray(
						['flex-shrink-0', styles]))
				]),
			A2(
				$elm$core$List$map,
				function (line) {
					return A2(
						$elm$svg$Svg$path,
						_List_fromArray(
							[
								$elm$svg$Svg$Attributes$d(line),
								$elm$svg$Svg$Attributes$strokeLinecap('round'),
								$elm$svg$Svg$Attributes$strokeLinejoin('round'),
								$elm$svg$Svg$Attributes$strokeWidth('2'),
								$author$project$Libs$Svg$Attributes$vectorEffect('non-scaling-stroke')
							]),
						_List_Nil);
				},
				lines));
	});
var $author$project$Components$Atoms$Icon$outline2x = F2(
	function (icon, styles) {
		return function (lines) {
			return A2($author$project$Components$Atoms$Icon$viewOutline, lines, 'h-12 w-12 ' + styles);
		}(
			A3(
				$author$project$Libs$Maybe$mapOrElse,
				function ($) {
					return $.a;
				},
				_List_Nil,
				A2(
					$elm$core$Dict$get,
					$author$project$Components$Atoms$Icon$toString(icon),
					$author$project$Components$Atoms$Icon$icons)));
	});
var $author$project$Libs$String$inflect = F4(
	function (none, one, many, count) {
		return (!count) ? none : ((count === 1) ? one : many);
	});
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $author$project$Libs$String$plural = function (word) {
	return A2($elm$core$String$endsWith, 'y', word) ? (A2($elm$core$String$dropRight, 1, word) + 'ies') : (word + 's');
};
var $author$project$Libs$String$pluralize = F2(
	function (word, count) {
		return A4(
			$author$project$Libs$String$inflect,
			'0 ' + word,
			'1 ' + word,
			$elm$core$String$fromInt(count) + (' ' + $author$project$Libs$String$plural(word)),
			count);
	});
var $author$project$Libs$String$pluralizeD = F2(
	function (word, list) {
		return A2(
			$author$project$Libs$String$pluralize,
			word,
			$elm$core$Dict$size(list));
	});
var $author$project$Libs$Html$sendTweet = F3(
	function (tweet, attrs, children) {
		return function (url) {
			return A3($author$project$Libs$Html$extLink, url, attrs, children);
		}(
			'https://twitter.com/intent/tweet?text=' + $elm$url$Url$percentEncode(tweet));
	});
var $author$project$Libs$Ned$size = function (ned) {
	return 1 + $elm$core$Dict$size(ned.gc);
};
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$viewEmptyState = function (tables) {
	var bestTables = A2(
		$elm$core$List$take,
		10,
		A2(
			$elm$core$List$sortBy,
			function (t) {
				return $elm$core$String$length(t.cW) - $author$project$Libs$Ned$size(t.W);
			},
			A2(
				$author$project$Libs$List$filterNot,
				function (t) {
					return A2($elm$core$String$contains, '_', t.E) || (A2($elm$core$String$contains, '_', t.cW) || (A2($elm$core$String$contains, '-', t.E) || A2($elm$core$String$contains, '-', t.cW)));
				},
				$elm$core$Dict$values(tables))));
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('flex h-full justify-center items-center')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('max-w-prose p-6 bg-white border border-gray-200 rounded-lg')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-center')
							]),
						_List_fromArray(
							[
								A2($author$project$Components$Atoms$Icon$outline2x, 201, 'mx-auto text-primary-500'),
								A2(
								$elm$html$Html$h2,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-2 text-lg font-medium text-gray-900')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Hello from Azimutt 👋')
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-3 text-sm text-gray-500')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Azimutt let you freely explore your database schema. To start, just type what you are looking for in the '),
										A2(
										$elm$html$Html$button,
										_List_fromArray(
											[
												$elm$html$Html$Events$onClick(
												$author$project$PagesComponents$Projects$Id_$Models$Focus($author$project$Conf$ids.c8)),
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													[
														'link',
														$author$project$Libs$Tailwind$focus(
														_List_fromArray(
															['outline-none']))
													]))
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('search bar')
											])),
										$elm$html$Html$text(', and then look at columns and follow relations. Once you have interesting layout, you can save it for later.')
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-3 text-sm text-gray-500')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Your project has '),
										$author$project$Libs$Html$bText(
										A2($author$project$Libs$String$pluralizeD, 'table', tables)),
										$elm$html$Html$text('. Here are some that could be interesting:'),
										A2(
										$elm$html$Html$div,
										_List_Nil,
										A2(
											$elm$core$List$map,
											function (t) {
												return A3(
													$author$project$Components$Atoms$Badge$basic,
													$author$project$Libs$Tailwind$primary,
													_List_fromArray(
														[
															$elm$html$Html$Events$onClick(
															A2($author$project$PagesComponents$Projects$Id_$Models$ShowTable, t.t, $elm$core$Maybe$Nothing)),
															$elm$html$Html$Attributes$class('m-1 cursor-pointer')
														]),
													_List_fromArray(
														[
															$elm$html$Html$text(
															$author$project$Models$Project$TableId$show(t.t))
														]));
											},
											bestTables))
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-3 text-sm text-gray-500')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('If you ❤️ Azimutt, '),
										A3(
										$author$project$Libs$Html$sendTweet,
										$author$project$Conf$constants.gP,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('link')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('come and say hi')
											])),
										$elm$html$Html$text('. We are eager to learn how you use it and for what. We also love '),
										A3(
										$author$project$Libs$Html$extLink,
										$author$project$Conf$constants.gA,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('link')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('feedback and feature requests')
											])),
										$elm$html$Html$text('.')
									]))
							]))
					]))
			]));
};
var $elm$virtual_dom$VirtualDom$lazy4 = _VirtualDom_lazy4;
var $elm$html$Html$Lazy$lazy4 = $elm$virtual_dom$VirtualDom$lazy4;
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $author$project$Libs$Bool$maybe = F2(
	function (predicate, a) {
		return predicate ? $elm$core$Maybe$Just(a) : $elm$core$Maybe$Nothing;
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$getColor = F2(
	function (src, ref) {
		var _v0 = _Utils_Tuple2(src, ref);
		if (!_v0.a.$) {
			if (!_v0.b.$) {
				var s = _v0.a.a;
				var r = _v0.b.a;
				return A2($author$project$Libs$Bool$maybe, s.bp || (r.bp || (s.fj && r.fj)), s.n);
			} else {
				var s = _v0.a.a;
				var _v1 = _v0.b;
				return A2($author$project$Libs$Bool$maybe, s.bp || s.fj, s.n);
			}
		} else {
			if (!_v0.b.$) {
				var _v2 = _v0.a;
				var r = _v0.b.a;
				return A2($author$project$Libs$Bool$maybe, r.bp || r.fj, r.n);
			} else {
				var _v3 = _v0.a;
				var _v4 = _v0.b;
				return $elm$core$Maybe$Nothing;
			}
		}
	});
var $elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $author$project$Libs$List$prependIf = F3(
	function (predicate, item, list) {
		return predicate ? A2($elm$core$List$cons, item, list) : list;
	});
var $elm$svg$Svg$Attributes$strokeDasharray = _VirtualDom_attribute('stroke-dasharray');
var $author$project$Libs$Tailwind$stroke_500 = function (_v0) {
	var color = _v0;
	return 'stroke-' + (color + '-500');
};
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $author$project$Components$Organisms$Relation$viewLine = F4(
	function (p1, p2, nullable, color) {
		return A2(
			$elm$svg$Svg$line,
			A3(
				$author$project$Libs$List$prependIf,
				nullable,
				$elm$svg$Svg$Attributes$strokeDasharray('4'),
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$x1(
						$elm$core$String$fromFloat(p1.at)),
						$elm$svg$Svg$Attributes$y1(
						$elm$core$String$fromFloat(p1.aD)),
						$elm$svg$Svg$Attributes$x2(
						$elm$core$String$fromFloat(p2.at)),
						$elm$svg$Svg$Attributes$y2(
						$elm$core$String$fromFloat(p2.aD)),
						$elm$svg$Svg$Attributes$class(
						A3(
							$author$project$Libs$Maybe$mapOrElse,
							function (c) {
								return $author$project$Libs$Tailwind$stroke_500(c) + ' stroke-3';
							},
							'stroke-default-400 stroke-2',
							color))
					])),
			_List_Nil);
	});
var $author$project$Components$Organisms$Relation$line = F6(
	function (src, ref, nullable, color, label, index) {
		var padding = 12;
		var origin = {
			at: A2($elm$core$Basics$min, src.at, ref.at) - padding,
			aD: A2($elm$core$Basics$min, src.aD, ref.aD) - padding
		};
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$class('az-relation absolute'),
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromFloat(
						$elm$core$Basics$abs(src.at - ref.at) + (padding * 2))),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromFloat(
						$elm$core$Basics$abs(src.aD - ref.aD) + (padding * 2))),
					$elm$svg$Svg$Attributes$style(
					'left: ' + ($elm$core$String$fromFloat(origin.at) + ('px; top: ' + ($elm$core$String$fromFloat(origin.aD) + ('px; z-index: ' + ($elm$core$String$fromInt(index) + ';'))))))
				]),
			_List_fromArray(
				[
					A4(
					$author$project$Components$Organisms$Relation$viewLine,
					A2($author$project$Libs$Models$Position$sub, origin, src),
					A2($author$project$Libs$Models$Position$sub, origin, ref),
					nullable,
					color),
					$elm$svg$Svg$text(label)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$tablePositions = F2(
	function (position, size) {
		return _Utils_Tuple3(position.at, position.at + (size.aF / 2), position.at + size.aF);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionLeft = F4(
	function (srcPos, srcSize, refPos, refSize) {
		var _v0 = _Utils_Tuple2(
			A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$tablePositions, srcPos, srcSize),
			A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$tablePositions, refPos, refSize));
		var _v1 = _v0.a;
		var srcLeft = _v1.a;
		var srcCenter = _v1.b;
		var srcRight = _v1.c;
		var _v2 = _v0.b;
		var refLeft = _v2.a;
		var refCenter = _v2.b;
		var refRight = _v2.c;
		return (_Utils_cmp(srcRight, refLeft) < 0) ? _Utils_Tuple2(srcRight, refLeft) : ((_Utils_cmp(srcCenter, refCenter) < 0) ? _Utils_Tuple2(srcRight, refRight) : ((_Utils_cmp(srcLeft, refRight) < 0) ? _Utils_Tuple2(srcLeft, refLeft) : _Utils_Tuple2(srcLeft, refRight)));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionTop = F2(
	function (position, index) {
		return (position.aD + $author$project$Conf$ui.jq) + ($author$project$Conf$ui.jp * (0.5 + index));
	});
var $author$project$Models$Project$ColumnName$withName = F2(
	function (column, text) {
		return text + ('.' + column);
	});
var $author$project$Models$Project$ColumnRef$show = function (_v0) {
	var table = _v0.G;
	var column = _v0.r;
	return A2(
		$author$project$Models$Project$ColumnName$withName,
		column,
		$author$project$Models$Project$TableId$show(table));
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewRelation = F4(
	function (dragging, srcProps, refProps, relation) {
		var label = $author$project$Models$Project$ColumnRef$show(relation.de) + (' -> ' + (relation.cW + (' -> ' + $author$project$Models$Project$ColumnRef$show(relation.fW))));
		var color = A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$getColor, srcProps, refProps);
		var _v0 = _Utils_Tuple2(srcProps, refProps);
		if (_v0.a.$ === 1) {
			if (_v0.b.$ === 1) {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewEmptyRelation;
			} else {
				var _v4 = _v0.a;
				var index = _v0.b.a.a9;
				var position = _v0.b.a.iG;
				return function (refPos) {
					return A6(
						$author$project$Components$Organisms$Relation$line,
						{at: refPos.at - 20, aD: refPos.aD},
						refPos,
						relation.de.av,
						color,
						label,
						($author$project$Conf$canvas.jK.jr + index) + A3($author$project$Libs$Bool$cond, dragging, 1000, 0));
				}(
					{
						at: position.at,
						aD: A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionTop, position, index)
					});
			}
		} else {
			if (_v0.b.$ === 1) {
				var index = _v0.a.a.a9;
				var position = _v0.a.a.iG;
				var size = _v0.a.a.l;
				var _v3 = _v0.b;
				return function (srcPos) {
					return A6(
						$author$project$Components$Organisms$Relation$line,
						srcPos,
						{at: srcPos.at + 20, aD: srcPos.aD},
						relation.de.av,
						color,
						label,
						($author$project$Conf$canvas.jK.jr + index) + A3($author$project$Libs$Bool$cond, dragging, 1000, 0));
				}(
					{
						at: position.at + size.aF,
						aD: A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionTop, position, index)
					});
			} else {
				var src = _v0.a.a;
				var ref = _v0.b.a;
				return function (_v5) {
					var _v6 = _v5.a;
					var srcX = _v6.a;
					var refX = _v6.b;
					var _v7 = _v5.b;
					var srcY = _v7.a;
					var refY = _v7.b;
					return A6(
						$author$project$Components$Organisms$Relation$line,
						{at: srcX, aD: srcY},
						{at: refX, aD: refY},
						relation.de.av,
						color,
						label,
						($author$project$Conf$canvas.jK.jr + A2($elm$core$Basics$min, src.a9, ref.a9)) + A3($author$project$Libs$Bool$cond, dragging, 1000, 0));
				}(
					_Utils_Tuple2(
						A4($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionLeft, src.iG, src.l, ref.iG, ref.l),
						_Utils_Tuple2(
							A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionTop, src.iG, src.a9),
							A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionTop, ref.iG, ref.a9))));
			}
		}
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$viewRelations = F3(
	function (dragging, tableProps, relations) {
		var getColumnProps = function (ref) {
			return A2(
				$elm$core$Maybe$andThen,
				function (t) {
					return A2($elm$core$Dict$get, ref.r, t.gS);
				},
				A2($elm$core$Dict$get, ref.G, tableProps));
		};
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('az-relations')
				]),
			A2(
				$elm$core$List$map,
				function (r) {
					return _Utils_Tuple2(
						r.cW,
						A5(
							$elm$html$Html$Lazy$lazy4,
							$author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewRelation,
							A2(
								$author$project$Libs$Maybe$any,
								function (d) {
									return (_Utils_eq(
										d.t,
										$author$project$Models$Project$TableId$toHtmlId(r.de.G)) || _Utils_eq(
										d.t,
										$author$project$Models$Project$TableId$toHtmlId(r.fW.G))) && (!_Utils_eq(d.Y, d.fw));
								},
								dragging),
							getColumnProps(r.de),
							getColumnProps(r.fW),
							r));
				},
				relations));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$viewSelectionBox = function (area) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['az-selection-area absolute border-2 bg-opacity-25 z-max border-teal-400 bg-teal-400'])),
				A2(
				$elm$html$Html$Attributes$style,
				'transform',
				'translate(' + ($elm$core$String$fromFloat(area.iG.at) + ('px, ' + ($elm$core$String$fromFloat(area.iG.aD) + 'px)')))),
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$elm$core$String$fromFloat(area.l.aF) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(area.l.ap) + 'px')
			]),
		_List_Nil);
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Table$argsToString = F5(
	function (openedDropdown, openedPopover, dragging, virtualRelation, useBasicTypes) {
		return openedDropdown + ('#' + (openedPopover + ('#' + (A3($author$project$Libs$Bool$cond, dragging, 'Y', 'N') + ('#' + (A3($author$project$Libs$Bool$cond, virtualRelation, 'Y', 'N') + ('#' + A3($author$project$Libs$Bool$cond, useBasicTypes, 'Y', 'N'))))))));
	});
var $elm$virtual_dom$VirtualDom$lazy7 = _VirtualDom_lazy7;
var $elm$html$Html$Lazy$lazy7 = $elm$virtual_dom$VirtualDom$lazy7;
var $author$project$PagesComponents$Projects$Id_$Models$ContextMenuCreate = F2(
	function (a, b) {
		return {$: 38, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$HideColumns = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $toastal$either$Either$Left = function (a) {
	return {$: 0, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$PopoverSet = function (a) {
	return {$: 37, a: a};
};
var $toastal$either$Either$Right = function (a) {
	return {$: 1, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ShowColumn = function (a) {
	return {$: 9, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ShowColumns = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$ShowTables = F2(
	function (a, b) {
		return {$: 5, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$SortColumns = F2(
	function (a, b) {
		return {$: 17, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$ToggleHiddenColumns = function (a) {
	return {$: 13, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$ToggleHoverColumn = F2(
	function (a, b) {
		return {$: 20, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$ToggleHoverTable = F2(
	function (a, b) {
		return {$: 19, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$VRUpdate = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Models$ColumnOrder$all = _List_fromArray(
	[1, 2, 0, 3]);
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Table$buildColumnRelation = F2(
	function (props, relation) {
		return {
			r: {r: relation.r, E: relation.G.a, G: relation.G.b},
			av: relation.av,
			bv: A3(
				$author$project$Libs$Maybe$mapOrElse,
				function ($) {
					return $.f4;
				},
				false,
				A2($elm$core$Dict$get, relation.G, props.iS))
		};
	});
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Array = function (a) {
	return {$: 1, a: a};
};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Binary = {$: 13};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Bool = {$: 5};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Date = {$: 6};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$DateTime = {$: 8};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Float = {$: 4};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Int = {$: 3};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Interval = {$: 9};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Ip = {$: 11};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Json = {$: 12};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$String = {$: 2};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Time = {$: 7};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Unknown = function (a) {
	return {$: 0, a: a};
};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$Uuid = {$: 10};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$parse = function (kind) {
	return A2($elm$core$String$endsWith, '[]', kind) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Array(
		$author$project$DataSources$SqlParser$Parsers$ColumnType$parse(
			A2($elm$core$String$dropRight, 2, kind))) : ((A2($author$project$Libs$Regex$match, '^(tiny|medium|long)?text$', kind) || (A2($author$project$Libs$Regex$match, '^character( varying)? ?(\\(\\d+\\))?$', kind) || A2($author$project$Libs$Regex$match, '^varchar ?(\\(\\d+\\))?$', kind))) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$String : (((kind === 'integer') || (A2($author$project$Libs$Regex$match, '^(small)?serial$', kind) || A2($author$project$Libs$Regex$match, '^(tiny|small|big)?int ?(\\(\\d+\\))?( unsigned)?$', kind))) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Int : (((kind === 'double precision') || A2($author$project$Libs$Regex$match, '^numeric ?(\\(\\d+,\\d+\\))?$', kind)) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Float : ((kind === 'boolean') ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Bool : ((kind === 'date') ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Date : (A2($author$project$Libs$Regex$match, '^time ?(\\(\\d+\\))?( with(out)? time zone)?$', kind) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Time : (((kind === 'datetime') || A2($author$project$Libs$Regex$match, '^timestamp(tz)? ?(\\(\\d+\\))?( with(out)? time zone)?$', kind)) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$DateTime : (A2($author$project$Libs$Regex$match, '^interval ?(\\(\\d+\\))?$', kind) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Interval : ((kind === 'uuid') ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Uuid : (((kind === 'cidr') || (kind === 'inet')) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Ip : (A2($author$project$Libs$Regex$match, '^jsonb?$', kind) ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Json : ((kind === 'bytea') ? $author$project$DataSources$SqlParser$Parsers$ColumnType$Binary : $author$project$DataSources$SqlParser$Parsers$ColumnType$Unknown(kind)))))))))))));
};
var $author$project$DataSources$SqlParser$Parsers$ColumnType$toString = function (kind) {
	switch (kind.$) {
		case 0:
			var value = kind.a;
			return value;
		case 1:
			var k = kind.a;
			return $author$project$DataSources$SqlParser$Parsers$ColumnType$toString(k) + '[]';
		case 2:
			return 'String';
		case 3:
			return 'Int';
		case 4:
			return 'Float';
		case 5:
			return 'Bool';
		case 6:
			return 'Date';
		case 7:
			return 'Time';
		case 8:
			return 'DateTime';
		case 9:
			return 'Interval';
		case 10:
			return 'Uuid';
		case 11:
			return 'Ip';
		case 12:
			return 'Json';
		default:
			return 'Binary';
	}
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Table$buildColumn = F3(
	function (useBasicTypes, props, column) {
		return {
			a$: A2(
				$elm$core$List$map,
				function (c) {
					return {cW: c};
				},
				column.a$),
			cz: A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.dh;
				},
				column.cz),
			cD: column.cD,
			a8: A2(
				$elm$core$List$map,
				$author$project$PagesComponents$Projects$Id_$Views$Erd$Table$buildColumnRelation(props),
				column.a8),
			a9: column.a9,
			ba: A2(
				$elm$core$List$map,
				function (i) {
					return {cW: i};
				},
				column.ba),
			bd: column.bd,
			S: useBasicTypes ? $author$project$DataSources$SqlParser$Parsers$ColumnType$toString(
				$author$project$DataSources$SqlParser$Parsers$ColumnType$parse(column.S)) : column.S,
			cW: column.cW,
			av: column.av,
			ay: A2(
				$elm$core$List$map,
				$author$project$PagesComponents$Projects$Id_$Views$Erd$Table$buildColumnRelation(props),
				column.ay),
			bw: A2(
				$elm$core$List$map,
				function (u) {
					return {cW: u};
				},
				column.bw)
		};
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Table$handleTablePointerDown = F2(
	function (htmlId, e) {
		return (e.bE === 1) ? A2($author$project$PagesComponents$Projects$Id_$Models$DragStart, htmlId, e.iG) : ((e.bE === 2) ? A2($author$project$PagesComponents$Projects$Id_$Models$DragStart, $author$project$Conf$ids.ha, e.iG) : $author$project$PagesComponents$Projects$Id_$Models$Noop('No match on table pointer down'));
	});
var $author$project$Libs$List$indexOf = F2(
	function (item, xs) {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$first,
			A2(
				$author$project$Libs$List$find,
				function (_v0) {
					var a = _v0.b;
					return _Utils_eq(a, item);
				},
				A2(
					$elm$core$List$indexedMap,
					F2(
						function (i, a) {
							return _Utils_Tuple2(i, a);
						}),
					xs)));
	});
var $author$project$Libs$Hotkey$keys = function (h) {
	return A2(
		$elm$core$List$filterMap,
		$elm$core$Basics$identity,
		_List_fromArray(
			[
				A3(
				$author$project$Libs$Bool$cond,
				h.gZ,
				$elm$core$Maybe$Just('Ctrl'),
				$elm$core$Maybe$Nothing),
				A3(
				$author$project$Libs$Bool$cond,
				h.cr,
				$elm$core$Maybe$Just('Alt'),
				$elm$core$Maybe$Nothing),
				A3(
				$author$project$Libs$Bool$cond,
				h.aV,
				$elm$core$Maybe$Just('Shift'),
				$elm$core$Maybe$Nothing),
				A3(
				$author$project$Libs$Bool$cond,
				h.cU,
				$elm$core$Maybe$Just('Meta'),
				$elm$core$Maybe$Nothing),
				$elm$core$Maybe$Just(h.bU)
			]));
};
var $author$project$Libs$Nel$partition = F2(
	function (predicate, nel) {
		return A2(
			$elm$core$List$partition,
			predicate,
			$author$project$Libs$Nel$toList(nel));
	});
var $author$project$Models$ColumnOrder$show = function (order) {
	switch (order) {
		case 0:
			return 'By SQL order';
		case 1:
			return 'By property';
		case 2:
			return 'By name';
		default:
			return 'By type';
	}
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Table$stringToArgs = function (args) {
	var _v0 = A2($elm$core$String$split, '#', args);
	if (((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) && (!_v0.b.b.b.b.b.b)) {
		var openedDropdown = _v0.a;
		var _v1 = _v0.b;
		var openedPopover = _v1.a;
		var _v2 = _v1.b;
		var dragging = _v2.a;
		var _v3 = _v2.b;
		var virtualRelation = _v3.a;
		var _v4 = _v3.b;
		var useBasicTypes = _v4.a;
		return _Utils_Tuple2(
			_Utils_Tuple2(openedDropdown, openedPopover),
			_Utils_Tuple3(dragging === 'Y', virtualRelation === 'Y', useBasicTypes === 'Y'));
	} else {
		return _Utils_Tuple2(
			_Utils_Tuple2('', ''),
			_Utils_Tuple3(false, false, false));
	}
};
var $elm$html$Html$Events$onMouseEnter = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseenter',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onMouseLeave = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseleave',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$Libs$Tailwind$bg_50 = function (_v0) {
	var color = _v0;
	return 'bg-' + (color + '-50');
};
var $author$project$Components$Organisms$Table$isHighlightedColumn = F2(
	function (model, column) {
		return A2($elm$core$Set$member, column.cW, model.f.bN);
	});
var $author$project$Libs$Html$Events$mouseDecoder = A2(
	$elm$json$Json$Decode$map,
	function (e) {
		return {
			cr: e.bf.cr,
			bE: e.bE,
			gZ: e.bf.gZ,
			iG: $author$project$Libs$Models$Position$fromTuple(e.fK),
			aV: e.bf.aV
		};
	},
	$mpizenberg$elm_pointer_events$Html$Events$Extra$Mouse$eventDecoder);
var $author$project$Libs$Html$Events$onContextMenu = function (msg) {
	return A2(
		$elm$html$Html$Events$custom,
		'contextmenu',
		A2(
			$elm$json$Json$Decode$map,
			function (e) {
				return {
					bg: msg(e),
					fQ: true,
					ew: true
				};
			},
			$author$project$Libs$Html$Events$mouseDecoder));
};
var $elm$html$Html$Events$onDoubleClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'dblclick',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$Libs$Html$Events$onPointerUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'pointerup',
		A2($elm$json$Json$Decode$map, msg, $author$project$Libs$Html$Events$pointerDecoder));
};
var $author$project$Libs$Tailwind$text_500 = function (_v0) {
	var color = _v0;
	return 'text-' + (color + '-500');
};
var $author$project$Components$Atoms$Icon$Check = 42;
var $author$project$Components$Atoms$Icon$Empty = 94;
var $author$project$Components$Atoms$Icon$ExternalLink = 97;
var $author$project$Components$Atoms$Icon$FingerPrint = 103;
var $author$project$Components$Atoms$Icon$Key = 122;
var $author$project$Components$Atoms$Icon$SortDescending = 188;
var $author$project$Components$Organisms$Table$formatColumnRef = function (ref) {
	return (ref.E === 'public') ? (ref.G + ('.' + ref.r)) : (ref.E + ('.' + (ref.G + ('.' + ref.r))));
};
var $author$project$Track$showTableWithForeignKey = {g6: _List_Nil, e6: true, cW: 'show-table-with-foreign-key'};
var $author$project$Components$Organisms$Table$viewColumnIcon = F2(
	function (model, column) {
		var tooltip = A2(
			$elm$core$String$join,
			', ',
			A2(
				$elm$core$List$filterMap,
				function (a) {
					return a;
				},
				_List_fromArray(
					[
						A2($author$project$Libs$Bool$maybe, column.bd, 'Primary key'),
						A2(
						$author$project$Libs$Bool$maybe,
						$author$project$Libs$List$nonEmpty(column.ay),
						'Foreign key to ' + A3(
							$author$project$Libs$Maybe$mapOrElse,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.r;
								},
								$author$project$Components$Organisms$Table$formatColumnRef),
							'',
							$elm$core$List$head(column.ay))),
						A2(
						$author$project$Libs$Bool$maybe,
						$author$project$Libs$List$nonEmpty(column.bw),
						'Unique constraint for ' + A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function ($) {
									return $.cW;
								},
								column.bw))),
						A2(
						$author$project$Libs$Bool$maybe,
						$author$project$Libs$List$nonEmpty(column.ba),
						'Indexed by ' + A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function ($) {
									return $.cW;
								},
								column.ba))),
						A2(
						$author$project$Libs$Bool$maybe,
						$author$project$Libs$List$nonEmpty(column.a$),
						'In checks ' + A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function ($) {
									return $.cW;
								},
								column.a$)))
					])));
		return $author$project$Libs$List$nonEmpty(column.ay) ? (($author$project$Libs$List$nonEmpty(
			A2(
				$elm$core$List$filter,
				function ($) {
					return $.bv;
				},
				column.ay)) || (!model.B.as)) ? A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					tooltip,
					A2($author$project$Components$Atoms$Icon$solid, 97, 'w-4 h-4'))
				])) : A2(
			$elm$html$Html$div,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'cursor-pointer',
								$author$project$Libs$Tailwind$text_500(model.f.n)
							])),
						$elm$html$Html$Events$onClick(
						A2(model.dn.a0, column.ay, true))
					]),
				$author$project$Libs$Html$Attributes$track($author$project$Track$showTableWithForeignKey)),
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					tooltip,
					A2($author$project$Components$Atoms$Icon$solid, 97, 'w-4 h-4'))
				]))) : (column.bd ? A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					tooltip,
					A2($author$project$Components$Atoms$Icon$solid, 122, 'w-4 h-4'))
				])) : ($author$project$Libs$List$nonEmpty(column.bw) ? A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					tooltip,
					A2($author$project$Components$Atoms$Icon$solid, 103, 'w-4 h-4'))
				])) : ($author$project$Libs$List$nonEmpty(column.ba) ? A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					tooltip,
					A2($author$project$Components$Atoms$Icon$solid, 188, 'w-4 h-4'))
				])) : ($author$project$Libs$List$nonEmpty(column.a$) ? A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					tooltip,
					A2($author$project$Components$Atoms$Icon$solid, 42, 'w-4 h-4'))
				])) : A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2($author$project$Components$Atoms$Icon$solid, 94, 'w-4 h-4')
				]))))));
	});
var $author$project$Components$Molecules$ContextMenu$BottomRight = 0;
var $author$project$Components$Molecules$ContextMenu$itemDisabledStyles = $author$project$Libs$Tailwind$batch(
	_List_fromArray(
		[
			'py-2 px-4 text-sm text-gray-400',
			$author$project$Libs$Tailwind$hover(
			_List_fromArray(
				['bg-gray-50']))
		]));
var $author$project$Components$Molecules$ContextMenu$btnDisabled = F2(
	function (styles, content) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$type_('button'),
					$author$project$Libs$Html$Attributes$role('menuitem'),
					$elm$html$Html$Attributes$tabindex(-1),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'block w-full text-left',
							$author$project$Libs$Tailwind$focus(
							_List_fromArray(
								['outline-none'])),
							$author$project$Components$Molecules$ContextMenu$itemDisabledStyles,
							styles
						]))
				]),
			content);
	});
var $author$project$Components$Organisms$Table$formatTableRef = function (ref) {
	return (ref.E === 'public') ? ref.G : (ref.E + ('.' + ref.G));
};
var $author$project$Libs$List$groupBy = F2(
	function (key, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (a, dict) {
					return A3(
						$elm$core$Dict$update,
						key(a),
						function (v) {
							return $elm$core$Maybe$Just(
								A3(
									$author$project$Libs$Maybe$mapOrElse,
									function (x) {
										return A2($elm$core$List$cons, a, x);
									},
									_List_fromArray(
										[a]),
									v));
						},
						dict);
				}),
			$elm$core$Dict$empty,
			list);
	});
var $author$project$Track$openIncomingRelationsDropdown = {g6: _List_Nil, e6: true, cW: 'open-incoming-relations-dropdown'};
var $author$project$Libs$String$pluralizeL = F2(
	function (word, list) {
		return A2(
			$author$project$Libs$String$pluralize,
			word,
			$elm$core$List$length(list));
	});
var $author$project$Track$showTableWithIncomingRelationsDropdown = {g6: _List_Nil, e6: true, cW: 'show-table-with-incoming-relations-dropdown'};
var $author$project$Components$Organisms$Table$viewColumnIconDropdownItem = F2(
	function (message, content) {
		return A2(
			$elm$html$Html$button,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('button'),
						$elm$html$Html$Events$onClick(message),
						$author$project$Libs$Html$Attributes$role('menuitem'),
						$elm$html$Html$Attributes$tabindex(-1),
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'py-1 block w-full text-left',
								$author$project$Libs$Tailwind$focus(
								_List_fromArray(
									['outline-none'])),
								$author$project$Components$Molecules$ContextMenu$itemStyles
							]))
					]),
				$author$project$Libs$Html$Attributes$track($author$project$Track$showTableWithIncomingRelationsDropdown)),
			content);
	});
var $author$project$Components$Organisms$Table$viewColumnIconDropdown = F3(
	function (model, column, icon) {
		var tablesToShow = A2(
			$author$project$Libs$List$filterNot,
			function ($) {
				return $.bv;
			},
			column.a8);
		var dropdownId = model.t + ('-' + (column.cW + '-dropdown'));
		return ($elm$core$List$isEmpty(column.a8) || (!model.B.as)) ? A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Attributes$id(dropdownId),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'cursor-default',
									$author$project$Libs$Tailwind$focus(
									_List_fromArray(
										['outline-none']))
								]))
						]),
					_List_fromArray(
						[icon]))
				])) : A3(
			$author$project$Components$Molecules$Dropdown$dropdown,
			{
				ao: 0,
				t: dropdownId,
				ar: _Utils_eq(model.f.aR, dropdownId)
			},
			function (m) {
				return A2(
					$elm$html$Html$button,
					_Utils_ap(
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('button'),
								$elm$html$Html$Attributes$id(m.t),
								$elm$html$Html$Events$onClick(
								model.dn.bF(m.t)),
								$author$project$Libs$Html$Attributes$ariaExpanded(m.ar),
								$author$project$Libs$Html$Attributes$ariaHaspopup(true),
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										A3(
										$author$project$Libs$Bool$cond,
										$elm$core$List$isEmpty(tablesToShow),
										'',
										$author$project$Libs$Tailwind$text_500(model.f.n)),
										$author$project$Libs$Tailwind$focus(
										_List_fromArray(
											['outline-none']))
									]))
							]),
						$author$project$Libs$Html$Attributes$track($author$project$Track$openIncomingRelationsDropdown)),
					_List_fromArray(
						[icon]));
			},
			function (_v0) {
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_Utils_ap(
						A2(
							$elm$core$List$map,
							function (rels) {
								var content = _List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$solid, 97, 'inline'),
										$author$project$Libs$Html$bText(
										$author$project$Components$Organisms$Table$formatTableRef(
											{E: rels.cK.r.E, G: rels.cK.r.G})),
										$elm$html$Html$text(
										'.' + A2(
											$elm$core$String$join,
											', ',
											A2(
												$elm$core$List$map,
												function (r) {
													return _Utils_ap(
														r.r.r,
														A3($author$project$Libs$Bool$cond, r.av, '?', ''));
												},
												$author$project$Libs$Nel$toList(rels))))
									]);
								return rels.cK.bv ? A2($author$project$Components$Molecules$ContextMenu$btnDisabled, 'py-1', content) : A2(
									$author$project$Components$Organisms$Table$viewColumnIconDropdownItem,
									A2(
										model.dn.a0,
										_List_fromArray(
											[rels.cK]),
										false),
									content);
							},
							A2(
								$elm$core$List$filterMap,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$List$sortBy(
										A2(
											$elm$core$Basics$composeR,
											function ($) {
												return $.r;
											},
											function ($) {
												return $.r;
											})),
									$author$project$Libs$Nel$fromList),
								$elm$core$Dict$values(
									A2(
										$author$project$Libs$List$groupBy,
										function (r) {
											return r.r.E + ('-' + r.r.G);
										},
										column.a8)))),
						($elm$core$List$length(tablesToShow) > 1) ? _List_fromArray(
							[
								A2(
								$author$project$Components$Organisms$Table$viewColumnIconDropdownItem,
								A2(model.dn.a0, tablesToShow, false),
								_List_fromArray(
									[
										$elm$html$Html$text(
										'Show all (' + (A2($author$project$Libs$String$pluralizeL, 'table', tablesToShow) + ')'))
									]))
							]) : _List_Nil));
			});
	});
var $author$project$Components$Organisms$Table$viewColumnKind = F2(
	function (model, column) {
		var opacity = A3(
			$author$project$Libs$Bool$cond,
			A2($author$project$Components$Organisms$Table$isHighlightedColumn, model, column),
			'opacity-100',
			'opacity-50');
		var value = A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (_default) {
				return A2(
					$author$project$Components$Molecules$Tooltip$t,
					'default value: ' + _default,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['underline', opacity]))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(column.S)
							])));
			},
			A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class(opacity)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(column.S)
					])),
			column.cD);
		var nullable = column.av ? _List_fromArray(
			[
				A2(
				$author$project$Components$Molecules$Tooltip$t,
				'nullable',
				A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(opacity)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('?')
						])))
			]) : _List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('opacity-0')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('?')
					]))
			]);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('ml-1')
				]),
			A2($elm$core$List$cons, value, nullable));
	});
var $author$project$Libs$List$appendOn = F3(
	function (maybe, transform, list) {
		if (!maybe.$) {
			var b = maybe.a;
			return _Utils_ap(
				list,
				_List_fromArray(
					[
						transform(b)
					]));
		} else {
			return list;
		}
	});
var $author$project$Components$Atoms$Icon$Chat = 39;
var $author$project$Components$Atoms$Icon$outline = F2(
	function (icon, styles) {
		return function (lines) {
			return A2($author$project$Components$Atoms$Icon$viewOutline, lines, 'h-6 w-6 ' + styles);
		}(
			A3(
				$author$project$Libs$Maybe$mapOrElse,
				function ($) {
					return $.a;
				},
				_List_Nil,
				A2(
					$elm$core$Dict$get,
					$author$project$Components$Atoms$Icon$toString(icon),
					$author$project$Components$Atoms$Icon$icons)));
	});
var $author$project$Components$Organisms$Table$viewComment = function (comment) {
	return A2(
		$author$project$Components$Molecules$Tooltip$t,
		comment,
		A2($author$project$Components$Atoms$Icon$outline, 39, 'w-4 ml-1 opacity-50'));
};
var $author$project$Components$Organisms$Table$viewColumnName = function (column) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'ml-1 flex flex-grow',
						A3($author$project$Libs$Bool$cond, column.bd, 'font-bold', '')
					]))
			]),
		A3(
			$author$project$Libs$List$appendOn,
			column.cz,
			$author$project$Components$Organisms$Table$viewComment,
			_List_fromArray(
				[
					$elm$html$Html$text(column.cW)
				])));
};
var $author$project$Libs$Html$Attributes$when = F2(
	function (p, attr) {
		return p ? attr : $elm$html$Html$Attributes$classList(_List_Nil);
	});
var $author$project$Components$Organisms$Table$viewColumn = F4(
	function (model, isLast, index, column) {
		return A2(
			$elm$html$Html$div,
			_Utils_ap(
				_List_fromArray(
					[
						A2(
						$author$project$Libs$Html$Attributes$when,
						model.B.aq,
						$elm$html$Html$Events$onMouseEnter(
							A2(model.dn.bP, column.cW, true))),
						A2(
						$author$project$Libs$Html$Attributes$when,
						model.B.aq,
						$elm$html$Html$Events$onMouseLeave(
							A2(model.dn.bP, column.cW, false))),
						A2(
						$author$project$Libs$Html$Attributes$when,
						model.B.as,
						$author$project$Libs$Html$Events$onContextMenu(
							A2(model.dn.cA, index, column.cW))),
						A2(
						$author$project$Libs$Html$Attributes$when,
						model.B.as,
						$elm$html$Html$Events$onDoubleClick(
							model.dn.cC(column.cW))),
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'h-6 px-2 flex items-center align-middle whitespace-nowrap',
								A3(
								$author$project$Libs$Bool$cond,
								A2($author$project$Components$Organisms$Table$isHighlightedColumn, model, column),
								$author$project$Libs$Tailwind$batch(
									_List_fromArray(
										[
											$author$project$Libs$Tailwind$text_500(model.f.n),
											$author$project$Libs$Tailwind$bg_50(model.f.n)
										])),
								'text-default-500 bg-white'),
								A3($author$project$Libs$Bool$cond, isLast, 'rounded-b-lg', '')
							]))
					]),
				A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (action) {
						return _List_fromArray(
							[
								$author$project$Libs$Html$Events$onPointerUp(
								A2(
									$elm$core$Basics$composeR,
									function ($) {
										return $.iG;
									},
									action(column.cW)))
							]);
					},
					_List_Nil,
					model.dn.cv)),
			_List_fromArray(
				[
					A3(
					$author$project$Components$Organisms$Table$viewColumnIconDropdown,
					model,
					column,
					A2($author$project$Components$Organisms$Table$viewColumnIcon, model, column)),
					$author$project$Components$Organisms$Table$viewColumnName(column),
					A2($author$project$Components$Organisms$Table$viewColumnKind, model, column)
				]));
	});
var $author$project$Components$Organisms$Table$viewColumns = function (model) {
	var count = $elm$core$List$length(model.W) + $elm$core$List$length(model.X);
	return A3(
		$elm$html$Html$Keyed$node,
		'div',
		_List_Nil,
		A2(
			$elm$core$List$indexedMap,
			F2(
				function (i, c) {
					return _Utils_Tuple2(
						c.cW,
						A5(
							$elm$html$Html$Lazy$lazy4,
							$author$project$Components$Organisms$Table$viewColumn,
							model,
							_Utils_eq(i + 1, count),
							i,
							c));
				}),
			model.W));
};
var $author$project$Components$Molecules$ContextMenu$BottomLeft = 1;
var $author$project$Components$Atoms$Icon$DotsVertical = 89;
var $author$project$Libs$Tailwind$border_500 = function (_v0) {
	var color = _v0;
	return 'border-' + (color + '-500');
};
var $author$project$Components$Atoms$Badge$rounded = F3(
	function (color, attrs, content) {
		return A2(
			$elm$html$Html$span,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'inline-flex items-center px-2 py-0.5 rounded text-xs font-medium',
								$author$project$Libs$Tailwind$bg_100(color),
								$author$project$Libs$Tailwind$text_800(color)
							]))
					]),
				attrs),
			content);
	});
var $author$project$Components$Atoms$Kbd$badge = F2(
	function (attrs, keys) {
		return A3(
			$author$project$Components$Atoms$Badge$rounded,
			$author$project$Libs$Tailwind$gray,
			attrs,
			_List_fromArray(
				[
					$elm$html$Html$text(
					A2($elm$core$String$join, ' + ', keys))
				]));
	});
var $author$project$Components$Molecules$ContextMenu$btnHotkey = F3(
	function (action, label, hotkey) {
		return A3(
			$author$project$Components$Molecules$ContextMenu$btn,
			'flex justify-between',
			action,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$text(label)
					]),
				A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (k) {
						return _List_fromArray(
							[
								A2(
								$author$project$Components$Atoms$Kbd$badge,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('ml-3')
									]),
								k)
							]);
					},
					_List_Nil,
					hotkey)));
	});
var $author$project$Components$Molecules$ContextMenu$btnSubmenu = function (item) {
	var _v0 = item.aY;
	if (!_v0.$) {
		var submenus = _v0.a;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['group relative', $author$project$Components$Molecules$ContextMenu$itemStyles]))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(item.bV + ' »'),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['group-hover:block hidden -top-1 left-full', $author$project$Components$Molecules$ContextMenu$menuStyles]))
						]),
					A2(
						$elm$core$List$map,
						function (submenu) {
							return A3($author$project$Components$Molecules$ContextMenu$btnHotkey, submenu.aY, submenu.bV, submenu.cL);
						},
						submenus))
				]));
	} else {
		var action = _v0.a.aY;
		var hotkey = _v0.a.cL;
		return A3($author$project$Components$Molecules$ContextMenu$btnHotkey, action, item.bV, hotkey);
	}
};
var $author$project$Track$openTableSettings = {g6: _List_Nil, e6: true, cW: 'open-table-settings'};
var $author$project$Components$Organisms$Table$viewHeader = function (model) {
	var headerTextSize = (model.dm < 0.5) ? _List_fromArray(
		[
			A2(
			$elm$html$Html$Attributes$style,
			'font-size',
			$elm$core$String$fromFloat((1.25 * 0.5) / model.dm) + 'rem')
		]) : _List_Nil;
	var dropdownId = model.t + '-settings';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'flex items-center justify-items-center px-3 py-1 rounded-t-lg border-t-8 border-b border-b-default-200',
						$author$project$Libs$Tailwind$border_500(model.f.n),
						$author$project$Libs$Tailwind$bg_50(
						A3($author$project$Libs$Bool$cond, model.f.aM, model.f.n, $author$project$Libs$Tailwind$default))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2(
						$author$project$Libs$Html$Attributes$when,
						model.B.c9,
						$author$project$Libs$Html$Events$onPointerUp(
							function (e) {
								return model.dn.cw(e.gZ);
							})),
						$elm$html$Html$Attributes$class('flex-grow text-center')
					]),
				_List_fromArray(
					[
						model.cQ ? A2(
						$author$project$Components$Molecules$Tooltip$t,
						'This is a view',
						A2(
							$elm$html$Html$span,
							_Utils_ap(
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('text-xl italic underline decoration-dotted')
									]),
								headerTextSize),
							_List_fromArray(
								[
									$elm$html$Html$text(model.bV)
								]))) : A2(
						$elm$html$Html$span,
						_Utils_ap(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-xl')
								]),
							headerTextSize),
						_List_fromArray(
							[
								$elm$html$Html$text(model.bV)
							]))
					])),
				$author$project$Libs$List$nonEmpty(model.dc) ? A3(
				$author$project$Components$Molecules$Dropdown$dropdown,
				{
					ao: 1,
					t: dropdownId,
					ar: _Utils_eq(model.f.aR, dropdownId)
				},
				function (m) {
					return A2(
						$elm$html$Html$button,
						_Utils_ap(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('button'),
									$elm$html$Html$Attributes$id(m.t),
									$elm$html$Html$Events$onClick(
									model.dn.bF(m.t)),
									$author$project$Libs$Html$Attributes$ariaExpanded(m.ar),
									$author$project$Libs$Html$Attributes$ariaHaspopup(true),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'flex text-sm opacity-25',
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['outline-none']))
										]))
								]),
							$author$project$Libs$Html$Attributes$track($author$project$Track$openTableSettings)),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('sr-only')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Open table settings')
									])),
								A2($author$project$Components$Atoms$Icon$solid, 89, '')
							]));
				},
				function (_v0) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('z-max')
							]),
						A2($elm$core$List$map, $author$project$Components$Molecules$ContextMenu$btnSubmenu, model.dc));
				}) : $author$project$Libs$Html$none
			]));
};
var $author$project$Components$Molecules$Popover$popover = F4(
	function (bubble, content, isOpen, item) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('relative inline-flex flex-col items-center w-full')
				]),
			_List_fromArray(
				[
					item,
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'absolute flex-col z-max',
									bubble,
									A3($author$project$Libs$Bool$cond, isOpen, 'flex', 'hidden')
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('relative leading-none')
								]),
							_List_fromArray(
								[content]))
						]))
				]));
	});
var $author$project$Components$Molecules$Popover$r = $author$project$Components$Molecules$Popover$popover('left-full ml-3 top-1/2 transform -translate-y-2/4');
var $author$project$Components$Organisms$Table$viewHiddenColumns = function (model) {
	if ($elm$core$List$isEmpty(model.X)) {
		return A2($elm$html$Html$div, _List_Nil, _List_Nil);
	} else {
		var popoverId = model.t;
		var showPopover = _Utils_eq(model.f.c_, popoverId) && (!model.f.aC);
		var popover = showPopover ? A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('py-2 rounded-lg bg-white shadow-md z-max')
				]),
			A2(
				$elm$core$List$map,
				function (c) {
					return _Utils_Tuple2(
						c.cW,
						A5($elm$html$Html$Lazy$lazy4, $author$project$Components$Organisms$Table$viewColumn, model, false, -1, c));
				},
				model.X)) : A2($elm$html$Html$div, _List_Nil, _List_Nil);
		var hiddenColumns = model.f.aC ? A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['pt-2 rounded-lg']))
				]),
			A2(
				$elm$core$List$map,
				function (c) {
					return _Utils_Tuple2(
						c.cW,
						A5($elm$html$Html$Lazy$lazy4, $author$project$Components$Organisms$Table$viewColumn, model, false, -1, c));
				},
				model.X)) : A2($elm$html$Html$div, _List_Nil, _List_Nil);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('m-2 p-2 bg-gray-100 rounded-lg')
				]),
			_List_fromArray(
				[
					A3(
					$author$project$Components$Molecules$Popover$r,
					popover,
					showPopover,
					A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								A2(
								$author$project$Libs$Html$Attributes$when,
								model.B.as,
								$elm$html$Html$Events$onClick(model.dn.cx)),
								A2(
								$author$project$Libs$Html$Attributes$when,
								model.B.aq,
								$elm$html$Html$Events$onMouseEnter(
									model.dn.bQ(popoverId))),
								A2(
								$author$project$Libs$Html$Attributes$when,
								model.B.aq,
								$elm$html$Html$Events$onMouseLeave(
									model.dn.bQ(''))),
								$elm$html$Html$Attributes$class('text-gray-400 uppercase font-bold text-sm whitespace-nowrap'),
								$elm$html$Html$Attributes$classList(
								_List_fromArray(
									[
										_Utils_Tuple2('cursor-pointer', model.B.as)
									]))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								A2($author$project$Libs$String$pluralizeL, 'hidden column', model.X))
							]))),
					hiddenColumns
				]));
	}
};
var $author$project$Components$Organisms$Table$table = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$id(model.t),
				A2(
				$author$project$Libs$Html$Attributes$when,
				model.B.aq,
				$elm$html$Html$Events$onMouseEnter(
					model.dn.bR(true))),
				A2(
				$author$project$Libs$Html$Attributes$when,
				model.B.aq,
				$elm$html$Html$Events$onMouseLeave(
					model.dn.bR(false))),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'inline-block bg-white rounded-lg',
						A3($author$project$Libs$Bool$cond, model.f.aM, 'shadow-lg', 'shadow-md'),
						A3(
						$author$project$Libs$Bool$cond,
						model.f.bp,
						'ring-4 ' + $author$project$Libs$Tailwind$ring_500(model.f.n),
						''),
						A3($author$project$Libs$Bool$cond, model.f.cF, 'cursor-move', '')
					]))
			]),
		_List_fromArray(
			[
				A2($elm$html$Html$Lazy$lazy, $author$project$Components$Organisms$Table$viewHeader, model),
				A2($elm$html$Html$Lazy$lazy, $author$project$Components$Organisms$Table$viewColumns, model),
				A2($elm$html$Html$Lazy$lazy, $author$project$Components$Organisms$Table$viewHiddenColumns, model)
			]));
};
var $author$project$PagesComponents$Projects$Id_$Models$MoveColumn = F2(
	function (a, b) {
		return {$: 18, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ColumnContextMenu$viewColumnContextMenu = F2(
	function (index, column) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3(
					$author$project$Components$Molecules$ContextMenu$btnHotkey,
					$author$project$PagesComponents$Projects$Id_$Models$HideColumn(column),
					'Hide column',
					A2(
						$elm$core$Maybe$map,
						$author$project$Libs$Hotkey$keys,
						A2(
							$elm$core$Maybe$andThen,
							$elm$core$List$head,
							A2($elm$core$Dict$get, 'remove', $author$project$Conf$hotkeys)))),
					A3(
					$author$project$Components$Molecules$ContextMenu$btn,
					'',
					A2($author$project$PagesComponents$Projects$Id_$Models$MoveColumn, column, index - 1),
					_List_fromArray(
						[
							$elm$html$Html$text('Move up')
						])),
					A3(
					$author$project$Components$Molecules$ContextMenu$btn,
					'',
					A2($author$project$PagesComponents$Projects$Id_$Models$MoveColumn, column, index + 1),
					_List_fromArray(
						[
							$elm$html$Html$text('Move down')
						])),
					A3(
					$author$project$Components$Molecules$ContextMenu$btn,
					'',
					A2($author$project$PagesComponents$Projects$Id_$Models$MoveColumn, column, 0),
					_List_fromArray(
						[
							$elm$html$Html$text('Move top')
						])),
					A3(
					$author$project$Components$Molecules$ContextMenu$btn,
					'',
					A2($author$project$PagesComponents$Projects$Id_$Models$MoveColumn, column, 100),
					_List_fromArray(
						[
							$elm$html$Html$text('Move bottom')
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ColumnContextMenu$viewHiddenColumnContextMenu = F2(
	function (_v0, column) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3(
					$author$project$Components$Molecules$ContextMenu$btn,
					'',
					$author$project$PagesComponents$Projects$Id_$Models$ShowColumn(column),
					_List_fromArray(
						[
							$elm$html$Html$text('Show column')
						]))
				]));
	});
var $author$project$Libs$Maybe$when = F2(
	function (p, a) {
		return p ? $elm$core$Maybe$Just(a) : $elm$core$Maybe$Nothing;
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Table$viewTable = F7(
	function (conf, zoom, cursorMode, args, index, props, table) {
		var drag = A3(
			$author$project$Libs$Bool$cond,
			(!cursorMode) || (!conf.fC),
			_List_Nil,
			_List_fromArray(
				[
					$author$project$Libs$Html$Events$stopPointerDown(
					$author$project$PagesComponents$Projects$Id_$Views$Erd$Table$handleTablePointerDown(table.fl))
				]));
		var _v0 = $author$project$PagesComponents$Projects$Id_$Views$Erd$Table$stringToArgs(args);
		var _v1 = _v0.a;
		var openedDropdown = _v1.a;
		var openedPopover = _v1.b;
		var _v2 = _v0.b;
		var dragging = _v2.a;
		var virtualRelation = _v2.b;
		var useBasicTypes = _v2.c;
		var zIndex = ($author$project$Conf$canvas.jK.jr + index) + A3(
			$author$project$Libs$Bool$cond,
			props.bp || (dragging || A2($elm$core$String$startsWith, table.fl, openedDropdown)),
			1000,
			0);
		var _v3 = A2(
			$author$project$Libs$Nel$partition,
			function (c) {
				return A2(
					$elm$core$List$any,
					function (col) {
						return _Utils_eq(c.cW, col);
					},
					props.bq);
			},
			A2(
				$author$project$Libs$Nel$map,
				A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Table$buildColumn, useBasicTypes, props),
				$author$project$Libs$Ned$values(table.W)));
		var columns = _v3.a;
		var hiddenColumns = _v3.b;
		return A2(
			$elm$html$Html$div,
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'select-none absolute',
								A3(
								$author$project$Libs$Bool$cond,
								_Utils_eq(props.l, $author$project$Libs$Models$Size$zero),
								'invisible',
								'')
							])),
						A2(
						$elm$html$Html$Attributes$style,
						'left',
						$elm$core$String$fromFloat(props.iG.at) + 'px'),
						A2(
						$elm$html$Html$Attributes$style,
						'top',
						$elm$core$String$fromFloat(props.iG.aD) + 'px'),
						A2(
						$elm$html$Html$Attributes$style,
						'z-index',
						$elm$core$String$fromInt(zIndex))
					]),
				drag),
			_List_fromArray(
				[
					$author$project$Components$Organisms$Table$table(
					{
						dn: {
							cv: A2(
								$author$project$Libs$Bool$maybe,
								virtualRelation,
								F2(
									function (col, pos) {
										return $author$project$PagesComponents$Projects$Id_$Models$VirtualRelationMsg(
											A2(
												$author$project$PagesComponents$Projects$Id_$Models$VRUpdate,
												{r: col, G: table.t},
												pos));
									})),
							bF: $author$project$PagesComponents$Projects$Id_$Models$DropdownToggle,
							cw: $author$project$PagesComponents$Projects$Id_$Models$SelectTable(table.t),
							cx: $author$project$PagesComponents$Projects$Id_$Models$ToggleHiddenColumns(table.t),
							a0: F2(
								function (cols, isOut) {
									return function (hint) {
										if (!cols.b) {
											return $author$project$PagesComponents$Projects$Id_$Models$Noop('No table to show');
										} else {
											if (!cols.b.b) {
												var col = cols.a;
												return A2(
													$author$project$PagesComponents$Projects$Id_$Models$ShowTable,
													_Utils_Tuple2(col.r.E, col.r.G),
													hint);
											} else {
												return A2(
													$author$project$PagesComponents$Projects$Id_$Models$ShowTables,
													A2(
														$elm$core$List$map,
														function (col) {
															return _Utils_Tuple2(col.r.E, col.r.G);
														},
														cols),
													hint);
											}
										}
									}(
										$elm$core$Maybe$Just(
											A3(
												$author$project$Libs$Bool$cond,
												isOut,
												A2($author$project$PagesComponents$Projects$Id_$Models$PositionHint$PlaceRight, props.iG, props.l),
												$author$project$PagesComponents$Projects$Id_$Models$PositionHint$PlaceLeft(props.iG))));
								}),
							cA: F2(
								function (i, col) {
									return $author$project$PagesComponents$Projects$Id_$Models$ContextMenuCreate(
										A5(
											$author$project$Libs$Bool$cond,
											A2($author$project$Libs$List$has, col, props.bq),
											$author$project$PagesComponents$Projects$Id_$Views$Modals$ColumnContextMenu$viewColumnContextMenu,
											$author$project$PagesComponents$Projects$Id_$Views$Modals$ColumnContextMenu$viewHiddenColumnContextMenu,
											i,
											{r: col, G: table.t}));
								}),
							cC: function (col) {
								return A4(
									$author$project$Libs$Bool$cond,
									A2($author$project$Libs$List$has, col, props.bq),
									$author$project$PagesComponents$Projects$Id_$Models$HideColumn,
									$author$project$PagesComponents$Projects$Id_$Models$ShowColumn,
									{r: col, G: table.t});
							},
							bP: function (col) {
								return $author$project$PagesComponents$Projects$Id_$Models$ToggleHoverColumn(
									{r: col, G: table.t});
							},
							bQ: $author$project$PagesComponents$Projects$Id_$Models$PopoverSet,
							bR: $author$project$PagesComponents$Projects$Id_$Models$ToggleHoverTable(table.t)
						},
						W: A2(
							$elm$core$List$sortBy,
							function (c) {
								return A2(
									$elm$core$Maybe$withDefault,
									0,
									A2($author$project$Libs$List$indexOf, c.cW, props.bq));
							},
							columns),
						B: {aq: conf.aq, as: conf.as, fC: conf.fC, c9: conf.c9},
						X: A2(
							$elm$core$List$sortBy,
							function ($) {
								return $.a9;
							},
							hiddenColumns),
						t: table.fl,
						cQ: table.eQ,
						bV: table.bV,
						fW: {E: table.E, G: table.cW},
						dc: A2(
							$elm$core$List$filterMap,
							$elm$core$Basics$identity,
							_List_fromArray(
								[
									A2(
									$author$project$Libs$Maybe$when,
									conf.as,
									{
										aY: $toastal$either$Either$Right(
											{
												aY: $author$project$PagesComponents$Projects$Id_$Models$HideTable(table.t),
												cL: A2(
													$elm$core$Maybe$map,
													$author$project$Libs$Hotkey$keys,
													A2(
														$elm$core$Maybe$andThen,
														$elm$core$List$head,
														A2($elm$core$Dict$get, 'remove', $author$project$Conf$hotkeys)))
											}),
										bV: 'Hide table'
									}),
									A2(
									$author$project$Libs$Maybe$when,
									conf.as,
									{
										aY: $toastal$either$Either$Left(
											A2(
												$elm$core$List$map,
												function (o) {
													return {
														aY: A2($author$project$PagesComponents$Projects$Id_$Models$SortColumns, table.t, o),
														cL: $elm$core$Maybe$Nothing,
														bV: $author$project$Models$ColumnOrder$show(o)
													};
												},
												$author$project$Models$ColumnOrder$all)),
										bV: 'Sort columns'
									}),
									A2(
									$author$project$Libs$Maybe$when,
									conf.as,
									{
										aY: $toastal$either$Either$Left(
											_List_fromArray(
												[
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$HideColumns, table.t, 'relations'),
													cL: $elm$core$Maybe$Nothing,
													bV: 'Without relation'
												},
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$HideColumns, table.t, 'regular'),
													cL: $elm$core$Maybe$Nothing,
													bV: 'Regular ones'
												},
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$HideColumns, table.t, 'nullable'),
													cL: $elm$core$Maybe$Nothing,
													bV: 'Nullable ones'
												},
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$HideColumns, table.t, 'all'),
													cL: $elm$core$Maybe$Nothing,
													bV: 'All'
												}
												])),
										bV: 'Hide columns'
									}),
									A2(
									$author$project$Libs$Maybe$when,
									conf.as,
									{
										aY: $toastal$either$Either$Left(
											_List_fromArray(
												[
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$ShowColumns, table.t, 'relations'),
													cL: $elm$core$Maybe$Nothing,
													bV: 'With relations'
												},
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$ShowColumns, table.t, 'all'),
													cL: $elm$core$Maybe$Nothing,
													bV: 'All'
												}
												])),
										bV: 'Show columns'
									}),
									A2(
									$author$project$Libs$Maybe$when,
									conf.as,
									{
										aY: $toastal$either$Either$Left(
											_List_fromArray(
												[
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$TableOrder, table.t, index + 1),
													cL: A2(
														$elm$core$Maybe$map,
														$author$project$Libs$Hotkey$keys,
														A2(
															$elm$core$Maybe$andThen,
															$elm$core$List$head,
															A2($elm$core$Dict$get, 'move-forward', $author$project$Conf$hotkeys))),
													bV: 'Bring forward'
												},
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$TableOrder, table.t, index - 1),
													cL: A2(
														$elm$core$Maybe$map,
														$author$project$Libs$Hotkey$keys,
														A2(
															$elm$core$Maybe$andThen,
															$elm$core$List$head,
															A2($elm$core$Dict$get, 'move-backward', $author$project$Conf$hotkeys))),
													bV: 'Send backward'
												},
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$TableOrder, table.t, 1000),
													cL: A2(
														$elm$core$Maybe$map,
														$author$project$Libs$Hotkey$keys,
														A2(
															$elm$core$Maybe$andThen,
															$elm$core$List$head,
															A2($elm$core$Dict$get, 'move-to-top', $author$project$Conf$hotkeys))),
													bV: 'Bring to front'
												},
													{
													aY: A2($author$project$PagesComponents$Projects$Id_$Models$TableOrder, table.t, 0),
													cL: A2(
														$elm$core$Maybe$map,
														$author$project$Libs$Hotkey$keys,
														A2(
															$elm$core$Maybe$andThen,
															$elm$core$List$head,
															A2($elm$core$Dict$get, 'move-to-back', $author$project$Conf$hotkeys))),
													bV: 'Send to back'
												}
												])),
										bV: 'Order'
									}),
									A2(
									$author$project$Libs$Maybe$when,
									conf.bM,
									{
										aY: $toastal$either$Either$Right(
											{
												aY: $author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
													A2(
														$author$project$PagesComponents$Projects$Id_$Models$FPOpen,
														$elm$core$Maybe$Just(table.t),
														$elm$core$Maybe$Nothing)),
												cL: $elm$core$Maybe$Nothing
											}),
										bV: 'Find path for this table'
									})
								])),
						f: {n: props.n, cF: dragging, bN: props.bN, aM: props.aM, aR: openedDropdown, c_: openedPopover, bp: props.bp, aC: props.aC},
						dm: zoom
					})
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Erd$viewTables = function (conf) {
	return function (cursorMode) {
		return function (virtualRelation) {
			return function (openedDropdown) {
				return function (openedPopover) {
					return function (dragging) {
						return function (zoom) {
							return function (useBasicTypes) {
								return function (tableProps) {
									return function (tables) {
										return function (shownTables) {
											return A3(
												$elm$html$Html$Keyed$node,
												'div',
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('az-tables')
													]),
												A2(
													$elm$core$List$map,
													function (_v1) {
														var index = _v1.a;
														var table = _v1.b;
														var props = _v1.c;
														return _Utils_Tuple2(
															$author$project$Models$Project$TableId$toString(table.t),
															A8(
																$elm$html$Html$Lazy$lazy7,
																$author$project$PagesComponents$Projects$Id_$Views$Erd$Table$viewTable,
																conf,
																zoom,
																cursorMode,
																A5(
																	$author$project$PagesComponents$Projects$Id_$Views$Erd$Table$argsToString,
																	A3(
																		$author$project$Libs$Bool$cond,
																		A2($elm$core$String$startsWith, table.fl, openedDropdown),
																		openedDropdown,
																		''),
																	A3(
																		$author$project$Libs$Bool$cond,
																		A2($elm$core$String$startsWith, table.fl, openedPopover),
																		openedPopover,
																		''),
																	A2(
																		$author$project$Libs$Maybe$any,
																		function (d) {
																			return _Utils_eq(d.t, table.fl) && (!_Utils_eq(d.Y, d.fw));
																		},
																		dragging),
																	!_Utils_eq(virtualRelation, $elm$core$Maybe$Nothing),
																	useBasicTypes),
																index,
																props,
																table));
													},
													A2(
														$elm$core$List$filterMap,
														function (_v0) {
															var index = _v0.a;
															var tableId = _v0.b;
															return A3(
																$elm$core$Maybe$map2,
																F2(
																	function (table, props) {
																		return _Utils_Tuple3(index, table, props);
																	}),
																A2($elm$core$Dict$get, tableId, tables),
																A2($elm$core$Dict$get, tableId, tableProps));
														},
														A2(
															$elm$core$List$indexedMap,
															F2(
																function (index, tableId) {
																	return _Utils_Tuple2(index, tableId);
																}),
															$elm$core$List$reverse(shownTables)))));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewVirtualRelation = function (_v0) {
	var _v1 = _v0.a;
	var maybeProps = _v1.a;
	var column = _v1.b;
	var position = _v0.b;
	if (!maybeProps.$) {
		var props = maybeProps.a;
		return A6(
			$author$project$Components$Organisms$Relation$line,
			{
				at: props.iG.at + A3(
					$author$project$Libs$Bool$cond,
					_Utils_cmp(position.at, props.iG.at + (props.l.aF / 2)) < 0,
					0,
					props.l.aF),
				aD: A2($author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$positionTop, props.iG, props.a9)
			},
			{at: position.at, aD: position.aD},
			column.av,
			$elm$core$Maybe$Just(props.n),
			'virtual relation',
			$author$project$Conf$canvas.jK.jr - 1);
	} else {
		return $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewEmptyRelation;
	}
};
var $author$project$PagesComponents$Projects$Id_$Views$Erd$viewErd = F8(
	function (conf, screen, erd, cursorMode, selectionBox, virtualRelation, args, dragging) {
		var canvas = A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (d) {
				return A2($author$project$PagesComponents$Projects$Id_$Updates$Drag$moveCanvas, d, erd.dt);
			},
			erd.dt,
			A2(
				$author$project$Libs$Maybe$filter,
				function (d) {
					return _Utils_eq(d.t, $author$project$Conf$ids.ha);
				},
				dragging));
		var tableProps = A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (d) {
				return A3($author$project$PagesComponents$Projects$Id_$Updates$Drag$moveTables, d, canvas.dm, erd.bu);
			},
			erd.bu,
			A2(
				$author$project$Libs$Maybe$filter,
				function (d) {
					return !_Utils_eq(d.t, $author$project$Conf$ids.ha);
				},
				dragging));
		var displayedTables = A2(
			$elm$core$Dict$filter,
			F2(
				function (_v2, t) {
					return (!_Utils_eq(t.l, $author$project$Libs$Models$Size$zero)) && A2($elm$core$List$member, t.t, erd.ca);
				}),
			tableProps);
		var displayedRelations = A2(
			$elm$core$List$filter,
			function (r) {
				return A2(
					$elm$core$List$any,
					function (c) {
						return A2($elm$core$Dict$member, c.G, displayedTables);
					},
					_List_fromArray(
						[r.de, r.fW]));
			},
			erd.iU);
		var virtualRelationInfo = A2(
			$elm$core$Maybe$andThen,
			function (vr) {
				return A2(
					$elm$core$Maybe$andThen,
					function (src) {
						return A2(
							$elm$core$Maybe$map,
							function (ref) {
								return _Utils_Tuple2(
									_Utils_Tuple2(
										A3($author$project$PagesComponents$Projects$Id_$Models$Erd$getColumnProps, src.G, src.r, erd),
										ref),
									A3($author$project$Models$Project$CanvasProps$adapt, screen, canvas, vr.h0));
							},
							A3($author$project$PagesComponents$Projects$Id_$Models$Erd$getColumn, src.G, src.r, erd));
					},
					vr.de);
			},
			virtualRelation);
		var _v0 = $author$project$PagesComponents$Projects$Id_$Views$Erd$stringToArgs(args);
		var openedDropdown = _v0.a;
		var openedPopover = _v0.b;
		return A2(
			$elm$html$Html$main_,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('az-erd h-full bg-gray-100 overflow-hidden'),
					A2(
					$elm$html$Html$Attributes$style,
					'height',
					A3($author$project$Libs$Bool$cond, conf.jh, 'calc(100% - 64px)', '100%')),
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'cursor-grab-all',
							(!cursorMode) && (_Utils_eq(dragging, $elm$core$Maybe$Nothing) && _Utils_eq(virtualRelation, $elm$core$Maybe$Nothing))),
							_Utils_Tuple2(
							'cursor-grabbing-all',
							(!cursorMode) && ((!_Utils_eq(dragging, $elm$core$Maybe$Nothing)) && _Utils_eq(virtualRelation, $elm$core$Maybe$Nothing))),
							_Utils_Tuple2(
							'cursor-crosshair-all',
							!_Utils_eq(virtualRelation, $elm$core$Maybe$Nothing))
						])),
					$elm$html$Html$Attributes$id($author$project$Conf$ids.ha),
					A2(
					$author$project$Libs$Html$Attributes$when,
					conf.fC,
					$author$project$Libs$Html$Events$onWheel($author$project$PagesComponents$Projects$Id_$Models$OnWheel)),
					A2(
					$author$project$Libs$Html$Attributes$when,
					conf.fC || conf.c9,
					$author$project$Libs$Html$Events$stopPointerDown(
						A2($author$project$PagesComponents$Projects$Id_$Views$Erd$handleErdPointerDown, conf, cursorMode)))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('az-canvas origin-top-left'),
							A2(
							$elm$html$Html$Attributes$style,
							'transform',
							'translate(' + ($elm$core$String$fromFloat(canvas.iG.at) + ('px, ' + ($elm$core$String$fromFloat(canvas.iG.aD) + ('px) scale(' + ($elm$core$String$fromFloat(canvas.dm) + ')'))))))
						]),
					_List_fromArray(
						[
							$author$project$PagesComponents$Projects$Id_$Views$Erd$viewTables(conf)(cursorMode)(virtualRelation)(openedDropdown)(openedPopover)(dragging)(canvas.dm)(erd.dc.bG)(tableProps)(erd.jr)(erd.ca),
							A4($elm$html$Html$Lazy$lazy3, $author$project$PagesComponents$Projects$Id_$Views$Erd$viewRelations, dragging, displayedTables, displayedRelations),
							A3(
							$author$project$Libs$Maybe$mapOrElse,
							$author$project$PagesComponents$Projects$Id_$Views$Erd$viewSelectionBox,
							A2($elm$html$Html$div, _List_Nil, _List_Nil),
							A2(
								$author$project$Libs$Maybe$filterNot,
								function (_v1) {
									return $elm$core$Dict$isEmpty(tableProps);
								},
								selectionBox)),
							A3($author$project$Libs$Maybe$mapOrElse, $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewVirtualRelation, $author$project$PagesComponents$Projects$Id_$Views$Erd$Relation$viewEmptyRelation, virtualRelationInfo)
						])),
					$elm$core$Dict$isEmpty(tableProps) ? $author$project$PagesComponents$Projects$Id_$Views$Erd$viewEmptyState(erd.jr) : A2($elm$html$Html$div, _List_Nil, _List_Nil)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$HideAllTables = {$: 8};
var $author$project$PagesComponents$Projects$Id_$Models$SAOpen = {$: 0};
var $author$project$PagesComponents$Projects$Id_$Models$ShowAllTables = {$: 6};
var $author$project$Components$Atoms$Icon$Menu = 135;
var $author$project$PagesComponents$Projects$Id_$Models$ToggleMobileMenu = {$: 0};
var $author$project$Components$Atoms$Icon$X = 227;
var $author$project$Libs$Html$Attributes$ariaControls = function (targetId) {
	return A2($elm$html$Html$Attributes$attribute, 'aria-controls', targetId);
};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$navbarMobileButton = function (open) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'flex',
						$author$project$Libs$Tailwind$lg(
						_List_fromArray(
							['hidden']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('button'),
						$elm$html$Html$Events$onClick($author$project$PagesComponents$Projects$Id_$Models$ToggleMobileMenu),
						$author$project$Libs$Html$Attributes$ariaControls('mobile-menu'),
						$author$project$Libs$Html$Attributes$ariaExpanded(false),
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'inline-flex items-center justify-center p-2 rounded-md text-primary-200',
								$author$project$Libs$Tailwind$hover(
								_List_fromArray(
									['text-white bg-primary-500'])),
								$author$project$Libs$Tailwind$focus(
								_List_fromArray(
									['outline-none ring-2 ring-inset ring-white']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('sr-only')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Open main menu')
							])),
						A2(
						$author$project$Components$Atoms$Icon$outline,
						135,
						A3($author$project$Libs$Bool$cond, open, 'hidden', 'block')),
						A2(
						$author$project$Components$Atoms$Icon$outline,
						227,
						A3($author$project$Libs$Bool$cond, open, 'block', 'hidden'))
					]))
			]));
};
var $author$project$Libs$Dict$nonEmpty = function (dict) {
	return !$elm$core$Dict$isEmpty(dict);
};
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarBrand = function (conf) {
	var attrs = conf.dy ? _List_fromArray(
		[
			$elm$html$Html$Attributes$href(
			$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects))
		]) : $author$project$Libs$Html$Attributes$hrefBlank($author$project$Conf$constants.gE);
	return A2(
		$elm$html$Html$a,
		_Utils_ap(
			attrs,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('flex justify-start items-center flex-shrink-0 font-medium')
				])),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('block h-8 h-8'),
						$elm$html$Html$Attributes$src('/logo.png'),
						$elm$html$Html$Attributes$alt('Azimutt'),
						$elm$html$Html$Attributes$width(32),
						$elm$html$Html$Attributes$height(32)
					]),
				_List_Nil),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'ml-3 text-2xl text-white hidden',
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['block']))
							]))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Azimutt')
					]))
			]));
};
var $author$project$Components$Atoms$Icon$LightningBolt = 125;
var $author$project$Components$Molecules$Tooltip$b = A2($author$project$Components$Molecules$Tooltip$tooltip, 'top-full mt-3 items-center', 'top-0 -translate-y-2/4');
var $author$project$Libs$Tailwind$ring_offset_600 = function (_v0) {
	var color = _v0;
	return 'ring-offset-' + (color + '-600');
};
var $author$project$Libs$Tailwind$focus_ring_offset_600 = function (ringOffsetColor) {
	return $author$project$Libs$Tailwind$focus(
		_List_fromArray(
			[
				'outline-none ring-2 ring-offset-2',
				'ring-white',
				$author$project$Libs$Tailwind$ring_offset_600(ringOffsetColor)
			]));
};
var $author$project$Libs$Either$reduce = F3(
	function (f, g, e) {
		if (!e.$) {
			var a = e.a;
			return f(a);
		} else {
			var b = e.a;
			return g(b);
		}
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarFeatures = F3(
	function (features, htmlId, openedDropdown) {
		return A3(
			$author$project$Components$Molecules$Dropdown$dropdown,
			{
				ao: 1,
				t: htmlId,
				ar: _Utils_eq(openedDropdown, htmlId)
			},
			function (m) {
				return A2(
					$author$project$Components$Molecules$Tooltip$b,
					'Advanced features',
					A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('button'),
								$elm$html$Html$Attributes$id(m.t),
								$elm$html$Html$Events$onClick(
								$author$project$PagesComponents$Projects$Id_$Models$DropdownToggle(m.t)),
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mx-1 flex-shrink-0 flex justify-center items-center bg-primary-600 p-1 rounded-full text-primary-200',
										$author$project$Libs$Tailwind$hover(
										_List_fromArray(
											['text-white animate-bounce'])),
										$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('sr-only')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Advanced features')
									])),
								A2($author$project$Components$Atoms$Icon$outline, 125, '')
							])));
			},
			function (_v0) {
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					A2(
						$elm$core$List$map,
						function (btn) {
							return A3(
								$author$project$Libs$Either$reduce,
								function (url) {
									return A3(
										$author$project$Libs$Html$extLink,
										url,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$role('menuitem'),
												$elm$html$Html$Attributes$tabindex(-1),
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['block', $author$project$Components$Molecules$ContextMenu$itemStyles]))
											]),
										_List_fromArray(
											[btn.bI]));
								},
								function (action) {
									return A3(
										$author$project$Components$Molecules$ContextMenu$btn,
										'flex justify-between',
										action,
										A2(
											$elm$core$List$cons,
											btn.bI,
											A3(
												$author$project$Libs$Maybe$mapOrElse,
												function (h) {
													return _List_fromArray(
														[
															A2(
															$author$project$Components$Atoms$Kbd$badge,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('ml-3')
																]),
															$author$project$Libs$Hotkey$keys(h))
														]);
												},
												_List_Nil,
												btn.cL)));
								},
								btn.aY);
						},
						features));
			});
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarHelp = A2(
	$elm$html$Html$button,
	_List_fromArray(
		[
			$elm$html$Html$Events$onClick(
			$author$project$PagesComponents$Projects$Id_$Models$HelpMsg(
				$author$project$PagesComponents$Projects$Id_$Models$HOpen(''))),
			$author$project$Libs$Html$Attributes$css(
			_List_fromArray(
				[
					'ml-3 rounded-full print:hidden',
					$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
				]))
		]),
	_List_fromArray(
		[
			A2($author$project$Components$Atoms$Icon$solid, 167, 'text-primary-300')
		]));
var $author$project$Components$Atoms$Icon$Cog = 62;
var $author$project$PagesComponents$Projects$Id_$Models$PSOpen = {$: 0};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarMobileMenu = F3(
	function (features, canResetCanvas, isOpen) {
		var groupSpace = 'px-2 pt-2 pb-3 space-y-1';
		var groupBorder = 'border-t border-primary-500';
		var btnStyle = $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'text-primary-100 flex w-full items-center justify-start px-3 py-2 rounded-md text-base font-medium',
					$author$project$Libs$Tailwind$hover(
					_List_fromArray(
						['bg-primary-500 text-white'])),
					$author$project$Libs$Tailwind$focus(
					_List_fromArray(
						['outline-none']))
				]));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['hidden'])),
							A3($author$project$Libs$Bool$cond, isOpen, '', 'hidden')
						])),
					$elm$html$Html$Attributes$id('mobile-menu')
				]),
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, groupContent) {
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											groupSpace,
											A3($author$project$Libs$Bool$cond, !(!i), groupBorder, '')
										]))
								]),
							groupContent);
					}),
				A2(
					$elm$core$List$filter,
					$author$project$Libs$List$nonEmpty,
					_List_fromArray(
						[
							A3(
							$author$project$Libs$Bool$cond,
							canResetCanvas,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$button,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$type_('button'),
											$elm$html$Html$Events$onClick($author$project$PagesComponents$Projects$Id_$Models$resetCanvas),
											$elm$html$Html$Attributes$class(btnStyle)
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Reset canvas')
										]))
								]),
							_List_Nil),
							A2(
							$elm$core$List$map,
							function (f) {
								return A3(
									$author$project$Libs$Either$reduce,
									function (url) {
										return A3(
											$author$project$Libs$Html$extLink,
											url,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class(btnStyle)
												]),
											_List_fromArray(
												[f.bI]));
									},
									function (action) {
										return A2(
											$elm$html$Html$button,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$type_('button'),
													$elm$html$Html$Events$onClick(action),
													$elm$html$Html$Attributes$class(btnStyle)
												]),
											_List_fromArray(
												[f.bI]));
									},
									f.aY);
							},
							features),
							_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('button'),
										$elm$html$Html$Events$onClick(
										$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSOpen)),
										$elm$html$Html$Attributes$class(btnStyle)
									]),
								_List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$outline, 62, 'mr-3'),
										$elm$html$Html$text('Settings')
									]))
							])
						]))));
	});
var $author$project$Components$Atoms$Button$commonStyles = function (color) {
	return $author$project$Libs$Tailwind$batch(
		_List_fromArray(
			[
				'inline-flex justify-center items-center border font-medium',
				$author$project$Libs$Tailwind$focus_ring_500(color)
			]));
};
var $author$project$Components$Atoms$Button$build = F5(
	function (colorStyles, sizeStyles, color, attrs, content) {
		return A2(
			$elm$html$Html$button,
			_Utils_ap(
				attrs,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$type_('button'),
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								$author$project$Components$Atoms$Button$commonStyles(color),
								colorStyles(color),
								sizeStyles
							]))
					])),
			content);
	});
var $author$project$Libs$Tailwind$bg_300 = function (_v0) {
	var color = _v0;
	return 'bg-' + (color + '-300');
};
var $author$project$Libs$Tailwind$bg_600 = function (_v0) {
	var color = _v0;
	return 'bg-' + (color + '-600');
};
var $author$project$Libs$Tailwind$bg_700 = function (_v0) {
	var color = _v0;
	return 'bg-' + (color + '-700');
};
var $author$project$Libs$Tailwind$disabled = $author$project$Libs$Tailwind$addState('disabled');
var $author$project$Components$Atoms$Button$primary = function (color) {
	return $author$project$Libs$Tailwind$batch(
		_List_fromArray(
			[
				'border-transparent shadow-sm text-white',
				$author$project$Libs$Tailwind$bg_600(color),
				$author$project$Libs$Tailwind$hover(
				_List_fromArray(
					[
						$author$project$Libs$Tailwind$bg_700(color)
					])),
				$author$project$Libs$Tailwind$disabled(
				_List_fromArray(
					[
						'cursor-not-allowed',
						$author$project$Libs$Tailwind$bg_300(color)
					]))
			]));
};
var $author$project$Components$Atoms$Button$size3 = 'px-4 py-2 text-sm rounded-md';
var $author$project$Components$Atoms$Button$primary3 = A2($author$project$Components$Atoms$Button$build, $author$project$Components$Atoms$Button$primary, $author$project$Components$Atoms$Button$size3);
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarResetLayout = function (canResetCanvas) {
	return A3(
		$author$project$Components$Atoms$Button$primary3,
		$author$project$Libs$Tailwind$primary,
		_List_fromArray(
			[
				$elm$html$Html$Events$onClick($author$project$PagesComponents$Projects$Id_$Models$resetCanvas),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'ml-auto',
						A3($author$project$Libs$Bool$cond, canResetCanvas, '', 'invisible')
					]))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('Reset canvas')
			]));
};
var $author$project$Components$Atoms$Icon$Search = 178;
var $author$project$PagesComponents$Projects$Id_$Models$SearchUpdated = function (a) {
	return {$: 1, a: a};
};
var $author$project$Components$Atoms$Icon$Table = 199;
var $author$project$Components$Atoms$Icon$Tag = 200;
var $elm$html$Html$Attributes$autocomplete = function (bool) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var $elm$html$Html$kbd = _VirtualDom_node('kbd');
var $elm$html$Html$Events$onBlur = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'blur',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onFocus = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'focus',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundColumn = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$columnMatch = F3(
	function (query, table, column) {
		return _Utils_eq(column.cW, query) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				1,
				A2($author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundColumn, table, column))) : (A2($elm$core$String$startsWith, query, column.cW) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				0.9,
				A2($author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundColumn, table, column))) : (A2($elm$core$String$contains, query, column.cW) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				0.8,
				A2($author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundColumn, table, column))) : ((A2(
			$author$project$Libs$Maybe$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.dh;
				},
				$elm$core$String$contains(query)),
			column.cz) || (A2($elm$core$String$contains, query, column.S) || A2(
			$author$project$Libs$Maybe$any,
			$elm$core$String$contains(query),
			column.cD))) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				0.7,
				A2($author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundColumn, table, column))) : $elm$core$Maybe$Nothing)));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundRelation = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$relationMatch = F2(
	function (query, relation) {
		return _Utils_eq(relation.cW, query) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				0.1,
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundRelation(relation))) : (A2($elm$core$String$startsWith, query, relation.cW) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				0.09,
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundRelation(relation))) : (A2($elm$core$String$contains, query, relation.cW) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				0.08,
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundRelation(relation))) : ((A2($elm$core$String$contains, query, relation.de.r) || (A2($elm$core$String$contains, query, relation.fW.r) || (A2($elm$core$String$contains, query, relation.de.G.b) || A2($elm$core$String$contains, query, relation.fW.G.b)))) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				0.07,
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundRelation(relation))) : $elm$core$Maybe$Nothing)));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundTable = function (a) {
	return {$: 0, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$shortBonus = function (text) {
	return 1 / $elm$core$String$length(text);
};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$tableMatch = F2(
	function (query, table) {
		return _Utils_eq(table.cW, query) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				10,
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundTable(table))) : (A2($elm$core$String$startsWith, query, table.cW) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				9 + $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$shortBonus(table.cW),
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundTable(table))) : (A2($elm$core$String$contains, query, table.cW) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				8 + $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$shortBonus(table.cW),
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundTable(table))) : ((A2(
			$author$project$Libs$Maybe$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.dh;
				},
				$elm$core$String$contains(query)),
			table.cz) || (A2(
			$author$project$Libs$Maybe$any,
			A2(
				$elm$core$Basics$composeR,
				function ($) {
					return $.cW;
				},
				$elm$core$String$contains(query)),
			table.aT) || (A2(
			$elm$core$List$any,
			function (u) {
				return A2($elm$core$String$contains, query, u.cW) || A2($elm$core$String$contains, query, u.aH);
			},
			table.bw) || (A2(
			$elm$core$List$any,
			function (i) {
				return A2($elm$core$String$contains, query, i.cW) || A2($elm$core$String$contains, query, i.aH);
			},
			table.ba) || A2(
			$elm$core$List$any,
			function (c) {
				return A2($elm$core$String$contains, query, c.cW) || A2($elm$core$String$contains, query, c.em);
			},
			table.a$))))) ? $elm$core$Maybe$Just(
			_Utils_Tuple2(
				7 + $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$shortBonus(table.cW),
				$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$FoundTable(table))) : $elm$core$Maybe$Nothing)));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$performSearch = F3(
	function (tables, relations, query) {
		var tableResults = A2(
			$elm$core$List$filterMap,
			$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$tableMatch(query),
			$elm$core$Dict$values(tables));
		var maxResults = 30;
		var columnResults = (_Utils_cmp(
			$elm$core$List$length(tableResults),
			maxResults) < 0) ? A2(
			$elm$core$List$concatMap,
			function (table) {
				return A2(
					$author$project$Libs$Nel$filterMap,
					A2($author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$columnMatch, query, table),
					$author$project$Libs$Ned$values(table.W));
			},
			$elm$core$Dict$values(tables)) : _List_Nil;
		var relationResults = (_Utils_cmp(
			$elm$core$List$length(tableResults) + $elm$core$List$length(columnResults),
			maxResults) < 0) ? A2(
			$elm$core$List$filterMap,
			$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$relationMatch(query),
			relations) : _List_Nil;
		return A2(
			$elm$core$List$map,
			$elm$core$Tuple$second,
			A2(
				$elm$core$List$take,
				maxResults,
				A2(
					$elm$core$List$sortBy,
					function (_v0) {
						var r = _v0.a;
						return -r;
					},
					_Utils_ap(
						tableResults,
						_Utils_ap(columnResults, relationResults)))));
	});
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $author$project$Libs$List$hasNot = F2(
	function (item, xs) {
		return !A2($author$project$Libs$List$has, item, xs);
	});
var $author$project$Components$Molecules$ContextMenu$itemActiveStyles = $author$project$Libs$Tailwind$batch(
	_List_fromArray(
		[
			'py-2 px-4 text-sm bg-primary-600 text-white',
			$author$project$Libs$Tailwind$hover(
			_List_fromArray(
				['bg-primary-700 text-primary-50']))
		]));
var $author$project$Components$Molecules$ContextMenu$itemDisabledActiveStyles = $author$project$Libs$Tailwind$batch(
	_List_fromArray(
		[
			'py-2 px-4 text-sm text-primary-400',
			$author$project$Libs$Tailwind$hover(
			_List_fromArray(
				['bg-primary-50']))
		]));
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$viewSearchResult = F5(
	function (searchId, shownTables, active, index, res) {
		var viewItem = F4(
			function (msg, icon, content, disabled) {
				var commonStyles = 'flex w-full items-center';
				var commonAttrs = _Utils_ap(
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$role('menuitem'),
							$elm$html$Html$Attributes$tabindex(-1)
						]),
					A3(
						$author$project$Libs$Bool$cond,
						_Utils_eq(active, index),
						_List_fromArray(
							[
								$elm$html$Html$Attributes$id(searchId + '-active-item')
							]),
						_List_Nil));
				return disabled ? A2(
					$elm$html$Html$span,
					_Utils_ap(
						commonAttrs,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										commonStyles,
										A3(
										$author$project$Libs$Bool$cond,
										_Utils_eq(active, index),
										$author$project$Components$Molecules$ContextMenu$itemDisabledActiveStyles,
										$author$project$Components$Molecules$ContextMenu$itemDisabledStyles)
									]))
							])),
					_Utils_ap(
						_List_fromArray(
							[
								A2($author$project$Components$Atoms$Icon$solid, icon, 'mr-3')
							]),
						content)) : A2(
					$elm$html$Html$button,
					_Utils_ap(
						commonAttrs,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('button'),
								$elm$html$Html$Events$onMouseDown(msg),
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										commonStyles,
										$author$project$Libs$Tailwind$focus(
										_List_fromArray(
											['outline-none'])),
										A3(
										$author$project$Libs$Bool$cond,
										_Utils_eq(active, index),
										$author$project$Components$Molecules$ContextMenu$itemActiveStyles,
										$author$project$Components$Molecules$ContextMenu$itemStyles)
									]))
							])),
					_Utils_ap(
						_List_fromArray(
							[
								A2($author$project$Components$Atoms$Icon$solid, icon, 'mr-3')
							]),
						content));
			});
		switch (res.$) {
			case 0:
				var table = res.a;
				return A4(
					viewItem,
					A2($author$project$PagesComponents$Projects$Id_$Models$ShowTable, table.t, $elm$core$Maybe$Nothing),
					199,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Models$Project$TableId$show(table.t))
						]),
					A2($author$project$Libs$List$has, table.t, shownTables));
			case 1:
				var table = res.a;
				var column = res.b;
				return A4(
					viewItem,
					A2($author$project$PagesComponents$Projects$Id_$Models$ShowTable, table.t, $elm$core$Maybe$Nothing),
					200,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('opacity-50')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(
									$author$project$Models$Project$TableId$show(table.t) + '.')
								])),
							$elm$html$Html$text(column.cW)
						]),
					A2($author$project$Libs$List$has, table.t, shownTables));
			default:
				var relation = res.a;
				return A2($author$project$Libs$List$hasNot, relation.de.G, shownTables) ? A4(
					viewItem,
					A2($author$project$PagesComponents$Projects$Id_$Models$ShowTable, relation.de.G, $elm$core$Maybe$Nothing),
					97,
					_List_fromArray(
						[
							$elm$html$Html$text(relation.cW)
						]),
					false) : (A2($author$project$Libs$List$hasNot, relation.fW.G, shownTables) ? A4(
					viewItem,
					A2($author$project$PagesComponents$Projects$Id_$Models$ShowTable, relation.fW.G, $elm$core$Maybe$Nothing),
					97,
					_List_fromArray(
						[
							$elm$html$Html$text(relation.cW)
						]),
					false) : A4(
					viewItem,
					A2($author$project$PagesComponents$Projects$Id_$Models$ShowTable, relation.de.G, $elm$core$Maybe$Nothing),
					97,
					_List_fromArray(
						[
							$elm$html$Html$text(relation.cW)
						]),
					true));
		}
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$viewNavbarSearch = F6(
	function (search, tables, relations, shownTables, htmlId, openedDropdown) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('ml-6 print:hidden')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'max-w-lg w-full',
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['max-w-xs']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$label,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$for(htmlId),
									$elm$html$Html$Attributes$class('sr-only')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Search')
								])),
							A3(
							$author$project$Components$Molecules$Dropdown$dropdown,
							{
								ao: 0,
								t: htmlId,
								ar: _Utils_eq(openedDropdown, htmlId)
							},
							function (m) {
								return A2(
									$elm$html$Html$div,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('pointer-events-none absolute inset-y-0 left-0 pl-3 flex items-center')
												]),
											_List_fromArray(
												[
													A2($author$project$Components$Atoms$Icon$solid, 178, 'text-primary-200')
												])),
											A2(
											$elm$html$Html$input,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$type_('search'),
													$elm$html$Html$Attributes$name('search'),
													$elm$html$Html$Attributes$id(m.t),
													$elm$html$Html$Attributes$placeholder('Search'),
													$elm$html$Html$Attributes$autocomplete(false),
													$elm$html$Html$Attributes$value(search.dh),
													$elm$html$Html$Events$onInput($author$project$PagesComponents$Projects$Id_$Models$SearchUpdated),
													$elm$html$Html$Events$onFocus(
													$author$project$PagesComponents$Projects$Id_$Models$DropdownToggle(m.t)),
													$elm$html$Html$Events$onBlur(
													$author$project$PagesComponents$Projects$Id_$Models$DropdownToggle(m.t)),
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														[
															'block w-full pl-10 pr-3 py-2 border border-transparent rounded-md leading-5 bg-primary-500 text-primary-100 placeholder-primary-200',
															$author$project$Libs$Tailwind$focus(
															_List_fromArray(
																['outline-none bg-white border-white ring-white text-primary-900 placeholder-primary-400'])),
															$author$project$Libs$Tailwind$sm(
															_List_fromArray(
																['text-sm']))
														]))
												]),
											_List_Nil),
											A3(
											$author$project$Libs$Maybe$mapOrElse,
											function (h) {
												return A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('absolute inset-y-0 right-0 flex py-1.5 pr-1.5')
														]),
													_List_fromArray(
														[
															A2(
															$elm$html$Html$kbd,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$class('inline-flex items-center border border-primary-300 rounded px-2 text-sm font-sans font-medium text-primary-300')
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text(h.bU)
																]))
														]));
											},
											A2($elm$html$Html$div, _List_Nil, _List_Nil),
											A2(
												$elm$core$Maybe$andThen,
												$elm$core$List$head,
												A2($elm$core$Dict$get, 'search-open', $author$project$Conf$hotkeys)))
										]));
							},
							function (m) {
								return (search.dh === '') ? A2(
									$elm$html$Html$div,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$elm$html$Html$span,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$role('menuitem'),
													$elm$html$Html$Attributes$tabindex(-1),
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														['flex w-full items-center', $author$project$Components$Molecules$ContextMenu$itemDisabledStyles]))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Type to search into tables ('),
													A2($author$project$Components$Atoms$Icon$solid, 199, ''),
													$elm$html$Html$text('), columns ('),
													A2($author$project$Components$Atoms$Icon$solid, 200, ''),
													$elm$html$Html$text(') and relations ('),
													A2($author$project$Components$Atoms$Icon$solid, 97, ''),
													$elm$html$Html$text(')')
												]))
										])) : function (results) {
									return $elm$core$List$isEmpty(results) ? A2(
										$elm$html$Html$div,
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$author$project$Libs$Html$Attributes$role('menuitem'),
														$elm$html$Html$Attributes$tabindex(-1),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															['flex w-full items-center', $author$project$Components$Molecules$ContextMenu$itemDisabledStyles]))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('No result :(')
													]))
											])) : A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('max-h-192 overflow-y-auto')
											]),
										A2(
											$elm$core$List$indexedMap,
											A3(
												$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$viewSearchResult,
												m.t,
												shownTables,
												A2(
													$elm$core$Basics$modBy,
													$elm$core$List$length(results),
													search.al)),
											results));
								}(
									A3($author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$performSearch, tables, relations, search.dh));
							})
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarSettings = A2(
	$author$project$Components$Molecules$Tooltip$b,
	'Settings',
	A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$type_('button'),
				$elm$html$Html$Events$onClick(
				$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSOpen)),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'mx-1 flex-shrink-0 bg-primary-600 p-1 rounded-full text-primary-200',
						$author$project$Libs$Tailwind$hover(
						_List_fromArray(
							['text-white animate-spin'])),
						$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('sr-only')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Settings')
					])),
				A2($author$project$Components$Atoms$Icon$outline, 62, '')
			])));
var $author$project$PagesComponents$Projects$Id_$Models$SOpen = {$: 0};
var $author$project$Components$Atoms$Icon$Share = 182;
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarShare = A2(
	$author$project$Components$Molecules$Tooltip$b,
	'Share diagram',
	A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$type_('button'),
				$elm$html$Html$Events$onClick(
				$author$project$PagesComponents$Projects$Id_$Models$SharingMsg($author$project$PagesComponents$Projects$Id_$Models$SOpen)),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'mx-1 flex-shrink-0 bg-primary-600 p-1 rounded-full text-primary-200',
						$author$project$Libs$Tailwind$hover(
						_List_fromArray(
							['text-white animate-pulse'])),
						$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('sr-only')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Share')
					])),
				A2($author$project$Components$Atoms$Icon$outline, 182, '')
			])));
var $author$project$Components$Atoms$Icon$slash = function (styles) {
	return A2(
		$author$project$Components$Atoms$Icon$viewSolid,
		_List_fromArray(
			['M5.555 17.776l8-16 .894.448-8 16-.894-.448z']),
		'h-5 w-5 ' + styles);
};
var $author$project$Components$Atoms$Icon$ChevronDown = 48;
var $author$project$PagesComponents$Projects$Id_$Models$LUnload = {$: 5};
var $author$project$PagesComponents$Projects$Id_$Models$LUpdate = function (a) {
	return {$: 6, a: a};
};
var $author$project$Libs$List$prependOn = F3(
	function (maybe, transform, list) {
		if (!maybe.$) {
			var b = maybe.a;
			return A2(
				$elm$core$List$cons,
				transform(b),
				list);
		} else {
			return list;
		}
	});
var $author$project$PagesComponents$Projects$Id_$Models$LLoad = function (a) {
	return {$: 4, a: a};
};
var $author$project$Components$Atoms$Icon$Pencil = 151;
var $author$project$Components$Atoms$Icon$Trash = 207;
var $author$project$PagesComponents$Projects$Id_$Models$LDelete = function (a) {
	return {$: 7, a: a};
};
var $elm$html$Html$br = _VirtualDom_node('br');
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$confirmDeleteLayout = F2(
	function (layout, name) {
		return $author$project$PagesComponents$Projects$Id_$Models$ConfirmOpen(
			{
				aZ: 'Cancel',
				n: $author$project$Libs$Tailwind$red,
				a1: 'Delete ' + (name + ' layout'),
				D: 207,
				bg: A2(
					$elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Are you sure you want to delete '),
							$author$project$Libs$Html$bText(name),
							$elm$html$Html$text(' layout?'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$elm$html$Html$text(
							'It contains ' + (A2($author$project$Libs$String$pluralizeL, 'table', layout.jr) + '.'))
						])),
				bk: $author$project$Libs$Task$send(
					$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg(
						$author$project$PagesComponents$Projects$Id_$Models$LDelete(name))),
				aj: 'Delete layout'
			});
	});
var $elm$html$Html$small = _VirtualDom_node('small');
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewLayoutItem = F2(
	function (name, layout) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$role('menuitem'),
					$elm$html$Html$Attributes$tabindex(-1),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['flex', $author$project$Components$Molecules$ContextMenu$itemStyles]))
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					'Delete this layout',
					A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('button'),
								$elm$html$Html$Events$onClick(
								A2($author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$confirmDeleteLayout, layout, name)),
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										$author$project$Libs$Tailwind$focus(
										_List_fromArray(
											['outline-none']))
									]))
							]),
						_List_fromArray(
							[
								A2($author$project$Components$Atoms$Icon$solid, 207, 'inline-block')
							]))),
					A2(
					$author$project$Components$Molecules$Tooltip$t,
					'Update layout with current one',
					A2(
						$elm$html$Html$button,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$type_('button'),
								$elm$html$Html$Events$onClick(
								$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg(
									$author$project$PagesComponents$Projects$Id_$Models$LUpdate(name))),
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mx-2',
										$author$project$Libs$Tailwind$focus(
										_List_fromArray(
											['outline-none']))
									]))
							]),
						_List_fromArray(
							[
								A2($author$project$Components$Atoms$Icon$solid, 151, 'inline-block')
							]))),
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Events$onClick(
							$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg(
								$author$project$PagesComponents$Projects$Id_$Models$LLoad(name))),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'flex-grow text-left',
									$author$project$Libs$Tailwind$focus(
									_List_fromArray(
										['outline-none']))
								]))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(name),
							$elm$html$Html$text(' '),
							A2(
							$elm$html$Html$small,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(
									'(' + (A2($author$project$Libs$String$pluralizeL, 'table', layout.jr) + ')'))
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewLayouts = F4(
	function (usedLayout, layouts, htmlId, openedDropdown) {
		return A3(
			$author$project$Components$Molecules$Dropdown$dropdown,
			{
				ao: 1,
				t: htmlId,
				ar: _Utils_eq(openedDropdown, htmlId)
			},
			function (m) {
				return A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Attributes$id(m.t),
							$elm$html$Html$Events$onClick(
							$author$project$PagesComponents$Projects$Id_$Models$DropdownToggle(m.t)),
							$author$project$Libs$Html$Attributes$ariaExpanded(false),
							$author$project$Libs$Html$Attributes$ariaHaspopup(true),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'flex justify-center items-center p-1 rounded-full',
									$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(
									A3(
										$author$project$Libs$Maybe$mapOrElse,
										function (l) {
											return l;
										},
										'layouts',
										usedLayout))
								])),
							A2(
							$author$project$Components$Atoms$Icon$solid,
							48,
							'transform transition ' + A3($author$project$Libs$Bool$cond, m.ar, '-rotate-180', ''))
						]));
			},
			function (_v0) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('min-w-max divide-y divide-gray-100')
						]),
					A3(
						$author$project$Libs$List$prependOn,
						usedLayout,
						function (l) {
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$role('none'),
										$elm$html$Html$Attributes$class('py-1')
									]),
								_List_fromArray(
									[
										A3(
										$author$project$Components$Molecules$ContextMenu$btn,
										'',
										$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg(
											$author$project$PagesComponents$Projects$Id_$Models$LUpdate(l)),
										_List_fromArray(
											[
												$elm$html$Html$text('Update '),
												$author$project$Libs$Html$bText(l),
												$elm$html$Html$text(' with current layout')
											])),
										A3(
										$author$project$Components$Molecules$ContextMenu$btn,
										'',
										$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg($author$project$PagesComponents$Projects$Id_$Models$LUnload),
										_List_fromArray(
											[
												$elm$html$Html$text('Stop using '),
												$author$project$Libs$Html$bText(l),
												$elm$html$Html$text(' layout')
											]))
									]));
						},
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$role('none'),
										$elm$html$Html$Attributes$class('py-1')
									]),
								_List_fromArray(
									[
										A3(
										$author$project$Components$Molecules$ContextMenu$btn,
										'',
										$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg($author$project$PagesComponents$Projects$Id_$Models$LOpen),
										_List_fromArray(
											[
												$elm$html$Html$text('Create new layout')
											]))
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$role('none'),
										$elm$html$Html$Attributes$class('py-1')
									]),
								A2(
									$elm$core$List$map,
									function (_v2) {
										var name = _v2.a;
										var layout = _v2.b;
										return A2($author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewLayoutItem, name, layout);
									},
									A2(
										$elm$core$List$sortBy,
										function (_v1) {
											var name = _v1.a;
											return name;
										},
										$elm$core$Dict$toList(layouts))))
							])));
			});
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewLayoutsMaybe = F5(
	function (conf, usedLayout, layouts, htmlId, openedDropdown) {
		return $elm$core$Dict$isEmpty(layouts) ? _List_Nil : (conf.eq ? _List_fromArray(
			[
				$author$project$Components$Atoms$Icon$slash('text-primary-300'),
				A5($elm$html$Html$Lazy$lazy4, $author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewLayouts, usedLayout, layouts, htmlId, openedDropdown)
			]) : A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (l) {
				return _List_fromArray(
					[
						$author$project$Components$Atoms$Icon$slash('text-primary-300'),
						$elm$html$Html$text(l)
					]);
			},
			_List_Nil,
			usedLayout));
	});
var $author$project$PagesComponents$Projects$Id_$Models$RenameProject = function (a) {
	return {$: 3, a: a};
};
var $author$project$Components$Molecules$ContextMenu$link = function (l) {
	return A2(
		$elm$html$Html$a,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$href(l.jH),
				$author$project$Libs$Html$Attributes$role('menuitem'),
				$elm$html$Html$Attributes$tabindex(-1),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['block', $author$project$Components$Molecules$ContextMenu$itemStyles]))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(l.dh)
			]));
};
var $author$project$PagesComponents$Projects$Id_$Models$PromptOpen = F2(
	function (a, b) {
		return {$: 51, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Id_$Models$prompt = F4(
	function (title, content, input, message) {
		return A2(
			$author$project$PagesComponents$Projects$Id_$Models$PromptOpen,
			{
				aZ: 'Cancel',
				n: $author$project$Libs$Tailwind$blue,
				a1: 'Ok',
				D: 167,
				bg: content,
				bk: A2($elm$core$Basics$composeR, message, $author$project$Libs$Task$send),
				aj: title
			},
			input);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewProjectsDropdown = F4(
	function (otherProjects, project, htmlId, openedDropdown) {
		return A3(
			$author$project$Components$Molecules$Dropdown$dropdown,
			{
				ao: 0,
				t: htmlId,
				ar: _Utils_eq(openedDropdown, htmlId)
			},
			function (m) {
				return A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Attributes$id(m.t),
							$elm$html$Html$Events$onClick(
							$author$project$PagesComponents$Projects$Id_$Models$DropdownToggle(m.t)),
							$author$project$Libs$Html$Attributes$ariaExpanded(false),
							$author$project$Libs$Html$Attributes$ariaHaspopup(true),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'flex justify-center items-center p-1 rounded-full',
									$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(project.cW)
								])),
							A2(
							$author$project$Components$Atoms$Icon$solid,
							48,
							'transform transition ' + A3($author$project$Libs$Bool$cond, m.ar, '-rotate-180', ''))
						]));
			},
			function (_v0) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('divide-y divide-gray-100')
						]),
					A2(
						$elm$core$List$map,
						function (section) {
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$role('none'),
										$elm$html$Html$Attributes$class('py-1')
									]),
								section);
						},
						A2(
							$author$project$Libs$List$filterNot,
							$elm$core$List$isEmpty,
							_Utils_ap(
								_List_fromArray(
									[
										_List_fromArray(
										[
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											$author$project$PagesComponents$Projects$Id_$Models$SaveProject,
											_List_fromArray(
												[
													$elm$html$Html$text('Save project')
												])),
											A3(
											$author$project$Components$Molecules$ContextMenu$btn,
											'',
											A4(
												$author$project$PagesComponents$Projects$Id_$Models$prompt,
												'Rename project',
												$elm$html$Html$text(''),
												project.cW,
												$author$project$PagesComponents$Projects$Id_$Models$RenameProject),
											_List_fromArray(
												[
													$elm$html$Html$text('Rename project')
												]))
										])
									]),
								_Utils_ap(
									A3(
										$author$project$Libs$Bool$cond,
										$elm$core$List$isEmpty(otherProjects),
										_List_Nil,
										_List_fromArray(
											[
												A2(
												$elm$core$List$map,
												function (p) {
													return $author$project$Components$Molecules$ContextMenu$link(
														{
															dh: p.cW,
															jH: $author$project$Gen$Route$toHref(
																$author$project$Gen$Route$Projects__Id_(
																	{t: p.t}))
														});
												},
												otherProjects)
											])),
									_List_fromArray(
										[
											_List_fromArray(
											[
												$author$project$Components$Molecules$ContextMenu$link(
												{
													dh: 'Back to dashboard',
													jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
												})
											])
										]))))));
			});
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewNavbarTitle = F7(
	function (conf, otherProjects, project, usedLayout, layouts, htmlId, openedDropdown) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('flex justify-center items-center text-white')
				]),
			_Utils_ap(
				_List_fromArray(
					[
						conf.eq ? A5(
						$elm$html$Html$Lazy$lazy4,
						$author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewProjectsDropdown,
						otherProjects,
						project,
						htmlId + '-projects',
						A2($author$project$Libs$String$filterStartsWith, htmlId + '-projects', openedDropdown)) : A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(project.cW)
							]))
					]),
				A5(
					$author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewLayoutsMaybe,
					conf,
					usedLayout,
					layouts,
					htmlId + '-layouts',
					A2($author$project$Libs$String$filterStartsWith, htmlId + '-layouts', openedDropdown))));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbar = F6(
	function (conf, virtualRelation, erd, model, htmlId, openedDropdown) {
		var features = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$core$Maybe$Just(
					{
						aY: $toastal$either$Either$Right($author$project$PagesComponents$Projects$Id_$Models$HideAllTables),
						bI: $elm$html$Html$text('Hide all tables'),
						cL: $elm$core$Maybe$Nothing
					}),
					$elm$core$Maybe$Just(
					{
						aY: $toastal$either$Either$Right($author$project$PagesComponents$Projects$Id_$Models$ShowAllTables),
						bI: $elm$html$Html$text('Show all tables'),
						cL: $elm$core$Maybe$Nothing
					}),
					A2(
					$author$project$Libs$Maybe$when,
					conf.eq,
					{
						aY: $toastal$either$Either$Right(
							$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg($author$project$PagesComponents$Projects$Id_$Models$LOpen)),
						bI: $elm$html$Html$text('Save current layout'),
						cL: A2(
							$elm$core$Maybe$andThen,
							$elm$core$List$head,
							A2($elm$core$Dict$get, 'save-layout', $author$project$Conf$hotkeys))
					}),
					$elm$core$Maybe$Just(
					A2(
						$elm$core$Maybe$withDefault,
						{
							aY: $toastal$either$Either$Right(
								$author$project$PagesComponents$Projects$Id_$Models$VirtualRelationMsg($author$project$PagesComponents$Projects$Id_$Models$VRCreate)),
							bI: $elm$html$Html$text('Create a virtual relation'),
							cL: A2(
								$elm$core$Maybe$andThen,
								$elm$core$List$head,
								A2($elm$core$Dict$get, 'create-virtual-relation', $author$project$Conf$hotkeys))
						},
						A2(
							$elm$core$Maybe$map,
							function (_v0) {
								return {
									aY: $toastal$either$Either$Right(
										$author$project$PagesComponents$Projects$Id_$Models$VirtualRelationMsg($author$project$PagesComponents$Projects$Id_$Models$VRCancel)),
									bI: $elm$html$Html$text('Cancel virtual relation'),
									cL: A2(
										$elm$core$Maybe$andThen,
										$elm$core$List$head,
										A2($elm$core$Dict$get, 'create-virtual-relation', $author$project$Conf$hotkeys))
								};
							},
							virtualRelation))),
					A2(
					$author$project$Libs$Maybe$when,
					conf.bM,
					{
						aY: $toastal$either$Either$Right(
							$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
								A2($author$project$PagesComponents$Projects$Id_$Models$FPOpen, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing))),
						bI: $elm$html$Html$text('Find path between tables'),
						cL: A2(
							$elm$core$Maybe$andThen,
							$elm$core$List$head,
							A2($elm$core$Dict$get, 'find-path', $author$project$Conf$hotkeys))
					}),
					$elm$core$Maybe$Just(
					{
						aY: $toastal$either$Either$Right(
							$author$project$PagesComponents$Projects$Id_$Models$SchemaAnalysisMsg($author$project$PagesComponents$Projects$Id_$Models$SAOpen)),
						bI: $elm$html$Html$text('Analyze your schema'),
						cL: $elm$core$Maybe$Nothing
					}),
					$elm$core$Maybe$Just(
					{
						aY: $toastal$either$Either$Left($author$project$Conf$constants.gA),
						bI: $elm$html$Html$text('Suggest a feature 🚀'),
						cL: $elm$core$Maybe$Nothing
					})
				]));
		var canResetCanvas = (!_Utils_eq(erd.dt, $author$project$Models$Project$CanvasProps$zero)) || ($author$project$Libs$Dict$nonEmpty(erd.bu) || (!_Utils_eq(erd.eO, $elm$core$Maybe$Nothing)));
		return A2(
			$elm$html$Html$nav,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['az-navbar relative z-max bg-primary-600']))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'mx-auto px-2',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['px-4'])),
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['px-8']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('relative flex items-center justify-between h-16')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'flex items-center px-2',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['px-0']))
												]))
										]),
									_List_fromArray(
										[
											$author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarBrand(conf),
											A7(
											$elm$html$Html$Lazy$lazy6,
											$author$project$PagesComponents$Projects$Id_$Views$Navbar$Search$viewNavbarSearch,
											model.er,
											erd.jr,
											erd.iU,
											erd.ca,
											htmlId + '-search',
											A2($author$project$Libs$String$filterStartsWith, htmlId + '-search', openedDropdown)),
											$author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarHelp
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('flex-1 flex justify-center px-2')
										]),
									_List_fromArray(
										[
											A8(
											$elm$html$Html$Lazy$lazy7,
											$author$project$PagesComponents$Projects$Id_$Views$Navbar$Title$viewNavbarTitle,
											conf,
											erd.fJ,
											erd.bm,
											erd.eO,
											erd.d_,
											htmlId + '-title',
											A2($author$project$Libs$String$filterStartsWith, htmlId + '-title', openedDropdown))
										])),
									$author$project$PagesComponents$Projects$Id_$Views$Navbar$navbarMobileButton(model.bi),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'hidden',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['block ml-4']))
												]))
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('flex items-center print:hidden')
												]),
											_List_fromArray(
												[
													$author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarResetLayout(canResetCanvas),
													A3(
													$author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarFeatures,
													features,
													htmlId + '-features',
													A2($author$project$Libs$String$filterStartsWith, htmlId + '-features', openedDropdown)),
													A3($author$project$Libs$Bool$cond, conf.eq, $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarShare, $author$project$Libs$Html$none),
													$author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarSettings
												]))
										]))
								]))
						])),
					A4($elm$html$Html$Lazy$lazy3, $author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbarMobileMenu, features, canResetCanvas, model.bi)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Watermark$viewWatermark = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('az-commands absolute bottom-0 left-0 m-3')
		]),
	_List_fromArray(
		[
			A3(
			$author$project$Libs$Html$extLink,
			$author$project$Conf$constants.gE,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('flex justify-start items-center flex-shrink-0 grayscale opacity-50 hover:opacity-100')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('block h-8 h-8'),
							$elm$html$Html$Attributes$src('/logo.png'),
							$elm$html$Html$Attributes$alt('Azimutt'),
							$elm$html$Html$Attributes$width(32),
							$elm$html$Html$Attributes$height(32)
						]),
					_List_Nil),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['ml-3 text-2xl text-gray-500 font-medium']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Azimutt')
						]))
				]))
		]));
var $author$project$PagesComponents$Projects$Id_$Views$viewApp = F3(
	function (model, htmlId, erd) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('az-app h-full')
				]),
			_List_fromArray(
				[
					model.B.jh ? A7(
					$elm$html$Html$Lazy$lazy6,
					$author$project$PagesComponents$Projects$Id_$Views$Navbar$viewNavbar,
					model.B,
					model.jI,
					erd,
					model.h8,
					htmlId + '-nav',
					A2($author$project$Libs$String$filterStartsWith, htmlId + '-nav', model.aR)) : A2($elm$html$Html$div, _List_Nil, _List_Nil),
					A9(
					$elm$html$Html$Lazy$lazy8,
					$author$project$PagesComponents$Projects$Id_$Views$Erd$viewErd,
					model.B,
					model.i6,
					erd,
					model.g_,
					model.i9,
					model.jI,
					A2($author$project$PagesComponents$Projects$Id_$Views$Erd$argsToString, model.aR, model.c_),
					model.cF),
					((!$elm$core$Dict$isEmpty(erd.bu)) && (model.B.dM || model.B.fC)) ? A6(
					$elm$html$Html$Lazy$lazy5,
					$author$project$PagesComponents$Projects$Id_$Views$Commands$viewCommands,
					model.B,
					model.g_,
					erd.dt.dm,
					htmlId + '-commands',
					A2($author$project$Libs$String$filterStartsWith, htmlId + '-commands', model.aR)) : A2($elm$html$Html$div, _List_Nil, _List_Nil),
					(!model.B.jh) ? $author$project$PagesComponents$Projects$Id_$Views$Watermark$viewWatermark : A2($elm$html$Html$div, _List_Nil, _List_Nil)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$viewContextMenu = function (menu) {
	return A3(
		$author$project$Libs$Maybe$mapOrElse,
		function (m) {
			return A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('az-context-menu absolute'),
						A2(
						$elm$html$Html$Attributes$style,
						'left',
						$elm$core$String$fromFloat(m.iG.at) + 'px'),
						A2(
						$elm$html$Html$Attributes$style,
						'top',
						$elm$core$String$fromFloat(m.iG.aD) + 'px')
					]),
				_List_fromArray(
					[
						A5($author$project$Components$Molecules$ContextMenu$menu, '', 0, 0, m.jf, m.bI)
					]));
		},
		A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('az-context-menu')
				]),
			_List_Nil),
		menu);
};
var $elm$html$Html$Attributes$autofocus = $elm$html$Html$Attributes$boolProperty('autofocus');
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $author$project$Libs$Html$Attributes$ariaModal = function (value) {
	return A2(
		$elm$html$Html$Attributes$attribute,
		'aria-modal',
		$author$project$Libs$Bool$toString(value));
};
var $author$project$Components$Molecules$Modal$modal = F2(
	function (model, content) {
		var modalPanel = model.ar ? $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'transition-all ease-in duration-200 opacity-100 translate-y-0',
					$author$project$Libs$Tailwind$sm(
					_List_fromArray(
						['scale-100']))
				])) : $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'transition-all ease-out duration-300 opacity-0 translate-y-4',
					$author$project$Libs$Tailwind$sm(
					_List_fromArray(
						['translate-y-0 scale-95']))
				]));
		var backgroundOverlay = model.ar ? 'transition-opacity ease-in duration-200 opacity-100' : 'transition-opacity ease-out duration-300 opacity-0';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$ariaLabelledby(model.cm),
					$author$project$Libs$Html$Attributes$role('dialog'),
					$author$project$Libs$Html$Attributes$ariaModal(true),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'fixed z-max inset-0 overflow-y-auto',
							A3($author$project$Libs$Bool$cond, model.ar, '', 'pointer-events-none')
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['block p-0']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$ariaHidden(true),
									$elm$html$Html$Events$onClick(model.b_),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['fixed inset-0 bg-gray-500 bg-opacity-75', backgroundOverlay]))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'hidden',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['inline-block align-middle h-screen']))
										])),
									$author$project$Libs$Html$Attributes$ariaHidden(true)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('\u200B')
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(model.t),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'inline-block align-middle bg-white rounded-lg text-left overflow-hidden shadow-xl transform',
											modalPanel,
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['my-8 max-w-max w-full']))
										]))
								]),
							content)
						]))
				]));
	});
var $author$project$Libs$Tailwind$text_600 = function (_v0) {
	var color = _v0;
	return 'text-' + (color + '-600');
};
var $author$project$Libs$Tailwind$text_300 = function (_v0) {
	var color = _v0;
	return 'text-' + (color + '-300');
};
var $author$project$Libs$Tailwind$text_700 = function (_v0) {
	var color = _v0;
	return 'text-' + (color + '-700');
};
var $author$project$Components$Atoms$Button$white = function (color) {
	return $author$project$Libs$Tailwind$batch(
		_List_fromArray(
			[
				'border-gray-300 shadow-sm bg-white',
				$author$project$Libs$Tailwind$text_700(color),
				$author$project$Libs$Tailwind$hover(
				_List_fromArray(
					[
						$author$project$Libs$Tailwind$bg_50(color)
					])),
				$author$project$Libs$Tailwind$disabled(
				_List_fromArray(
					[
						'cursor-not-allowed border-gray-200 bg-white',
						$author$project$Libs$Tailwind$text_300(color)
					]))
			]));
};
var $author$project$Components$Atoms$Button$white3 = A2($author$project$Components$Atoms$Button$build, $author$project$Components$Atoms$Button$white, $author$project$Components$Atoms$Button$size3);
var $author$project$Components$Molecules$Modal$confirm = F2(
	function (model, isOpen) {
		var titleId = model.t + '-title';
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{t: model.t, ar: isOpen, b_: model.aw, cm: titleId},
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 pt-6',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['flex items-start']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full',
											$author$project$Libs$Tailwind$bg_100(model.n),
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mx-0 h-10 w-10']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$author$project$Components$Atoms$Icon$outline,
									model.D,
									$author$project$Libs$Tailwind$text_600(model.n))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-3 text-center',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mt-0 ml-4 text-left']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('text-lg leading-6 font-medium text-gray-900'),
											$elm$html$Html$Attributes$id(titleId)
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(model.aj)
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('mt-2')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$p,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('text-sm text-gray-500')
												]),
											_List_fromArray(
												[model.bg]))
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 py-3 mt-6 bg-gray-50',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['flex items-center flex-row-reverse']))
								]))
						]),
					_List_fromArray(
						[
							A3(
							$author$project$Components$Atoms$Button$primary3,
							model.n,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(model.bk),
									$elm$html$Html$Attributes$autofocus(true),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'w-full text-base',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['ml-3 w-auto text-sm']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(model.a1)
								])),
							A3(
							$author$project$Components$Atoms$Button$white3,
							$author$project$Libs$Tailwind$gray,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(model.aw),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-3 w-full text-base',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mt-0 w-auto text-sm']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(model.aZ)
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Confirm$viewConfirm = F2(
	function (opened, model) {
		return A2(
			$author$project$Components$Molecules$Modal$confirm,
			{
				aZ: model.bI.aZ,
				n: model.bI.n,
				a1: model.bI.a1,
				D: model.bI.D,
				t: model.t,
				bg: model.bI.bg,
				aw: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					A2($author$project$PagesComponents$Projects$Id_$Models$ConfirmAnswer, false, $elm$core$Platform$Cmd$none)),
				bk: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					A2($author$project$PagesComponents$Projects$Id_$Models$ConfirmAnswer, true, model.bI.bk)),
				aj: model.bI.aj
			},
			opened);
	});
var $author$project$PagesComponents$Projects$Id_$Models$LCreate = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$LEdit = function (a) {
	return {$: 1, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$CreateLayout$viewCreateLayout = F2(
	function (opened, model) {
		var titleId = model.t + '-title';
		var inputId = model.t + '-input';
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{
				t: model.t,
				ar: opened,
				b_: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg($author$project$PagesComponents$Projects$Id_$Models$LCancel)),
				cm: titleId
			},
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 pt-6',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['flex items-start']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-primary-100',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mx-0 h-10 w-10']))
										]))
								]),
							_List_fromArray(
								[
									A2($author$project$Components$Atoms$Icon$outline, 201, 'text-primary-600')
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-3 text-center',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mt-0 ml-4 text-left']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$id(titleId),
											$elm$html$Html$Attributes$class('text-lg leading-6 font-medium text-gray-900')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Save your layout')
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('mt-2')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$label,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$for(inputId),
													$elm$html$Html$Attributes$class('block text-sm font-medium text-gray-700')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Layout name')
												])),
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('mt-1')
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$input,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$type_('text'),
															$elm$html$Html$Attributes$name('layout-name'),
															$elm$html$Html$Attributes$id(inputId),
															$elm$html$Html$Attributes$value(model.cW),
															$elm$html$Html$Events$onInput(
															A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$LEdit, $author$project$PagesComponents$Projects$Id_$Models$LayoutMsg)),
															$elm$html$Html$Attributes$autofocus(true),
															$author$project$Libs$Html$Attributes$css(
															_List_fromArray(
																[
																	'shadow-sm block w-full border-gray-300 rounded-md',
																	$author$project$Libs$Tailwind$focus(
																	_List_fromArray(
																		['ring-indigo-500 border-indigo-500'])),
																	$author$project$Libs$Tailwind$sm(
																	_List_fromArray(
																		['text-sm']))
																]))
														]),
													_List_Nil)
												])),
											A2(
											$elm$html$Html$p,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('mt-1 text-sm text-gray-500')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Do you like Azimutt ? Consider '),
													A3(
													$author$project$Libs$Html$sendTweet,
													$author$project$Conf$constants.gP,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$tabindex(-1),
															$elm$html$Html$Attributes$class('link')
														]),
													_List_fromArray(
														[
															$elm$html$Html$text('sending us a tweet')
														])),
													$elm$html$Html$text(', it will help '),
													$author$project$Libs$Html$bText('keep our motivation high'),
													$elm$html$Html$text(' 🥰')
												]))
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('px-6 py-3 mt-6 flex items-center flex-row-reverse bg-gray-50')
						]),
					_List_fromArray(
						[
							A3(
							$author$project$Components$Atoms$Button$primary3,
							$author$project$Libs$Tailwind$primary,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
										$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg(
											$author$project$PagesComponents$Projects$Id_$Models$LCreate(model.cW)))),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'w-full text-base',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['ml-3 w-auto text-sm']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Save layout')
								])),
							A3(
							$author$project$Components$Atoms$Button$white3,
							$author$project$Libs$Tailwind$gray,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
										$author$project$PagesComponents$Projects$Id_$Models$LayoutMsg($author$project$PagesComponents$Projects$Id_$Models$LCancel))),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-3 w-full text-base',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mt-0 w-auto text-sm']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Cancel')
								]))
						]))
				]));
	});
var $author$project$Libs$Tailwind$text_400 = function (_v0) {
	var color = _v0;
	return 'text-' + (color + '-400');
};
var $author$project$Components$Molecules$Alert$alertIcon = F2(
	function (color, icon) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('flex-shrink-0')
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Components$Atoms$Icon$solid,
					icon,
					$author$project$Libs$Tailwind$text_400(color))
				]));
	});
var $author$project$Libs$Tailwind$border_400 = function (_v0) {
	var color = _v0;
	return 'border-' + (color + '-400');
};
var $author$project$Components$Molecules$Alert$alert = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'p-4 border-l-4',
						$author$project$Libs$Tailwind$bg_50(model.n),
						$author$project$Libs$Tailwind$border_400(model.n)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('flex')
					]),
				_List_fromArray(
					[
						A2($author$project$Components$Molecules$Alert$alertIcon, model.n, model.D),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('ml-3')
							]),
						model.bI)
					]))
			]));
};
var $author$project$Components$Molecules$Alert$alertDescription = F2(
	function (color, content) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'mt-2 text-sm',
							$author$project$Libs$Tailwind$text_700(color)
						]))
				]),
			content);
	});
var $author$project$Components$Molecules$Alert$alertTitle = F2(
	function (color, title) {
		return A2(
			$elm$html$Html$h3,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'text-sm font-medium',
							$author$project$Libs$Tailwind$text_800(color)
						]))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(title)
				]));
	});
var $author$project$Components$Molecules$Alert$withDescription = F2(
	function (model, description) {
		return $author$project$Components$Molecules$Alert$alert(
			{
				n: model.n,
				bI: _List_fromArray(
					[
						A2($author$project$Components$Molecules$Alert$alertTitle, model.n, model.aj),
						A2($author$project$Components$Molecules$Alert$alertDescription, model.n, description)
					]),
				D: model.D
			});
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewAlert = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('px-6 mt-3')
		]),
	_List_fromArray(
		[
			A2(
			$author$project$Components$Molecules$Alert$withDescription,
			{n: $author$project$Libs$Tailwind$yellow, D: 95, aj: 'Experimental feature'},
			_List_fromArray(
				[
					$elm$html$Html$text('This feature is experimental to see if and how it\'s useful and '),
					A3(
					$author$project$Libs$Html$extLink,
					$author$project$Conf$constants.gw,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('link')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('gather some feedback')
						])),
					$elm$html$Html$text('.'),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					$elm$html$Html$text('Please, be indulgent with the UX and share your thoughts on it (useful or not, how to improve...).')
				]))
		]));
var $author$project$PagesComponents$Projects$Id_$Models$FPSearch = {$: 4};
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $elm$svg$Svg$circle = $elm$svg$Svg$trustedNode('circle');
var $elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var $elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var $elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var $author$project$Components$Atoms$Icon$loading = function (styles) {
	return A2(
		$elm$svg$Svg$svg,
		_List_fromArray(
			[
				$elm$svg$Svg$Attributes$viewBox('0 0 24 24'),
				$elm$svg$Svg$Attributes$fill('none'),
				$author$project$Libs$Html$Attributes$ariaHidden(true),
				$author$project$Libs$Svg$Attributes$css(
				_List_fromArray(
					['flex-shrink-0 h-5 w-5', styles]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$svg$Svg$circle,
				_List_fromArray(
					[
						$author$project$Libs$Svg$Attributes$css(
						_List_fromArray(
							['opacity-25'])),
						$elm$svg$Svg$Attributes$stroke('currentColor'),
						$elm$svg$Svg$Attributes$strokeWidth('4'),
						$elm$svg$Svg$Attributes$cx('12'),
						$elm$svg$Svg$Attributes$cy('12'),
						$elm$svg$Svg$Attributes$r('10')
					]),
				_List_Nil),
				A2(
				$elm$svg$Svg$path,
				_List_fromArray(
					[
						$author$project$Libs$Svg$Attributes$css(
						_List_fromArray(
							['opacity-75'])),
						$elm$svg$Svg$Attributes$fill('currentColor'),
						$elm$svg$Svg$Attributes$d('M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z')
					]),
				_List_Nil)
			]));
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewFooter = F2(
	function (settings, model) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('px-6 py-3 mt-3 flex items-center justify-between flex-row-reverse bg-gray-50')
				]),
			function () {
				var _v0 = _Utils_Tuple3(model.hn, model.jy, model.i_);
				if ((!_v0.a.$) && (!_v0.b.$)) {
					switch (_v0.c.$) {
						case 2:
							var from = _v0.a.a;
							var to = _v0.b.a;
							var res = _v0.c.a;
							return (_Utils_eq(from, res.hn) && (_Utils_eq(to, res.jy) && _Utils_eq(settings, res.dc))) ? _List_fromArray(
								[
									A3(
									$author$project$Components$Atoms$Button$primary3,
									$author$project$Libs$Tailwind$primary,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg($author$project$PagesComponents$Projects$Id_$Models$FPClose))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Done')
										]))
								]) : _List_fromArray(
								[
									A3(
									$author$project$Components$Atoms$Button$primary3,
									$author$project$Libs$Tailwind$primary,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg($author$project$PagesComponents$Projects$Id_$Models$FPSearch))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Search')
										])),
									A2(
									$elm$html$Html$span,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Results are out of sync with search 🤯')
										]))
								]);
						case 1:
							var _v1 = _v0.c;
							return _List_fromArray(
								[
									A3(
									$author$project$Components$Atoms$Button$primary3,
									$author$project$Libs$Tailwind$primary,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$disabled(true)
										]),
									_List_fromArray(
										[
											$author$project$Components$Atoms$Icon$loading('-ml-1 mr-2 animate-spin'),
											$elm$html$Html$text('Searching...')
										]))
								]);
						default:
							var _v2 = _v0.c;
							return _List_fromArray(
								[
									A3(
									$author$project$Components$Atoms$Button$primary3,
									$author$project$Libs$Tailwind$primary,
									_List_fromArray(
										[
											$elm$html$Html$Events$onClick(
											$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg($author$project$PagesComponents$Projects$Id_$Models$FPSearch))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Search')
										]))
								]);
					}
				} else {
					return _List_fromArray(
						[
							A3(
							$author$project$Components$Atoms$Button$primary3,
							$author$project$Libs$Tailwind$primary,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$disabled(true)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Search')
								]))
						]);
				}
			}());
	});
var $author$project$Components$Atoms$Icon$LocationMarker = 127;
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewHeader = function (titleId) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'pt-6 px-6',
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['flex items-start']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-primary-100',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['mx-0 h-10 w-10']))
							]))
					]),
				_List_fromArray(
					[
						A2($author$project$Components$Atoms$Icon$outline, 127, 'text-primary-600')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'mt-3 text-center',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['mt-0 ml-4 text-left']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$id(titleId),
								$elm$html$Html$Attributes$class('text-lg leading-6 font-medium text-gray-900')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Find a path between tables')
							])),
						A2(
						$elm$html$Html$p,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-sm text-gray-500')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Use relations to find a path between two tables. Useful when you don\'t know how tables are connected but you want to query their data together.')
							]))
					]))
			]));
};
var $author$project$Libs$List$appendIf = F3(
	function (predicate, item, list) {
		return predicate ? _Utils_ap(
			list,
			_List_fromArray(
				[item])) : list;
	});
var $author$project$Libs$Nel$length = function (nel) {
	return 1 + $elm$core$List$length(nel.gc);
};
var $author$project$PagesComponents$Projects$Id_$Models$FPToggleResult = function (a) {
	return {$: 6, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$buildQuery = F2(
	function (table, joins) {
		return 'SELECT *' + (('\nFROM ' + $author$project$Models$Project$TableId$show(table)) + A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (s) {
					var _v0 = s.ao;
					if (!_v0) {
						return '\n  JOIN ' + ($author$project$Models$Project$TableId$show(s.iT.fW.G) + (' ON ' + ($author$project$Models$Project$ColumnRef$show(s.iT.fW) + (' = ' + $author$project$Models$Project$ColumnRef$show(s.iT.de)))));
					} else {
						return '\n  JOIN ' + ($author$project$Models$Project$TableId$show(s.iT.de.G) + (' ON ' + ($author$project$Models$Project$ColumnRef$show(s.iT.de) + (' = ' + $author$project$Models$Project$ColumnRef$show(s.iT.fW)))));
					}
				},
				$author$project$Libs$Nel$toList(joins))));
	});
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPathStepDetails = F3(
	function (dir, from, to) {
		return _List_fromArray(
			[
				$elm$html$Html$text(' > '),
				A2(
				$author$project$Components$Molecules$Tooltip$t,
				$author$project$Models$Project$ColumnRef$show(from) + (' ' + (dir + (' ' + $author$project$Models$Project$ColumnRef$show(to)))),
				A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('underline')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$author$project$Models$Project$TableId$show(to.G))
						])))
			]);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPathStep = function (s) {
	var _v0 = s.ao;
	if (!_v0) {
		return A3($author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPathStepDetails, '→', s.iT.de, s.iT.fW);
	} else {
		return A3($author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPathStepDetails, '←', s.iT.fW, s.iT.de);
	}
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPath = F4(
	function (opened, from, i, path) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick(
							$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
								$author$project$PagesComponents$Projects$Id_$Models$FPToggleResult(i))),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 py-4 cursor-pointer',
									A3(
									$author$project$Libs$Bool$cond,
									_Utils_eq(
										opened,
										$elm$core$Maybe$Just(i)),
									'bg-primary-100 text-primary-700',
									'')
								]))
						]),
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(
							$elm$core$String$fromInt(i + 1) + '. '),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$author$project$Models$Project$TableId$show(from))
									])),
							A2(
								$elm$core$List$concatMap,
								$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPathStep,
								$author$project$Libs$Nel$toList(path))))),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 py-3 border-t border-gray-300',
									'text-primary-700',
									A3(
									$author$project$Libs$Bool$cond,
									!_Utils_eq(
										opened,
										$elm$core$Maybe$Just(i)),
									'hidden',
									'')
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$pre,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(
									A2($author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$buildQuery, from, path))
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPaths = function (model) {
	var _v0 = _Utils_Tuple3(model.hn, model.jy, model.i_);
	if (((!_v0.a.$) && (!_v0.b.$)) && (_v0.c.$ === 2)) {
		var from = _v0.a.a;
		var to = _v0.b.a;
		var result = _v0.c.a;
		return $elm$core$List$isEmpty(result.iD) ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('px-6 mt-3 text-center')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h2,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-2 text-lg font-medium text-gray-900')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('No path found')
						])),
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src('/assets/images/closed-door.jpg'),
							$elm$html$Html$Attributes$alt('Closed door'),
							$elm$html$Html$Attributes$class('h-96 inline-block align-middle')
						]),
					_List_Nil)
				])) : A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('px-6 mt-3 overflow-y-auto')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_Nil,
					A3(
						$author$project$Libs$List$appendIf,
						$elm$core$List$length(result.iD) > 100,
						A2(
							$elm$html$Html$small,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-gray-500')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Too much results ? Check \'Search settings\' above to ignore some table or columns')
								])),
						_List_fromArray(
							[
								$elm$html$Html$text(
								'Found ' + ($elm$core$String$fromInt(
									$elm$core$List$length(result.iD)) + ' paths between tables ')),
								$author$project$Libs$Html$bText(
								$author$project$Models$Project$TableId$show(from)),
								$elm$html$Html$text(' and '),
								$author$project$Libs$Html$bText(
								$author$project$Models$Project$TableId$show(to)),
								$elm$html$Html$text(':'),
								A2($elm$html$Html$br, _List_Nil, _List_Nil)
							]))),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-3 border border-gray-300 rounded-md shadow-sm divide-y divide-gray-300')
						]),
					A2(
						$elm$core$List$indexedMap,
						A2($author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPath, result.b0, from),
						A2($elm$core$List$sortBy, $author$project$Libs$Nel$length, result.iD))),
					A2(
					$elm$html$Html$small,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-gray-500')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Not enough results ? Check \'Search settings\' above and increase max length of path or remove some ignored columns...')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-3')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('We hope your like this feature. If you have a few minutes, please write us '),
							A3(
							$author$project$Libs$Html$extLink,
							$author$project$Conf$constants.gw,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('link')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('a quick feedback')
								])),
							$elm$html$Html$text(' about it and your use case so we can continue to improve 🚀')
						]))
				]));
	} else {
		return A2($elm$html$Html$div, _List_Nil, _List_Nil);
	}
};
var $author$project$PagesComponents$Projects$Id_$Models$FPUpdateFrom = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$FPUpdateTo = function (a) {
	return {$: 3, a: a};
};
var $author$project$Libs$Maybe$has = F2(
	function (value, maybe) {
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (a) {
				return _Utils_eq(a, value);
			},
			false,
			maybe);
	});
var $elm$html$Html$option = _VirtualDom_node('option');
var $elm$html$Html$select = _VirtualDom_node('select');
var $elm$html$Html$Attributes$selected = $elm$html$Html$Attributes$boolProperty('selected');
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSelectCard = F6(
	function (fieldId, title, description, selectedValue, buildMsg, tables) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'flex-grow p-3 border border-gray-300 rounded-md shadow-sm',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['col-span-3']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for(fieldId),
							$elm$html$Html$Attributes$class('block text-sm font-medium text-gray-700')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$select,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(fieldId),
									$elm$html$Html$Events$onInput(
									function (id) {
										return buildMsg(
											A2(
												$elm$core$Maybe$map,
												$author$project$Models$Project$TableId$fromString,
												A2(
													$author$project$Libs$Maybe$filter,
													function (i) {
														return !(i === '');
													},
													$elm$core$Maybe$Just(id))));
									}),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'block w-full border-gray-300 rounded-md',
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['ring-indigo-500 border-indigo-500'])),
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['text-sm']))
										]))
								]),
							A2(
								$elm$core$List$cons,
								A2(
									$elm$html$Html$option,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$value(''),
											$elm$html$Html$Attributes$selected(
											_Utils_eq(selectedValue, $elm$core$Maybe$Nothing))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('-- Select a table')
										])),
								A2(
									$elm$core$List$map,
									function (t) {
										return A2(
											$elm$html$Html$option,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$value(
													$author$project$Models$Project$TableId$toString(t.t)),
													$elm$html$Html$Attributes$selected(
													A2($author$project$Libs$Maybe$has, t.t, selectedValue))
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(
													$author$project$Models$Project$TableId$show(t.t))
												]));
									},
									$elm$core$Dict$values(tables))))
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1 text-sm text-gray-500')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(description)
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSearchForm = F4(
	function (modalId, tables, from, to) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('px-6 mt-3 flex space-x-3')
				]),
			_List_fromArray(
				[
					A6(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSelectCard,
					modalId + '-from',
					'From',
					'Starting table for the path',
					from,
					A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$FPUpdateFrom, $author$project$PagesComponents$Projects$Id_$Models$FindPathMsg),
					tables),
					A6(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSelectCard,
					modalId + '-to',
					'To',
					'Table you want to go to',
					to,
					A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$FPUpdateTo, $author$project$PagesComponents$Projects$Id_$Models$FindPathMsg),
					tables)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$FPSettingsUpdate = function (a) {
	return {$: 7, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$FPToggleSettings = {$: 1};
var $author$project$Libs$Html$Attributes$ariaDescribedby = function (targetId) {
	return A2($elm$html$Html$Attributes$attribute, 'aria-describedby', targetId);
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSettingsInput = F7(
	function (fieldId, fieldType, fieldLabel, fieldPlaceholder, fieldHelp, fieldValue, msg) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['grid grid-cols-4 gap-3 items-start mt-3']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for(fieldId),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'block text-sm font-medium text-gray-700',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['mt-px pt-2']))
								]))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(fieldLabel)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'mt-1',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['mt-0 col-span-3']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_(fieldType),
									$elm$html$Html$Attributes$id(fieldId),
									$elm$html$Html$Attributes$value(fieldValue),
									$elm$html$Html$Events$onInput(msg),
									$elm$html$Html$Attributes$placeholder(fieldPlaceholder),
									$author$project$Libs$Html$Attributes$ariaDescribedby(fieldId + '-help'),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'w-full border-gray-300 rounded-md shadow-sm',
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['ring-indigo-500 border-indigo-500'])),
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['text-sm']))
										]))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(fieldId + '-help'),
									$elm$html$Html$Attributes$class('text-sm text-gray-500')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldHelp)
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSettings = F3(
	function (modalId, isOpen, settings) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('px-6 mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick(
							$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg($author$project$PagesComponents$Projects$Id_$Models$FPToggleSettings)),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'link',
									$author$project$Libs$Tailwind$focus(
									_List_fromArray(
										['outline-none']))
								]))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Search settings')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'p-3 border border-gray-300 bg-gray-50 rounded-md shadow-sm',
									A3($author$project$Libs$Bool$cond, isOpen, '', 'hidden')
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mt-1 text-sm text-gray-500')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Finding all possible paths in a big graph with a lot of connections can take a long time.\n                          Use the settings below to limit your search and keep the search correct.')
								])),
							A7(
							$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSettingsInput,
							modalId + '-settings-ignored-tables',
							'text',
							'Ignored tables',
							'ex: users, accounts...',
							'Some columns does not have meaningful links so ignore them for better results.',
							settings.cN,
							function (v) {
								return $author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
									$author$project$PagesComponents$Projects$Id_$Models$FPSettingsUpdate(
										_Utils_update(
											settings,
											{cN: v})));
							}),
							A7(
							$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSettingsInput,
							modalId + '-settings-ignored-columns',
							'text',
							'Ignored columns',
							'ex: created_by, updated_by, owner...',
							'Some tables are big hubs which leads to bad results and performance, ignore them.',
							settings.cM,
							function (v) {
								return $author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
									$author$project$PagesComponents$Projects$Id_$Models$FPSettingsUpdate(
										_Utils_update(
											settings,
											{cM: v})));
							}),
							A7(
							$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSettingsInput,
							modalId + '-settings-path-max-length',
							'number',
							'Max path length',
							'ex: 3',
							'Limit paths in length to limit complexity and performance.',
							$elm$core$String$fromInt(settings.cT),
							function (v) {
								return $author$project$PagesComponents$Projects$Id_$Models$FindPathMsg(
									$author$project$PagesComponents$Projects$Id_$Models$FPSettingsUpdate(
										_Utils_update(
											settings,
											{
												cT: A2(
													$elm$core$Maybe$withDefault,
													$author$project$Models$Project$FindPathSettings$init.cT,
													$elm$core$String$toInt(v))
											})));
							})
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewFindPath = F4(
	function (opened, tables, settings, model) {
		var titleId = model.t + '-title';
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{
				t: model.t,
				ar: opened,
				b_: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$FindPathMsg($author$project$PagesComponents$Projects$Id_$Models$FPClose)),
				cm: titleId
			},
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewHeader(titleId),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewAlert,
					A3($author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSettings, model.t, model.ji, settings),
					A4($author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewSearchForm, model.t, tables, model.hn, model.jy),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewPaths(model),
					A2($author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewFooter, settings, model)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey = function (values) {
	return A2($author$project$Components$Atoms$Kbd$badge, _List_Nil, values);
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$tip = A3(
	$author$project$Components$Atoms$Badge$rounded,
	$author$project$Libs$Tailwind$green,
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('tip')
		]));
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$canvasNavigation = {
	eV: _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('You have an infinite canvas to organize your tables. You can scroll with your mouse and zoom using the '),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
					_List_fromArray(
						['ctrl', 'scroll'])),
					$elm$html$Html$text('. On the bottom right you also have some commands to control the zoom or adjust your schema to the screen ('),
					A2($author$project$Components$Atoms$Icon$solid, 20, 'inline'),
					$elm$html$Html$text(').')
				])),
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('You can move table by dragging them and move the whole canvas by dragging the background.')
				])),
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$tip,
					$elm$html$Html$text(' You can select multiple tables using '),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
					_List_fromArray(
						['ctrl', 'click'])),
					$elm$html$Html$text(' or the selection box, and then move them all at once. If you have feedback or suggestions to improve this navigation, please '),
					A3(
					$author$project$Libs$Html$extLink,
					$author$project$Conf$constants.gv,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('link')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('tell us')
						])),
					$elm$html$Html$text(', it\'s an important core feature.')
				]))
		]),
	aj: 'Canvas navigation'
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$experimental = A3(
	$author$project$Components$Atoms$Badge$rounded,
	$author$project$Libs$Tailwind$yellow,
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('experimental')
		]));
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$findPath = {
	eV: _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$experimental,
					$elm$html$Html$text(' Find all the possible paths between two tables. To get relevant results, use the settings to ignore some tables or columns and keep the length small. '),
					$elm$html$Html$text('We are still figuring out how this could be the most interesting (path algo, heuristics, UX...) so don\'t hesitate to '),
					A3(
					$author$project$Libs$Html$extLink,
					$author$project$Conf$constants.gw,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('link')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('come and discuss')
						])),
					$elm$html$Html$text(' about it.')
				]))
		]),
	aj: 'Find path'
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$followRelation = {
	eV: _List_fromArray(
		[
			$elm$html$Html$text('Azimutt shows you foreign keys as outgoing relations from a column with a small horizontal link on the right. Just '),
			$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
			_List_fromArray(
				['click'])),
			$elm$html$Html$text(' on the column icon ('),
			A2($author$project$Components$Atoms$Icon$solid, 97, 'inline'),
			$elm$html$Html$text(') to show the target table. Incoming relations (foreign keys pointing to the table) are shown on the left, '),
			$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
			_List_fromArray(
				['click'])),
			$elm$html$Html$text(' on the column icon to see all the incoming relations an choose the tables you want to show.')
		]),
	aj: 'Follow relation'
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$layout = {
	eV: _List_fromArray(
		[
			$elm$html$Html$text('If you are using Azimutt, your schema is probably too complex to be seen all at once.\n                  Focusing on specific use cases can be very interesting, showing only the relevant tables, columns and relations.\n                  Layouts allows you to define such use cases and save them so you can come back to them later and easily switch between them.')
		]),
	aj: 'Layout'
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$partialDisplay = {
	eV: _List_fromArray(
		[
			$elm$html$Html$text('Having too much information makes it useless. Azimutt let you select the table you want to see but also the columns. If you '),
			$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
			_List_fromArray(
				['double click'])),
			$elm$html$Html$text(' on a column, it will be moved to the \'hidden columns\' section. And then shown again in last position with the '),
			$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
			_List_fromArray(
				['double click'])),
			$elm$html$Html$text(' from this section. For quicker hide, you can use the keyboard shortcuts '),
			$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
			_List_fromArray(
				['d'])),
			$elm$html$Html$text(', '),
			$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
			_List_fromArray(
				['Backspace'])),
			$elm$html$Html$text(' or '),
			$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
			_List_fromArray(
				['Delete'])),
			$elm$html$Html$text(' while hovering the column, also works for a table.')
		]),
	aj: 'Partial display'
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$soon = A3(
	$author$project$Components$Atoms$Badge$rounded,
	$author$project$Libs$Tailwind$indigo,
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('soon')
		]));
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$search = {
	eV: _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('It\'s quite easy, just enter the search (top left) and look for what you want.\n                         You will find tables from your schema but also columns or relations.\n                         We search "everywhere": name, comment or constraints for tables, name, comment, type or default value for columns and name, linked table and columns for relations.\n                         Selecting them will show the related table on the canvas.')
				])),
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$tip,
					$elm$html$Html$text(' Just type '),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
					_List_fromArray(
						['/'])),
					$elm$html$Html$text(' from anywhere to focus the search input and start typing. You can also use '),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
					_List_fromArray(
						['Arrows'])),
					$elm$html$Html$text(' and '),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(
					_List_fromArray(
						['Enter'])),
					$elm$html$Html$text(' to navigate in the results and select one.')
				])),
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$soon,
					$elm$html$Html$text(' We plan to use full-text search to be typo tolerant and have better results, as well as let you import some data to perform search on them. If you need this, please '),
					A3(
					$author$project$Libs$Html$extLink,
					$author$project$Conf$constants.gx,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('link')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('vote and let us know')
						])),
					$elm$html$Html$text(' to help prioritize it.')
				]))
		]),
	aj: 'Search'
};
var $author$project$PagesComponents$Projects$Id_$Models$HToggle = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$sectionToAccordionItem = F2(
	function (isOpen, section) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick(
							$author$project$PagesComponents$Projects$Id_$Models$HelpMsg(
								$author$project$PagesComponents$Projects$Id_$Models$HToggle(section.aj))),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 py-4 cursor-pointer',
									A3($author$project$Libs$Bool$cond, isOpen, 'bg-primary-100 text-primary-700', '')
								]))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(section.aj)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 py-3 border-t border-gray-300',
									A3($author$project$Libs$Bool$cond, isOpen, '', 'hidden')
								]))
						]),
					section.eV)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$shortcuts = {
	eV: _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('Keyboard shortcuts improve user productivity. So Azimutt has some to help you:')
				])),
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			A2(
				$elm$core$List$map,
				function (h) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('flex justify-between flex-row-reverse mt-1')
							]),
						_List_fromArray(
							[
								$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$hotkey(h.cL),
								$elm$html$Html$text(' ' + h.cE)
							]));
				},
				_List_fromArray(
					[
						{
						cE: 'Focus on the search',
						cL: _List_fromArray(
							['/'])
					},
						{
						cE: 'Save the project. It\'s not done automatically so don\'t forget it ^^',
						cL: _List_fromArray(
							['Ctrl', 's'])
					},
						{
						cE: 'Hide a table or column, depending on what is hovered',
						cL: _List_fromArray(
							['d'])
					},
						{
						cE: 'Create a layout from your current state',
						cL: _List_fromArray(
							['Alt', 'l'])
					},
						{
						cE: 'Add a new virtual relation',
						cL: _List_fromArray(
							['Alt', 'v'])
					},
						{
						cE: 'Open find path dialog, use hovered table as source',
						cL: _List_fromArray(
							['Alt', 'p'])
					},
						{
						cE: 'Zoom to 100%',
						cL: _List_fromArray(
							['Ctrl', '0'])
					},
						{
						cE: 'Fit diagram to screen',
						cL: _List_fromArray(
							['Ctrl', 'Alt', '0'])
					},
						{
						cE: 'Bring hovered table on step forward',
						cL: _List_fromArray(
							['Ctrl', 'ArrowUp'])
					},
						{
						cE: 'Bring hovered table on step backward',
						cL: _List_fromArray(
							['Ctrl', 'ArrowDown'])
					},
						{
						cE: 'Bring hovered table in the front',
						cL: _List_fromArray(
							['Ctrl', 'Shift', 'ArrowUp'])
					},
						{
						cE: 'Bring hovered table to the back',
						cL: _List_fromArray(
							['Ctrl', 'Shift', 'ArrowDown'])
					},
						{
						cE: 'Cancel what you are doing (drag, opened dialog, input focus, create relation...)',
						cL: _List_fromArray(
							['Escape'])
					},
						{
						cE: 'Open this documentation dialog',
						cL: _List_fromArray(
							['?'])
					}
					]))),
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('If you can think of other or have better suggestion for them, '),
					A3(
					$author$project$Libs$Html$extLink,
					$author$project$Conf$constants.gy,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('link')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('just let us know')
						])),
					$elm$html$Html$text('.')
				]))
		]),
	aj: 'Shortcuts'
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$viewHelp = F2(
	function (opened, model) {
		var titleId = model.t + '-title';
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{
				t: model.t,
				ar: opened,
				b_: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$HelpMsg($author$project$PagesComponents$Projects$Id_$Models$HClose)),
				cm: titleId
			},
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('max-w-3xl mx-6 mt-6')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-3 text-center',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mt-5']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$id(titleId),
											$elm$html$Html$Attributes$class('text-lg leading-6 font-medium text-gray-900')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('🎊 Hey! Welcome to Azimutt 🎊')
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('mt-2')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$p,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('text-sm text-gray-500')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text('Let\'s dive into the features you might be interested in...')
												]))
										]))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mt-3 border border-gray-300 rounded-md shadow-sm divide-y divide-gray-300')
								]),
							A2(
								$elm$core$List$map,
								function (s) {
									return A2(
										$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$sectionToAccordionItem,
										_Utils_eq(s.aj, model.ix),
										s);
								},
								_List_fromArray(
									[$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$search, $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$canvasNavigation, $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$partialDisplay, $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$layout, $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$followRelation, $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$findPath, $author$project$PagesComponents$Projects$Id_$Views$Modals$Help$shortcuts]))),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mt-3')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('I hope you find Azimutt as much as useful as I do. The application is quickly evolving and any feedback, feature request or use case description is '),
									A3(
									$author$project$Libs$Html$extLink,
									$author$project$Conf$constants.gy,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('link')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('very welcome')
										])),
									$elm$html$Html$text(' to help us make the most out of it.')
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('px-6 py-3 mt-3 flex items-center justify-between flex-row-reverse bg-gray-50')
						]),
					_List_fromArray(
						[
							A3(
							$author$project$Components$Atoms$Button$primary3,
							$author$project$Libs$Tailwind$primary,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
										$author$project$PagesComponents$Projects$Id_$Models$HelpMsg($author$project$PagesComponents$Projects$Id_$Models$HClose)))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Thanks!')
								]))
						]))
				]));
	});
var $author$project$Components$Molecules$Slideover$closeBtn = function (msg) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$type_('button'),
				$elm$html$Html$Events$onClick(msg),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'bg-white rounded-md text-gray-400',
						$author$project$Libs$Tailwind$hover(
						_List_fromArray(
							['text-gray-500'])),
						$author$project$Libs$Tailwind$focus(
						_List_fromArray(
							['outline-none ring-2 ring-offset-2 ring-indigo-500']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('sr-only')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Close panel')
					])),
				A2($author$project$Components$Atoms$Icon$outline, 227, '')
			]));
};
var $author$project$Components$Molecules$Slideover$header = F3(
	function (labelId, title, onClose) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'py-6 px-4',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['px-6']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('flex items-start justify-between')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h2,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-lg font-medium text-gray-900'),
									$elm$html$Html$Attributes$id(labelId)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('ml-3 h-7 flex items-center')
								]),
							_List_fromArray(
								[
									$author$project$Components$Molecules$Slideover$closeBtn(onClose)
								]))
						]))
				]));
	});
var $author$project$Components$Molecules$Slideover$slideover = F2(
	function (model, content) {
		var labelId = model.t + '-title';
		var duration = A3($author$project$Libs$Bool$cond, model.ar, $author$project$Conf$ui.iv, $author$project$Conf$ui.gR);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'fixed inset-0 overflow-hidden z-max',
							A3($author$project$Libs$Bool$cond, model.ar, '', 'pointer-events-none')
						])),
					$author$project$Libs$Html$Attributes$ariaLabelledby(labelId),
					$author$project$Libs$Html$Attributes$role('dialog'),
					$author$project$Libs$Html$Attributes$ariaModal(true)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('absolute inset-0 overflow-hidden')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(model.ee),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity ease-in-out',
											'duration-' + $elm$core$String$fromInt(duration),
											A3($author$project$Libs$Bool$cond, model.ar, 'opacity-100', 'opacity-0')
										])),
									$author$project$Libs$Html$Attributes$ariaHidden(true)
								]),
							_List_Nil),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('fixed inset-y-0 right-0 pl-10 max-w-full flex')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'w-screen max-w-md transform transition ease-in-out',
													'duration-' + $elm$core$String$fromInt(duration),
													A3($author$project$Libs$Bool$cond, model.ar, 'translate-x-0', 'translate-x-full')
												]))
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$id(model.t),
													$elm$html$Html$Attributes$class('h-full flex flex-col bg-white shadow-xl')
												]),
											_List_fromArray(
												[
													A3($author$project$Components$Molecules$Slideover$header, labelId, model.aj, model.ed),
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$author$project$Libs$Html$Attributes$css(
															_List_fromArray(
																[
																	'flex-1 relative overflow-y-scroll px-4',
																	$author$project$Libs$Tailwind$sm(
																	_List_fromArray(
																		['px-6']))
																]))
														]),
													_List_fromArray(
														[content]))
												]))
										]))
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$PSColumnBasicTypesToggle = {$: 16};
var $author$project$PagesComponents$Projects$Id_$Models$PSColumnOrderUpdate = function (a) {
	return {$: 15, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$PSHiddenColumnsListUpdate = function (a) {
	return {$: 12, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$PSHiddenColumnsPropsToggle = {$: 13};
var $author$project$PagesComponents$Projects$Id_$Models$PSHiddenColumnsRelationsToggle = {$: 14};
var $author$project$PagesComponents$Projects$Id_$Models$PSRemoveViewsToggle = {$: 10};
var $author$project$PagesComponents$Projects$Id_$Models$PSRemovedTablesUpdate = function (a) {
	return {$: 11, a: a};
};
var $elm$html$Html$Attributes$checked = $elm$html$Html$Attributes$boolProperty('checked');
var $author$project$Components$Atoms$Input$checkbox = F5(
	function (styles, fieldId, fieldLabel, fieldValue, fieldChange) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['relative flex items-start', styles]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('flex items-center h-5')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('checkbox'),
									$elm$html$Html$Attributes$name(fieldId),
									$elm$html$Html$Attributes$id(fieldId),
									$elm$html$Html$Attributes$checked(fieldValue),
									$elm$html$Html$Events$onClick(fieldChange),
									$author$project$Libs$Html$Attributes$ariaDescribedby(fieldId + '-help'),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'h-4 w-4 text-indigo-600 border-gray-300 rounded',
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['ring-indigo-500']))
										]))
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('ml-3 text-sm')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$label,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$for(fieldId),
									$elm$html$Html$Attributes$class('text-gray-700')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldLabel)
								]))
						]))
				]));
	});
var $author$project$Components$Atoms$Input$checkboxWithLabelAndHelp = F7(
	function (styles, fieldId, fieldLabel, fieldHelp, fieldDescription, fieldValue, fieldChange) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(styles)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for(fieldId),
							$elm$html$Html$Attributes$class('block')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-sm font-medium text-gray-700')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldLabel)
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(fieldId + '-help'),
									$elm$html$Html$Attributes$class('text-sm text-gray-500')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldHelp)
								]))
						])),
					A5($author$project$Components$Atoms$Input$checkbox, 'mt-1', fieldId, fieldDescription, fieldValue, fieldChange)
				]));
	});
var $elm$html$Html$fieldset = _VirtualDom_node('fieldset');
var $elm$html$Html$legend = _VirtualDom_node('legend');
var $author$project$Components$Atoms$Input$selectWithLabelAndHelp = F7(
	function (styles, fieldId, fieldLabel, fieldHelp, fieldOptions, fieldValue, fieldChange) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(styles)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for(fieldId),
							$elm$html$Html$Attributes$class('block')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-sm font-medium text-gray-700')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldLabel)
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(fieldId + '-help'),
									$elm$html$Html$Attributes$class('text-sm text-gray-500')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldHelp)
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$select,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$name(fieldId),
									$elm$html$Html$Attributes$id(fieldId),
									$elm$html$Html$Events$onInput(fieldChange),
									$author$project$Libs$Html$Attributes$ariaDescribedby(fieldId + '-help'),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'shadow-sm block w-full border-gray-300 rounded-md',
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['ring-indigo-500 border-indigo-500'])),
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['text-sm']))
										]))
								]),
							A2(
								$elm$core$List$map,
								function (_v0) {
									var optionId = _v0.a;
									var optionLabel = _v0.b;
									return A2(
										$elm$html$Html$option,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$value(optionId),
												$elm$html$Html$Attributes$selected(
												_Utils_eq(optionId, fieldValue))
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(optionLabel)
											]));
								},
								fieldOptions))
						]))
				]));
	});
var $author$project$Components$Atoms$Input$textWithLabelAndHelp = F7(
	function (styles, fieldId, fieldLabel, fieldHelp, fieldPlaceholder, fieldValue, fieldChange) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(styles)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for(fieldId),
							$elm$html$Html$Attributes$class('block')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-sm font-medium text-gray-700')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldLabel)
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(fieldId + '-help'),
									$elm$html$Html$Attributes$class('text-sm text-gray-500')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(fieldHelp)
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('text'),
									$elm$html$Html$Attributes$name(fieldId),
									$elm$html$Html$Attributes$id(fieldId),
									$elm$html$Html$Attributes$value(fieldValue),
									$elm$html$Html$Events$onInput(fieldChange),
									$elm$html$Html$Attributes$placeholder(fieldPlaceholder),
									$author$project$Libs$Html$Attributes$ariaDescribedby(fieldId + '-help'),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'shadow-sm block w-full border-gray-300 rounded-md',
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['ring-indigo-500 border-indigo-500'])),
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['text-sm']))
										]))
								]),
							_List_Nil)
						]))
				]));
	});
var $author$project$Components$Molecules$Tooltip$tr = A2($author$project$Components$Molecules$Tooltip$tooltip, 'bottom-full mb-3 left-0', 'top-full -translate-y-2/4 ml-3');
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewCheckbox = F5(
	function (styles, fieldId, fieldLabel, value, msg) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['relative flex items-start', styles]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('flex items-center h-5')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('checkbox'),
									$elm$html$Html$Attributes$id(fieldId),
									$elm$html$Html$Attributes$checked(value),
									$elm$html$Html$Events$onClick(msg),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'h-4 w-4 text-indigo-600 border-gray-300 rounded',
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['ring-indigo-500']))
										]))
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('ml-3 text-sm')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$label,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$for(fieldId),
									$elm$html$Html$Attributes$class('text-gray-700')
								]),
							fieldLabel)
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewDisplaySettingsSection = F2(
	function (htmlId, erd) {
		var viewsCount = $elm$core$List$length(
			A2(
				$elm$core$List$filter,
				function ($) {
					return $.eQ;
				},
				A2(
					$elm$core$List$concatMap,
					A2(
						$elm$core$Basics$composeR,
						function ($) {
							return $.jr;
						},
						$elm$core$Dict$values),
					erd.cc)));
		return A2(
			$elm$html$Html$fieldset,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-6')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$legend,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('font-medium text-gray-900')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Display options')
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-sm text-gray-500')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Configure global options for this project.')
						])),
					A5(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewCheckbox,
					A3($author$project$Libs$Bool$cond, !viewsCount, 'mt-3 hidden', 'mt-3'),
					htmlId + '-no-views',
					_List_fromArray(
						[
							A2(
							$author$project$Components$Molecules$Tooltip$tr,
							'Check this if you don\'t want to have SQL views in Azimutt',
							$author$project$Libs$Html$bText('Remove views')),
							$elm$html$Html$text(
							' (' + (A2($author$project$Libs$String$pluralize, 'view', viewsCount) + ')'))
						]),
					erd.dc.iV,
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSRemoveViewsToggle)),
					A7(
					$author$project$Components$Atoms$Input$textWithLabelAndHelp,
					'mt-3',
					htmlId + '-remove-tables',
					'Remove tables',
					'Some tables are not useful, remove them.',
					'ex: flyway_.+, versions, env',
					erd.dc.iX,
					A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSRemovedTablesUpdate, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg)),
					A7(
					$author$project$Components$Atoms$Input$textWithLabelAndHelp,
					'mt-3',
					htmlId + '-hide-columns-list',
					'Hide columns',
					'Some columns are not interesting, hide them by default.',
					'ex: created_at, updated_.+',
					erd.dc.X.au,
					A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSHiddenColumnsListUpdate, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg)),
					A5(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewCheckbox,
					'mt-1',
					htmlId + '-hide-columns-props',
					_List_fromArray(
						[
							$elm$html$Html$text('Hide columns without special property')
						]),
					erd.dc.X.aA,
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSHiddenColumnsPropsToggle)),
					A5(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewCheckbox,
					'mt-1',
					htmlId + '-hide-columns-relation',
					_List_fromArray(
						[
							$elm$html$Html$text('Hide columns without relation')
						]),
					erd.dc.X.iU,
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSHiddenColumnsRelationsToggle)),
					A7(
					$author$project$Components$Atoms$Input$selectWithLabelAndHelp,
					'mt-3',
					htmlId + '-columns-order',
					'Columns order',
					'Choose the default column order for tables.',
					A2(
						$elm$core$List$map,
						function (o) {
							return _Utils_Tuple2(
								$author$project$Models$ColumnOrder$toString(o),
								$author$project$Models$ColumnOrder$show(o));
						},
						$author$project$Models$ColumnOrder$all),
					$author$project$Models$ColumnOrder$toString(erd.dc.bH),
					A2(
						$elm$core$Basics$composeR,
						$author$project$Models$ColumnOrder$fromString,
						A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSColumnOrderUpdate, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg))),
					A7(
					$author$project$Components$Atoms$Input$checkboxWithLabelAndHelp,
					'mt-3',
					htmlId + '-basic-types',
					'Column types',
					'',
					'Use basic types for columns to gain some space',
					erd.dc.bG,
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSColumnBasicTypesToggle))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$Send = function (a) {
	return {$: 57, a: a};
};
var $author$project$Models$Project$downloadContent = function (project) {
	return A2(
		$elm$json$Json$Encode$encode,
		2,
		$author$project$Models$Project$encode(project));
};
var $author$project$Ports$DownloadFile = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $author$project$Ports$downloadFile = F2(
	function (filename, content) {
		return $author$project$Ports$messageToJs(
			A2($author$project$Ports$DownloadFile, filename, content));
	});
var $author$project$Models$Project$downloadFilename = function (project) {
	return A3($elm$core$String$replace, '.sql', '', project.cW) + '.azimutt.json';
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewDownloadSection = F2(
	function (_v0, erd) {
		var project = $author$project$PagesComponents$Projects$Id_$Models$Erd$unpack(erd);
		return A2(
			$elm$html$Html$fieldset,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-6')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$legend,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('font-medium text-gray-900')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Download project')
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-sm text-gray-500')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('To save it on you computer or share with others.')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1')
						]),
					_List_fromArray(
						[
							A3(
							$author$project$Components$Atoms$Button$primary3,
							$author$project$Libs$Tailwind$primary,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$Id_$Models$Send(
										A2(
											$author$project$Ports$downloadFile,
											$author$project$Models$Project$downloadFilename(project),
											$author$project$Models$Project$downloadContent(project))))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Download project')
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$PSSchemaToggle = function (a) {
	return {$: 9, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSchema = F3(
	function (htmlId, removedSchemas, _v0) {
		var schema = _v0.a;
		var tables = _v0.b;
		var _v1 = A2(
			$elm$core$List$partition,
			function ($) {
				return $.eQ;
			},
			tables);
		var views = _v1.a;
		var realTables = _v1.b;
		return A5(
			$author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewCheckbox,
			'mt-3',
			htmlId + ('-' + schema),
			_List_fromArray(
				[
					$author$project$Libs$Html$bText(schema),
					$elm$html$Html$text(
					' (' + (A2($author$project$Libs$String$pluralizeL, 'table', realTables) + (' & ' + (A2($author$project$Libs$String$pluralizeL, 'views', views) + ')'))))
				]),
			!A2($elm$core$List$member, schema, removedSchemas),
			$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
				$author$project$PagesComponents$Projects$Id_$Models$PSSchemaToggle(schema)));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSchemasSection = F2(
	function (htmlId, erd) {
		var schemas = A2(
			$elm$core$List$sortBy,
			$elm$core$Tuple$first,
			A2(
				$elm$core$List$map,
				function (_v0) {
					var name = _v0.a;
					var tables = _v0.b;
					return _Utils_Tuple2(name, tables);
				},
				$elm$core$Dict$toList(
					A2(
						$author$project$Libs$List$groupBy,
						function ($) {
							return $.E;
						},
						A2(
							$elm$core$List$concatMap,
							A2(
								$elm$core$Basics$composeR,
								function ($) {
									return $.jr;
								},
								$elm$core$Dict$values),
							erd.cc)))));
		return ($elm$core$List$length(schemas) > 1) ? A2(
			$elm$html$Html$fieldset,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-6')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$legend,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('font-medium text-gray-900')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Project schemas')
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-sm text-gray-500')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Allow you to enable or not SQL schemas in your project.')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('list-group')
						]),
					A2(
						$elm$core$List$map,
						A2($author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSchema, htmlId, erd.dc.iW),
						schemas))
				])) : A2($elm$html$Html$fieldset, _List_Nil, _List_Nil);
	});
var $author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadOpen = function (a) {
	return {$: 4, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewAddSource = F2(
	function (_v0, _v1) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$type_('button'),
					$elm$html$Html$Events$onClick(
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
						$author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadOpen($elm$core$Maybe$Nothing))),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'inline-flex items-center px-3 py-2 w-full text-left',
							$author$project$Libs$Tailwind$focus(
							_List_fromArray(
								['outline-none']))
						]))
				]),
			_List_fromArray(
				[
					A2($author$project$Components$Atoms$Icon$solid, 159, 'inline'),
					$elm$html$Html$text('Add source')
				]));
	});
var $author$project$Components$Atoms$Icon$CloudDownload = 59;
var $author$project$Components$Atoms$Icon$DocumentText = 86;
var $author$project$PagesComponents$Projects$Id_$Models$PSSourceDelete = function (a) {
	return {$: 3, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$PSSourceToggle = function (a) {
	return {$: 2, a: a};
};
var $author$project$Components$Atoms$Icon$Refresh = 170;
var $author$project$Components$Atoms$Icon$User = 212;
var $author$project$Components$Molecules$Tooltip$bl = A2($author$project$Components$Molecules$Tooltip$tooltip, 'top-full mt-3 right-0 items-end', 'top-0 -translate-y-2/4 mr-3');
var $author$project$Libs$DateTime$formatDate = F2(
	function (zone, time) {
		return A3($author$project$Libs$DateTime$format, 'd MMM yyyy', zone, time);
	});
var $author$project$Libs$DateTime$formatDatetime = F2(
	function (zone, time) {
		return A3($author$project$Libs$DateTime$format, 'd MMM yyyy at HH:mm', zone, time);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSource = F4(
	function (htmlId, _v0, zone, source) {
		var _v1 = A2(
			$elm$core$List$partition,
			function ($) {
				return $.eQ;
			},
			$elm$core$Dict$values(source.jr));
		var views = _v1.a;
		var tables = _v1.b;
		var view = F4(
			function (icon, updatedAtText, updatedAt, labelTitle) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('px-4 py-2')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('flex justify-between')
								]),
							_List_fromArray(
								[
									A5(
									$author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewCheckbox,
									'mt-3',
									htmlId + ('-' + $author$project$Models$Project$SourceId$toString(source.t)),
									_List_fromArray(
										[
											A2(
											$author$project$Components$Molecules$Tooltip$b,
											labelTitle,
											A2(
												$elm$html$Html$span,
												_List_Nil,
												_List_fromArray(
													[
														A2($author$project$Components$Atoms$Icon$solid, icon, 'inline'),
														$elm$html$Html$text(source.cW)
													])))
										]),
									source.e6,
									$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
										$author$project$PagesComponents$Projects$Id_$Models$PSSourceToggle(source))),
									A2(
									$elm$html$Html$div,
									_List_Nil,
									_List_fromArray(
										[
											A2(
											$author$project$Components$Molecules$Tooltip$bl,
											'Refresh this source',
											A2(
												$elm$html$Html$button,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$type_('button'),
														$elm$html$Html$Events$onClick(
														$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
															$author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadOpen(
																$elm$core$Maybe$Just(source)))),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															[
																$author$project$Libs$Tailwind$focus(
																_List_fromArray(
																	['outline-none'])),
																A3(
																$author$project$Libs$Bool$cond,
																_Utils_eq(source.S, $author$project$Models$Project$SourceKind$UserDefined) || (!_Utils_eq(source.fb, $elm$core$Maybe$Nothing)),
																'hidden',
																'')
															]))
													]),
												_List_fromArray(
													[
														A2($author$project$Components$Atoms$Icon$solid, 170, 'inline')
													]))),
											A2(
											$author$project$Components$Molecules$Tooltip$bl,
											'Delete this source',
											A2(
												$elm$html$Html$button,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$type_('button'),
														$elm$html$Html$Events$onClick(
														A3(
															$author$project$PagesComponents$Projects$Id_$Models$confirm,
															'Delete ' + (source.cW + ' source?'),
															$elm$html$Html$text('Are you really sure?'),
															$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
																$author$project$PagesComponents$Projects$Id_$Models$PSSourceDelete(source)))),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															[
																$author$project$Libs$Tailwind$focus(
																_List_fromArray(
																	['outline-none']))
															]))
													]),
												_List_fromArray(
													[
														A2($author$project$Components$Atoms$Icon$solid, 207, 'inline')
													])))
										]))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('flex justify-between')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('text-sm text-gray-500')
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(
											A2($author$project$Libs$String$pluralizeL, 'table', tables) + (', ' + (A2($author$project$Libs$String$pluralizeL, 'view', views) + (' & ' + A2($author$project$Libs$String$pluralizeL, 'relation', source.iU)))))
										])),
									A2(
									$author$project$Components$Molecules$Tooltip$tl,
									_Utils_ap(
										updatedAtText,
										A2($author$project$Libs$DateTime$formatDatetime, zone, updatedAt)),
									A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('text-sm text-gray-500')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(
												A2($author$project$Libs$DateTime$formatDate, zone, updatedAt))
											])))
								]))
						]));
			});
		var _v2 = source.S;
		switch (_v2.$) {
			case 0:
				var path = _v2.a;
				var modified = _v2.c;
				return A4(view, 86, 'File last modified on ', modified, path + ' file');
			case 1:
				var url = _v2.a;
				return A4(view, 59, 'Last fetched on ', source.gj, 'File from ' + url);
			default:
				return A4(view, 212, 'Last edited on ', source.gj, 'Created by you');
		}
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSourcesSection = F3(
	function (htmlId, zone, erd) {
		return A2(
			$elm$html$Html$fieldset,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$legend,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('font-medium text-gray-900')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Project sources')
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('text-sm text-gray-500')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Active sources are merged to create your project schema.')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1 border border-gray-300 rounded-md shadow-sm divide-y divide-gray-300')
						]),
					_Utils_ap(
						A2(
							$elm$core$List$map,
							A3($author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSource, htmlId, erd.bm.t, zone),
							erd.cc),
						_List_fromArray(
							[
								A2($author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewAddSource, htmlId + '-new', erd.bm.t)
							])))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewProjectSettings = F4(
	function (zone, opened, erd, model) {
		return A2(
			$author$project$Components$Molecules$Slideover$slideover,
			{
				t: model.t,
				ar: opened,
				ed: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSClose)),
				ee: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSClose)),
				aj: 'Project settings'
			},
			A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A3($author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSourcesSection, model.t + '-sources', zone, erd),
						A2($author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewSchemasSection, model.t + '-schemas', erd),
						A2($author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewDisplaySettingsSection, model.t + '-display', erd),
						A2($author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewDownloadSection, model.t + '-download', erd)
					])));
	});
var $author$project$PagesComponents$Projects$Id_$Models$PromptAnswer = function (a) {
	return {$: 53, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Models$PromptUpdate = function (a) {
	return {$: 52, a: a};
};
var $author$project$Components$Molecules$Modal$prompt = F2(
	function (model, isOpen) {
		var titleId = model.t + '-title';
		var fieldId = model.t + '-input';
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{t: model.t, ar: isOpen, b_: model.aw, cm: titleId},
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 pt-6',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['flex items-start']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full',
											$author$project$Libs$Tailwind$bg_100(model.n),
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mx-0 h-10 w-10']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$author$project$Components$Atoms$Icon$outline,
									model.D,
									$author$project$Libs$Tailwind$text_600(model.n))
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-3 text-center',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mt-0 ml-4 text-left']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$h3,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('text-lg leading-6 font-medium text-gray-900'),
											$elm$html$Html$Attributes$id(titleId)
										]),
									_List_fromArray(
										[
											$elm$html$Html$text(model.aj)
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('mt-2')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$p,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('text-sm text-gray-500')
												]),
											_List_fromArray(
												[model.bg]))
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('mt-1')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$input,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$type_('text'),
													$elm$html$Html$Attributes$name(fieldId),
													$elm$html$Html$Attributes$id(fieldId),
													$elm$html$Html$Attributes$value(model.eP),
													$elm$html$Html$Events$onInput(model.ef),
													$elm$html$Html$Attributes$placeholder(model.ek),
													$elm$html$Html$Attributes$autofocus(true),
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														[
															'shadow-sm block w-full border-gray-300 rounded-md',
															$author$project$Libs$Tailwind$focus(
															_List_fromArray(
																['ring-indigo-500 border-indigo-500'])),
															$author$project$Libs$Tailwind$sm(
															_List_fromArray(
																['text-sm']))
														]))
												]),
											_List_Nil)
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-6 py-3 mt-6 bg-gray-50',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['flex items-center flex-row-reverse']))
								]))
						]),
					_List_fromArray(
						[
							A3(
							$author$project$Components$Atoms$Button$primary3,
							model.n,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(model.bk),
									$elm$html$Html$Attributes$autofocus(true),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'w-full text-base',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['ml-3 w-auto text-sm']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(model.a1)
								])),
							A3(
							$author$project$Components$Atoms$Button$white3,
							$author$project$Libs$Tailwind$gray,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(model.aw),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-3 w-full text-base',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['mt-0 w-auto text-sm']))
										]))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(model.aZ)
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Prompt$viewPrompt = F2(
	function (opened, model) {
		return A2(
			$author$project$Components$Molecules$Modal$prompt,
			{
				aZ: model.bI.aZ,
				n: model.bI.n,
				a1: model.bI.a1,
				D: model.bI.D,
				t: model.t,
				bg: model.bI.bg,
				aw: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$PromptAnswer($elm$core$Platform$Cmd$none)),
				bk: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$PromptAnswer(
						model.bI.bk(model.cO))),
				ef: $author$project$PagesComponents$Projects$Id_$Models$PromptUpdate,
				ek: '',
				aj: model.bI.aj,
				eP: model.cO
			},
			opened);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$computeBigTables = function (tables) {
	return A2(
		$elm$core$List$sortBy,
		function (t) {
			return $author$project$Libs$Ned$size(t.W);
		},
		A2(
			$elm$core$List$filter,
			function (t) {
				return $author$project$Libs$Ned$size(t.W) >= 30;
			},
			$elm$core$Dict$values(tables)));
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$computeHeterogeneousTypes = function (tables) {
	return A2(
		$elm$core$List$filter,
		function (_v2) {
			var cols = _v2.b;
			return $elm$core$List$length(cols) > 1;
		},
		A2(
			$elm$core$List$map,
			function (_v0) {
				var col = _v0.a;
				var cols = _v0.b;
				return _Utils_Tuple2(
					col,
					$elm$core$Dict$toList(
						A2(
							$elm$core$Dict$map,
							function (_v1) {
								return $elm$core$List$map(
									function ($) {
										return $.G;
									});
							},
							A2(
								$author$project$Libs$List$groupBy,
								function ($) {
									return $.S;
								},
								cols))));
			},
			$elm$core$Dict$toList(
				A2(
					$author$project$Libs$List$groupBy,
					function ($) {
						return $.r;
					},
					A2(
						$elm$core$List$concatMap,
						function (t) {
							return A2(
								$elm$core$List$map,
								function (c) {
									return {r: c.cW, S: c.S, G: t.t};
								},
								$author$project$Libs$Nel$toList(
									$author$project$Libs$Ned$values(t.W)));
						},
						$elm$core$Dict$values(tables))))));
};
var $author$project$Libs$List$dropRight = F2(
	function (n, list) {
		return A2(
			$elm$core$List$take,
			$elm$core$List$length(list) - n,
			list);
	});
var $author$project$Libs$Dict$find = F2(
	function (predicate, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, acc) {
					if (!acc.$) {
						return acc;
					} else {
						return A2(predicate, k, v) ? $elm$core$Maybe$Just(
							_Utils_Tuple2(k, v)) : $elm$core$Maybe$Nothing;
					}
				}),
			$elm$core$Maybe$Nothing,
			dict);
	});
var $author$project$Libs$Ned$find = F2(
	function (predicate, ned) {
		return function (_v0) {
			var k = _v0.a;
			var v = _v0.b;
			return A2(predicate, k, v);
		}(ned.cK) ? $elm$core$Maybe$Just(ned.cK) : A2($author$project$Libs$Dict$find, predicate, ned.gc);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$getRef = F2(
	function (src, tables) {
		var words = A2(
			$author$project$Libs$List$dropRight,
			1,
			A2(
				$elm$core$String$split,
				'_',
				$elm$core$String$toLower(src.r)));
		var tableNames = _List_fromArray(
			[
				$author$project$Libs$String$plural(
				A2($elm$core$String$join, '_', words)),
				$author$project$Libs$String$plural(
				A2(
					$elm$core$String$join,
					'_',
					A2($elm$core$List$drop, 1, words)))
			]);
		var prefix = A2($elm$core$String$join, '_', words);
		return A2(
			$elm$core$Maybe$andThen,
			function (t) {
				return A2(
					$elm$core$Maybe$map,
					function (_v3) {
						var c = _v3.b;
						return {r: c.cW, S: c.S, G: t.t};
					},
					A2(
						$author$project$Libs$Ned$find,
						F2(
							function (name, _v2) {
								return ($elm$core$String$toLower(name) === 'id') || _Utils_eq(
									$elm$core$String$toLower(name),
									prefix + '_id');
							}),
						t.W));
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$sortBy,
					function (t) {
						return 0 - $elm$core$String$length(t.cW);
					},
					$elm$core$Dict$values(
						A2(
							$elm$core$Dict$filter,
							F2(
								function (_v0, _v1) {
									var schema = _v0.a;
									var table = _v0.b;
									return _Utils_eq(schema, src.G.a) && ((!_Utils_eq(table, src.G.b)) && A2(
										$elm$core$List$member,
										$elm$core$String$toLower(table),
										tableNames));
								}),
							tables)))));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$computeMissingRelations = function (tables) {
	return A2(
		$elm$core$Tuple$mapSecond,
		$elm$core$List$map(
			function (_v2) {
				var src = _v2.a;
				return {de: src};
			}),
		A2(
			$elm$core$Tuple$mapFirst,
			$elm$core$List$filterMap(
				function (_v1) {
					var src = _v1.a;
					var maybeRef = _v1.b;
					return A2(
						$elm$core$Maybe$map,
						function (ref) {
							return {fW: ref, de: src};
						},
						maybeRef);
				}),
			A2(
				$elm$core$List$partition,
				function (_v0) {
					var maybeRef = _v0.b;
					return !_Utils_eq(maybeRef, $elm$core$Maybe$Nothing);
				},
				A2(
					$elm$core$List$map,
					function (src) {
						return _Utils_Tuple2(
							src,
							A2($author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$getRef, src, tables));
					},
					A2(
						$elm$core$List$concatMap,
						function (t) {
							return A2(
								$elm$core$List$map,
								function (c) {
									return {r: c.cW, S: c.S, G: t.t};
								},
								A2(
									$elm$core$List$filter,
									function (c) {
										return A2(
											$author$project$Libs$Regex$match,
											'_ids?$',
											$elm$core$String$toLower(c.cW)) && ((!c.bd) && ($elm$core$List$isEmpty(c.a8) && $elm$core$List$isEmpty(c.ay)));
									},
									$author$project$Libs$Nel$toList(
										$author$project$Libs$Ned$values(t.W))));
						},
						$elm$core$Dict$values(tables))))));
};
var $author$project$Components$Atoms$Icon$LightBulb = 124;
var $author$project$PagesComponents$Projects$Id_$Models$SASectionToggle = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewSection = F6(
	function (htmlId, opened, successTitle, errorCount, failureTitle, content) {
		var isOpen = _Utils_eq(opened, htmlId);
		return (!errorCount) ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h4,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('leading-5 font-medium')
						]),
					_List_fromArray(
						[
							A2($author$project$Components$Atoms$Icon$solid, 42, 'inline mr-3 text-green-500'),
							$elm$html$Html$text(successTitle)
						]))
				])) : A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h4,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mb-1 leading-5 font-medium cursor-pointer'),
							$elm$html$Html$Events$onClick(
							$author$project$PagesComponents$Projects$Id_$Models$SchemaAnalysisMsg(
								$author$project$PagesComponents$Projects$Id_$Models$SASectionToggle(htmlId)))
						]),
					_List_fromArray(
						[
							A2($author$project$Components$Atoms$Icon$solid, 124, 'inline mr-3 text-yellow-500'),
							$elm$html$Html$text(
							failureTitle(errorCount)),
							A2(
							$author$project$Components$Atoms$Icon$solid,
							48,
							'inline transform transition ' + A3($author$project$Libs$Bool$cond, isOpen, '-rotate-180', ''))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$classList(
							_List_fromArray(
								[
									_Utils_Tuple2('hidden', !isOpen)
								]))
						]),
					content)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewBigTables = F3(
	function (htmlId, opened, bigTables) {
		return A6(
			$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewSection,
			htmlId,
			opened,
			'No big table found',
			$elm$core$List$length(bigTables),
			function (nb) {
				return 'Found ' + (A2($author$project$Libs$String$pluralize, 'table', nb) + ' too big');
			},
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_Nil,
					A2(
						$elm$core$List$map,
						function (t) {
							return A2(
								$elm$html$Html$div,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										A2(
											$author$project$Libs$String$pluralize,
											'column',
											$author$project$Libs$Ned$size(t.W)) + ': '),
										$author$project$Libs$Html$bText(
										$author$project$Models$Project$TableId$show(t.t))
									]));
						},
						bigTables)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1 text-gray-500')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('See '),
							A3(
							$author$project$Libs$Html$extLink,
							'/blog/why-you-should-avoid-tables-with-many-columns-and-how-to-fix-them',
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['link']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Why you should avoid tables with many columns, and how to fix them')
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewHeterogeneousTypes = F3(
	function (htmlId, opened, heterogeneousTypes) {
		return A6(
			$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewSection,
			htmlId,
			opened,
			'No heterogeneous types found',
			$elm$core$List$length(heterogeneousTypes),
			function (nb) {
				return 'Found ' + (A2($author$project$Libs$String$pluralize, 'column', nb) + ' with heterogeneous types');
			},
			A2(
				$elm$core$List$map,
				function (_v0) {
					var col = _v0.a;
					var types = _v0.b;
					return A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$author$project$Libs$Html$bText(col),
								$elm$html$Html$text(' has types: '),
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('text-gray-500')
									]),
								A2(
									$elm$core$List$intersperse,
									$elm$html$Html$text(', '),
									A2(
										$elm$core$List$map,
										function (_v1) {
											var t = _v1.a;
											var ids = _v1.b;
											return A2(
												$author$project$Components$Molecules$Tooltip$t,
												A2(
													$elm$core$String$join,
													', ',
													A2($elm$core$List$map, $author$project$Models$Project$TableId$show, ids)),
												$elm$html$Html$text(t));
										},
										types)))
							]));
				},
				heterogeneousTypes));
	});
var $author$project$Components$Atoms$Icon$ArrowNarrowLeft = 11;
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$infoToRef = function (info) {
	return {r: info.r, G: info.G};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$kindMatch = function (rel) {
	return (A2(
		$elm$core$String$endsWith,
		'_ids',
		$elm$core$String$toLower(rel.de.r)) && A2($elm$core$String$endsWith, '[]', rel.de.S)) ? _Utils_eq(
		A2($elm$core$String$dropRight, 2, rel.de.S),
		rel.fW.S) : _Utils_eq(rel.de.S, rel.fW.S);
};
var $author$project$Components$Atoms$Button$size1 = 'px-2.5 py-1.5 text-xs rounded';
var $author$project$Components$Atoms$Button$primary1 = A2($author$project$Components$Atoms$Button$build, $author$project$Components$Atoms$Button$primary, $author$project$Components$Atoms$Button$size1);
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewMissingRelations = F3(
	function (htmlId, opened, _v0) {
		var missingRels = _v0.a;
		var missingRefs = _v0.b;
		return A6(
			$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewSection,
			htmlId,
			opened,
			'No potentially missing relation found',
			$elm$core$List$length(missingRels) + $elm$core$List$length(missingRefs),
			function (nb) {
				return 'Found ' + A2($author$project$Libs$String$pluralize, 'potentially missing relation', nb);
			},
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_Nil,
					A2(
						$elm$core$List$map,
						function (rel) {
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('flex justify-between items-center py-1')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text(
												$author$project$Models$Project$TableId$show(rel.fW.G)),
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('text-gray-500')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(
														A2($author$project$Models$Project$ColumnName$withName, rel.fW.r, ''))
													])),
												A2($author$project$Components$Atoms$Icon$solid, 11, 'inline mx-1'),
												$elm$html$Html$text(
												$author$project$Models$Project$TableId$show(rel.de.G)),
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('text-gray-500')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(
														A2($author$project$Models$Project$ColumnName$withName, rel.de.r, ''))
													]))
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('ml-3')
											]),
										_List_fromArray(
											[
												A3(
												$author$project$Libs$Bool$cond,
												$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$kindMatch(rel),
												A2($elm$html$Html$span, _List_Nil, _List_Nil),
												A2(
													$elm$html$Html$span,
													_List_fromArray(
														[
															$elm$html$Html$Attributes$class('text-gray-400 mr-3')
														]),
													_List_fromArray(
														[
															A2($author$project$Components$Atoms$Icon$solid, 95, 'inline'),
															$elm$html$Html$text(' ' + (rel.fW.S + (' vs ' + rel.de.S)))
														]))),
												A3(
												$author$project$Components$Atoms$Button$primary1,
												$author$project$Libs$Tailwind$primary,
												_List_fromArray(
													[
														$elm$html$Html$Events$onClick(
														A2(
															$author$project$PagesComponents$Projects$Id_$Models$CreateRelation,
															$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$infoToRef(rel.de),
															$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$infoToRef(rel.fW)))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Add relation')
													]))
											]))
									]));
						},
						A2(
							$elm$core$List$sortBy,
							function (rel) {
								return $author$project$Models$Project$ColumnRef$show(rel.fW) + (' ← ' + $author$project$Models$Project$ColumnRef$show(rel.de));
							},
							missingRels))),
					$elm$core$List$isEmpty(missingRefs) ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h5,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mt-1 font-medium')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Some columns may need a relation, but can\'t find a related table:')
								])),
							A2(
							$elm$html$Html$div,
							_List_Nil,
							A2(
								$elm$core$List$map,
								function (rel) {
									return A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('ml-3')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(
												$author$project$Models$Project$TableId$show(rel.de.G)),
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('text-gray-500')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(
														A2($author$project$Models$Project$ColumnName$withName, rel.de.r, ''))
													])),
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$class('text-gray-400')
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(' (' + (rel.de.S + ')'))
													]))
											]));
								},
								missingRefs))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewAnalysis = F2(
	function (opened, tables) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('px-6')
				]),
			_List_fromArray(
				[
					A3(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewMissingRelations,
					'missing-relations',
					opened,
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$computeMissingRelations(tables)),
					A3(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewHeterogeneousTypes,
					'heterogeneous-types',
					opened,
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$computeHeterogeneousTypes(tables)),
					A3(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewBigTables,
					'big-tables',
					opened,
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$computeBigTables(tables))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewFooter = A2(
	$elm$html$Html$div,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('px-6 py-3 mt-3 flex items-center justify-between flex-row-reverse bg-gray-50')
		]),
	_List_fromArray(
		[
			A3(
			$author$project$Components$Atoms$Button$primary3,
			$author$project$Libs$Tailwind$primary,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('ml-3'),
					$elm$html$Html$Events$onClick(
					$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
						$author$project$PagesComponents$Projects$Id_$Models$SchemaAnalysisMsg($author$project$PagesComponents$Projects$Id_$Models$SAClose)))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Close')
				])),
			A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('If you\'ve got any ideas for improvements, '),
					A3(
					$author$project$Libs$Html$extLink,
					'https://github.com/azimuttapp/azimutt/discussions/75',
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('link')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('please let us know')
						])),
					$elm$html$Html$text('.')
				]))
		]));
var $author$project$Components$Atoms$Icon$Beaker = 25;
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewHeader = function (titleId) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'pt-6 px-6',
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['flex items-start']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-primary-100',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['mx-0 h-10 w-10']))
							]))
					]),
				_List_fromArray(
					[
						A2($author$project$Components$Atoms$Icon$outline, 25, 'text-primary-600')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'mt-3 text-center',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['mt-0 ml-4 text-left']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$id(titleId),
								$elm$html$Html$Attributes$class('text-lg leading-6 font-medium text-gray-900')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Schema analysis')
							])),
						A2(
						$elm$html$Html$p,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-sm text-gray-500')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Let\'s find out if we can find improvements for your schema...')
							]))
					]))
			]));
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewSchemaAnalysis = F3(
	function (opened, tables, model) {
		var titleId = model.t + '-title';
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{
				t: model.t,
				ar: opened,
				b_: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$SchemaAnalysisMsg($author$project$PagesComponents$Projects$Id_$Models$SAClose)),
				cm: titleId
			},
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewHeader(titleId),
					A2($author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewAnalysis, model.b0, tables),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewFooter
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$buildIframeUrl = F3(
	function (projectUrl, layout, mode) {
		return (projectUrl !== '') ? ($author$project$Conf$constants.gE + ('/embed?project_url=' + (projectUrl + (A3($author$project$Libs$Bool$cond, layout !== '', '&layout=' + layout, '') + A3($author$project$Libs$Bool$cond, mode !== '', '&mode=' + mode, ''))))) : '';
	});
var $author$project$Services$Lenses$setLayout = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.as;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{as: value});
		}));
var $author$project$Services$Lenses$mapLayout = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.as;
	},
	$author$project$Services$Lenses$setLayout);
var $author$project$Services$Lenses$setSources = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.cc;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{cc: value});
		}));
var $author$project$Services$Lenses$mapSources = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.cc;
	},
	$author$project$Services$Lenses$setSources);
var $author$project$Services$Lenses$setTables = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.jr;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{jr: value});
		}));
var $author$project$Services$Lenses$mapTables = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.jr;
	},
	$author$project$Services$Lenses$setTables);
var $author$project$Services$Lenses$setContent = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bI;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bI: value});
		}));
var $author$project$Services$Lenses$setHiddenTables = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.dT;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{dT: value});
		}));
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyDownload = function (erd) {
	var project = $author$project$PagesComponents$Projects$Id_$Models$Erd$unpack(erd);
	var smallProject = A2(
		$author$project$Services$Lenses$mapSources,
		$elm$core$List$map(
			function (s) {
				return A2(
					$author$project$Services$Lenses$mapRelations,
					$elm$core$List$filter(
						function (r) {
							return A2(
								$elm$core$List$any,
								function (p) {
									return _Utils_eq(p.t, r.de.G) || _Utils_eq(p.t, r.fW.G);
								},
								project.as.jr);
						}),
					A2(
						$author$project$Services$Lenses$mapTables,
						$elm$core$Dict$filter(
							F2(
								function (id, _v0) {
									return A2(
										$elm$core$List$any,
										function (p) {
											return _Utils_eq(p.t, id);
										},
										project.as.jr);
								})),
						A2($author$project$Services$Lenses$setContent, $elm$core$Array$empty, s)));
			}),
		A2(
			$author$project$Services$Lenses$mapLayout,
			$author$project$Services$Lenses$setHiddenTables(_List_Nil),
			A2(
				$author$project$Services$Lenses$setLayouts,
				$elm$core$Dict$empty,
				A2($author$project$Services$Lenses$setUsedLayout, $elm$core$Maybe$Nothing, project))));
	var filename = $author$project$Models$Project$downloadFilename(project);
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mt-3')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$p,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('In Azimutt, everything stay on your browser, but to embed the diagram you need to make it available. '),
						$elm$html$Html$text('For that, download it and host it whenever is fine for you ('),
						A3(
						$author$project$Libs$Html$extLink,
						'https://gist.github.com',
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('link')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('secret gists')
							])),
						$elm$html$Html$text(' are great for that), and then fill its URL just below.')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('mt-1 flex justify-around')
					]),
				_List_fromArray(
					[
						A3(
						$author$project$Components$Atoms$Button$primary3,
						$author$project$Libs$Tailwind$primary,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$PagesComponents$Projects$Id_$Models$Send(
									A2(
										$author$project$Ports$downloadFile,
										filename,
										$author$project$Models$Project$downloadContent(project)))),
								$elm$html$Html$Attributes$class('mx-1 whitespace-nowrap')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Download whole project')
							])),
						A3(
						$author$project$Components$Atoms$Button$primary3,
						$author$project$Libs$Tailwind$primary,
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$PagesComponents$Projects$Id_$Models$Send(
									A2(
										$author$project$Ports$downloadFile,
										filename,
										$author$project$Models$Project$downloadContent(smallProject)))),
								$elm$html$Html$Attributes$class('mx-1 whitespace-nowrap')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Download project with current layout only')
							]))
					]))
			]));
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$buildIframeHtml = function (iframeUrl) {
	return (iframeUrl !== '') ? ('<iframe width=\"100%\" height=\"800px\" src=\"' + (iframeUrl + '\" title=\"Embedded Azimutt diagram\" frameborder=\"0\" allowtransparency=\"true\" allowfullscreen=\"true\" scrolling=\"no\" style=\"box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); border-radius:5px;\"></iframe>')) : '';
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyIframe = function (model) {
	var iframeUrl = A3($author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$buildIframeUrl, model.jH, model.as, model.h_);
	return (iframeUrl !== '') ? A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mt-3')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('block text-sm font-medium text-gray-700')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('Iframe')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('mt-1 bg-gray-100 text-gray-700 rounded text-sm px-3 py-2')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(
						$author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$buildIframeHtml(iframeUrl))
					])),
				A2(
				$elm$html$Html$p,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('mt-2 text-sm text-gray-500')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('You are publishing your schema? Please '),
						A3(
						$author$project$Libs$Html$sendTweet,
						$author$project$Conf$constants.je,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('link')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('let us know')
							])),
						$elm$html$Html$text(' and we can help spread it 🤗')
					]))
			])) : A2($elm$html$Html$div, _List_Nil, _List_Nil);
};
var $author$project$PagesComponents$Projects$Id_$Models$SLayoutUpdate = function (a) {
	return {$: 3, a: a};
};
var $elm$html$Html$datalist = _VirtualDom_node('datalist');
var $elm$html$Html$Attributes$list = _VirtualDom_attribute('list');
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyLayoutInput = F3(
	function (inputId, inputValue, layouts) {
		var listId = inputId + '-list';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('flex justify-between')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$label,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$for(inputId),
									$elm$html$Html$Attributes$class('block text-sm font-medium text-gray-700')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Layout')
								])),
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('text-sm text-gray-500')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Choose a layout to display or keep the default one.')
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('text'),
									$elm$html$Html$Attributes$id(inputId),
									$elm$html$Html$Attributes$name(inputId),
									$elm$html$Html$Attributes$list(listId),
									$elm$html$Html$Attributes$value(inputValue),
									$elm$html$Html$Events$onInput(
									A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$SLayoutUpdate, $author$project$PagesComponents$Projects$Id_$Models$SharingMsg)),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'block w-full border border-gray-300 rounded-md shadow-sm',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['text-sm'])),
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['border-indigo-500 ring-indigo-500']))
										]))
								]),
							_List_Nil),
							A2(
							$elm$html$Html$datalist,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(listId)
								]),
							A2(
								$elm$core$List$map,
								function (l) {
									return A2(
										$elm$html$Html$option,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$value(l)
											]),
										_List_Nil);
								},
								layouts))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$SModeUpdate = function (a) {
	return {$: 4, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyModeInput = F2(
	function (inputId, inputValue) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for(inputId),
							$elm$html$Html$Attributes$class('block text-sm font-medium text-gray-700')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Mode')
						])),
					A2(
					$elm$html$Html$select,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(inputId),
							$elm$html$Html$Attributes$name(inputId),
							$elm$html$Html$Events$onInput(
							A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$SModeUpdate, $author$project$PagesComponents$Projects$Id_$Models$SharingMsg)),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'mt-1 block w-full py-2 px-3 bg-white border border-gray-300 rounded-md shadow-sm',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['text-sm'])),
									$author$project$Libs$Tailwind$focus(
									_List_fromArray(
										['outline-none border-indigo-500 ring-indigo-500']))
								]))
						]),
					A2(
						$elm$core$List$map,
						function (m) {
							return A2(
								$elm$html$Html$option,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$value(m.t),
										$elm$html$Html$Attributes$selected(
										_Utils_eq(inputValue, m.t))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(m.t + (': ' + m.cE))
									]));
						},
						$author$project$PagesComponents$Projects$Id_$Models$EmbedMode$all))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$SProjectUrlUpdate = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyUrlInput = F2(
	function (inputId, inputValue) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$label,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$for(inputId),
							$elm$html$Html$Attributes$class('block text-sm font-medium text-gray-700')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Project url')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-1')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('url'),
									$elm$html$Html$Attributes$id(inputId),
									$elm$html$Html$Attributes$name(inputId),
									$elm$html$Html$Attributes$placeholder('https://azimutt.app/samples/gospeak.azimutt.json'),
									$elm$html$Html$Attributes$value(inputValue),
									$elm$html$Html$Events$onInput(
									A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$SProjectUrlUpdate, $author$project$PagesComponents$Projects$Id_$Models$SharingMsg)),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'block w-full border border-gray-300 rounded-md shadow-sm',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['text-sm'])),
											$author$project$Libs$Tailwind$focus(
											_List_fromArray(
												['border-indigo-500 ring-indigo-500']))
										]))
								]),
							_List_Nil)
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBody = F2(
	function (erd, model) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyDownload(erd),
					A2($author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyUrlInput, model.t + '-url-input', model.jH),
					A3(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyLayoutInput,
					model.t + '-layout-input',
					model.as,
					$elm$core$Dict$keys(erd.d_)),
					A2($author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyModeInput, model.t + '-mode-input', model.h_),
					$author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBodyIframe(model)
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewHeader = function (titleId) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['flex justify-between']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'mt-3 text-center',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['mt-0 text-left']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h3,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$id(titleId),
								$elm$html$Html$Attributes$class('text-lg leading-6 font-medium text-gray-900')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Embed diagram')
							])),
						A2(
						$elm$html$Html$p,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('text-sm text-gray-500')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Show your schema in your documentation or in your website or blog.')
							]))
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('cursor-pointer text-gray-400'),
						$elm$html$Html$Events$onClick(
						$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
							$author$project$PagesComponents$Projects$Id_$Models$SharingMsg($author$project$PagesComponents$Projects$Id_$Models$SClose)))
					]),
				_List_fromArray(
					[
						A2($author$project$Components$Atoms$Icon$solid, 227, '')
					]))
			]));
};
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewIframe = function (iframeUrl) {
	return (iframeUrl !== '') ? A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '1000px')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$iframe,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$attribute, 'width', '100%'),
						$elm$html$Html$Attributes$height(800),
						$elm$html$Html$Attributes$src(iframeUrl),
						$elm$html$Html$Attributes$title('Embedded Azimutt diagram'),
						A2($elm$html$Html$Attributes$attribute, 'frameborder', '0'),
						A2($elm$html$Html$Attributes$attribute, 'allowtransparency', 'true'),
						A2($elm$html$Html$Attributes$attribute, 'allowfullscreen', 'true'),
						A2($elm$html$Html$Attributes$attribute, 'scrolling', 'no'),
						A2($elm$html$Html$Attributes$style, 'box-shadow', '0 2px 8px 0 rgba(63,69,81,0.16)'),
						A2($elm$html$Html$Attributes$style, 'border-radius', '5px')
					]),
				_List_Nil)
			])) : A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('flex items-center')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$src('/assets/images/illustrations/education.gif')
					]),
				_List_Nil)
			]));
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewSharing = F3(
	function (opened, erd, model) {
		var titleId = model.t + '-title';
		var iframeUrl = A3($author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$buildIframeUrl, model.jH, model.as, model.h_);
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{
				t: model.t,
				ar: opened,
				b_: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$SharingMsg($author$project$PagesComponents$Projects$Id_$Models$SClose)),
				cm: titleId
			},
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('flex')
						]),
					_List_fromArray(
						[
							$author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewIframe(iframeUrl),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('p-4'),
									A2($elm$html$Html$Attributes$style, 'width', '65ch')
								]),
							_List_fromArray(
								[
									$author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewHeader(titleId),
									A2($author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewBody, erd, model)
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Models$PSSourceRefresh = function (a) {
	return {$: 7, a: a};
};
var $author$project$Services$SqlSourceUpload$SelectLocalFile = function (a) {
	return {$: 1, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$closeBtn = A3(
	$author$project$Components$Atoms$Button$white3,
	$author$project$Libs$Tailwind$gray,
	_List_fromArray(
		[
			$elm$html$Html$Events$onClick(
			$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
				$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadClose)))
		]),
	_List_fromArray(
		[
			$elm$html$Html$text('Close')
		]));
var $author$project$Libs$DateTime$greaterThan = F2(
	function (b, a) {
		return _Utils_cmp(
			$elm$time$Time$posixToMillis(a),
			$elm$time$Time$posixToMillis(b)) > 0;
	});
var $author$project$Libs$DateTime$aSecond = 1000;
var $author$project$Libs$DateTime$aMinute = $author$project$Libs$DateTime$aSecond * 60;
var $author$project$Libs$DateTime$anHour = $author$project$Libs$DateTime$aMinute * 60;
var $author$project$Libs$DateTime$aDay = $author$project$Libs$DateTime$anHour * 24;
var $author$project$Libs$DateTime$aYear = $author$project$Libs$DateTime$aDay * 365;
var $author$project$Libs$DateTime$aCentury = $author$project$Libs$DateTime$aYear * 100;
var $author$project$Libs$DateTime$aDecade = $author$project$Libs$DateTime$aYear * 10;
var $author$project$Libs$DateTime$aMonth = $author$project$Libs$DateTime$aDay * 30;
var $author$project$Libs$DateTime$humanDirection = F2(
	function (diff, text) {
		return (diff > 0) ? ('in ' + text) : (text + ' ago');
	});
var $author$project$Libs$DateTime$humanText = F4(
	function (diff, unit, one, many) {
		return A2(
			$author$project$Libs$DateTime$humanDirection,
			diff,
			A4(
				$author$project$Libs$String$inflect,
				one,
				one,
				many,
				$elm$core$Basics$abs(
					$elm$core$Basics$round(diff / unit))));
	});
var $author$project$Libs$DateTime$human = F2(
	function (now, date) {
		var diff = $elm$time$Time$posixToMillis(date) - $elm$time$Time$posixToMillis(now);
		return (_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$aSecond) < 0) ? 'just now' : ((_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$aMinute) < 0) ? A2($author$project$Libs$DateTime$humanDirection, diff, 'a few seconds') : ((_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$anHour) < 0) ? A4($author$project$Libs$DateTime$humanText, diff, $author$project$Libs$DateTime$aMinute, 'a minute', 'minutes') : ((_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$aDay) < 0) ? A4($author$project$Libs$DateTime$humanText, diff, $author$project$Libs$DateTime$anHour, 'an hour', 'hours') : ((_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$aMonth) < 0) ? A4($author$project$Libs$DateTime$humanText, diff, $author$project$Libs$DateTime$aDay, 'a day', 'days') : ((_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$aYear) < 0) ? A4($author$project$Libs$DateTime$humanText, diff, $author$project$Libs$DateTime$aMonth, 'a month', 'months') : ((_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$aDecade) < 0) ? A4($author$project$Libs$DateTime$humanText, diff, $author$project$Libs$DateTime$aYear, 'a year', 'years') : ((_Utils_cmp(
			$elm$core$Basics$abs(diff),
			$author$project$Libs$DateTime$aCentury) < 0) ? A4($author$project$Libs$DateTime$humanText, diff, $author$project$Libs$DateTime$aYear, 'a year', 'years') : A2($author$project$Libs$DateTime$humanDirection, diff, 'a long time'))))))));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$primaryBtn = F2(
	function (clicked, label) {
		return A3(
			$author$project$Components$Atoms$Button$primary3,
			$author$project$Libs$Tailwind$primary,
			A3(
				$author$project$Libs$Maybe$mapOrElse,
				function (c) {
					return _List_fromArray(
						[
							$elm$html$Html$Events$onClick(c)
						]);
				},
				_List_fromArray(
					[
						$elm$html$Html$Attributes$disabled(true)
					]),
				clicked),
			_List_fromArray(
				[
					$elm$html$Html$text(label)
				]));
	});
var $author$project$Components$Atoms$Icon$DocumentAdd = 80;
var $author$project$Libs$Tailwind$focusWithin = $author$project$Libs$Tailwind$addState('focus-within');
var $author$project$Libs$Tailwind$ring_600 = function (_v0) {
	var color = _v0;
	return 'ring-' + (color + '-600');
};
var $author$project$Libs$Tailwind$focus_ring_within_600 = function (ringColor) {
	return $author$project$Libs$Tailwind$focusWithin(
		_List_fromArray(
			[
				'outline-none ring-2 ring-offset-2',
				$author$project$Libs$Tailwind$ring_600(ringColor),
				'ring-offset-white'
			]));
};
var $elm$html$Html$Attributes$accept = $elm$html$Html$Attributes$stringProperty('accept');
var $mpizenberg$elm_file$FileValue$inputAttributes = F2(
	function (id, mimes) {
		return _List_fromArray(
			[
				$elm$html$Html$Attributes$id(id),
				$elm$html$Html$Attributes$type_('file'),
				A2($elm$html$Html$Attributes$style, 'display', 'none'),
				$elm$html$Html$Attributes$accept(
				A2($elm$core$String$join, ',', mimes))
			]);
	});
var $mpizenberg$elm_file$FileValue$loadFile = function (msgTag) {
	return A2(
		$elm$html$Html$Events$custom,
		'change',
		A2(
			$elm$json$Json$Decode$map,
			function (file) {
				return {
					bg: msgTag(file),
					fQ: true,
					ew: true
				};
			},
			A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					['target', 'files', '0']),
				$mpizenberg$elm_file$FileValue$decoder)));
};
var $mpizenberg$elm_file$FileValue$hiddenInputSingle = F3(
	function (id, mimes, msgTag) {
		return A2(
			$elm$html$Html$input,
			A2(
				$elm$core$List$cons,
				$mpizenberg$elm_file$FileValue$loadFile(msgTag),
				A2($mpizenberg$elm_file$FileValue$inputAttributes, id, mimes)),
			_List_Nil);
	});
var $mpizenberg$elm_file$FileValue$all = A2(
	$elm$core$List$foldr,
	$elm$json$Json$Decode$map2($elm$core$List$cons),
	$elm$json$Json$Decode$succeed(_List_Nil));
var $mpizenberg$elm_file$FileValue$dynamicListOf = function (itemDecoder) {
	var decodeOne = function (n) {
		return A2(
			$elm$json$Json$Decode$field,
			$elm$core$String$fromInt(n),
			itemDecoder);
	};
	var decodeN = function (n) {
		return $mpizenberg$elm_file$FileValue$all(
			A2(
				$elm$core$List$map,
				decodeOne,
				A2($elm$core$List$range, 0, n - 1)));
	};
	return A2(
		$elm$json$Json$Decode$andThen,
		decodeN,
		A2($elm$json$Json$Decode$field, 'length', $elm$json$Json$Decode$int));
};
var $mpizenberg$elm_file$FileValue$errorFile = {
	hJ: $elm$time$Time$millisToPosix(0),
	fB: 'text/plain',
	cW: 'If you see this file, please report an error at https://github.com/mpizenberg/elm-files/issues',
	l: 0,
	eP: $elm$json$Json$Encode$null
};
var $mpizenberg$elm_file$FileValue$multipleFilesDecoder = A2(
	$elm$json$Json$Decode$andThen,
	function (files) {
		if (files.b) {
			var file = files.a;
			var list = files.b;
			return $elm$json$Json$Decode$succeed(
				_Utils_Tuple2(file, list));
		} else {
			return $elm$json$Json$Decode$succeed(
				_Utils_Tuple2($mpizenberg$elm_file$FileValue$errorFile, _List_Nil));
		}
	},
	$mpizenberg$elm_file$FileValue$dynamicListOf($mpizenberg$elm_file$FileValue$decoder));
var $mpizenberg$elm_file$FileValue$filesOn = F2(
	function (event, msgTag) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (_v0) {
					var file = _v0.a;
					var list = _v0.b;
					return {
						bg: A2(msgTag, file, list),
						fQ: true,
						ew: true
					};
				},
				A2(
					$elm$json$Json$Decode$at,
					_List_fromArray(
						['dataTransfer', 'files']),
					$mpizenberg$elm_file$FileValue$multipleFilesDecoder)));
	});
var $mpizenberg$elm_file$FileValue$onWithId = F3(
	function (id, event, msg) {
		return A2(
			$elm$html$Html$Events$custom,
			event,
			A2(
				$elm$json$Json$Decode$map,
				function (message) {
					return {bg: message, fQ: true, ew: true};
				},
				A2(
					$elm$json$Json$Decode$andThen,
					function (targetId) {
						return _Utils_eq(targetId, id) ? $elm$json$Json$Decode$succeed(msg) : $elm$json$Json$Decode$fail('Wrong target');
					},
					A2(
						$elm$json$Json$Decode$at,
						_List_fromArray(
							['target', 'id']),
						$elm$json$Json$Decode$string))));
	});
var $mpizenberg$elm_file$FileValue$onDrop = function (config) {
	return A2(
		$elm$core$List$cons,
		A2($mpizenberg$elm_file$FileValue$filesOn, 'dragover', config.aQ),
		A2(
			$elm$core$List$cons,
			A2($mpizenberg$elm_file$FileValue$filesOn, 'drop', config.aO),
			function () {
				var _v0 = config.aP;
				if (_v0.$ === 1) {
					return _List_Nil;
				} else {
					var id = _v0.a.t;
					var msg = _v0.a.h2;
					return _List_fromArray(
						[
							$elm$html$Html$Attributes$id(id),
							A3($mpizenberg$elm_file$FileValue$onWithId, id, 'dragleave', msg)
						]);
				}
			}()));
};
var $author$project$Components$Molecules$FileInput$input = function (model) {
	return A2(
		$elm$html$Html$label,
		_Utils_ap(
			_List_fromArray(
				[
					$elm$html$Html$Attributes$for(model.t),
					$author$project$Libs$Html$Attributes$role('button'),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md text-gray-600',
							$author$project$Libs$Tailwind$hover(
							_List_fromArray(
								['border-primary-400 text-primary-600'])),
							$author$project$Libs$Tailwind$focus_ring_within_600($author$project$Libs$Tailwind$primary)
						]))
				]),
			$mpizenberg$elm_file$FileValue$onDrop(
				{aO: model.aO, aP: model.aP, aQ: model.aQ})),
		_List_fromArray(
			[
				model.bI,
				A3($mpizenberg$elm_file$FileValue$hiddenInputSingle, model.t, model.bh, model.bl)
			]));
};
var $author$project$Components$Molecules$FileInput$schemaFile = F3(
	function (htmlId, onSelect, noop) {
		return $author$project$Components$Molecules$FileInput$input(
			{
				bI: A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['space-y-1 text-center']))
						]),
					_List_fromArray(
						[
							A2($author$project$Components$Atoms$Icon$outline2x, 80, 'mx-auto'),
							A2(
							$elm$html$Html$p,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['text-primary-600']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Upload your SQL schema')
										])),
									$elm$html$Html$text(' or drag and drop')
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['text-xs']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('.sql file only')
								]))
						])),
				t: htmlId,
				bh: _List_fromArray(
					['.sql']),
				aO: F2(
					function (f, _v0) {
						return onSelect(f);
					}),
				aP: $elm$core$Maybe$Nothing,
				aQ: F2(
					function (_v1, _v2) {
						return noop;
					}),
				bl: onSelect
			});
	});
var $author$project$Components$Atoms$Icon$XCircle = 228;
var $author$project$Components$Atoms$Link$build = F5(
	function (colorStyles, sizeStyles, color, attrs, content) {
		return A2(
			$elm$html$Html$a,
			_Utils_ap(
				attrs,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								$author$project$Components$Atoms$Button$commonStyles(color),
								colorStyles(color),
								sizeStyles
							]))
					])),
			content);
	});
var $author$project$Components$Atoms$Button$light = function (color) {
	return $author$project$Libs$Tailwind$batch(
		_List_fromArray(
			[
				'border-transparent',
				$author$project$Libs$Tailwind$text_800(color),
				$author$project$Libs$Tailwind$bg_50(color),
				$author$project$Libs$Tailwind$hover(
				_List_fromArray(
					[
						$author$project$Libs$Tailwind$bg_100(color)
					])),
				$author$project$Libs$Tailwind$disabled(
				_List_fromArray(
					[
						'cursor-not-allowed',
						$author$project$Libs$Tailwind$bg_50(color),
						$author$project$Libs$Tailwind$text_300(color)
					]))
			]));
};
var $author$project$Components$Atoms$Button$size2 = 'px-3 py-2 text-sm leading-4 rounded-md';
var $author$project$Components$Atoms$Link$light2 = A2($author$project$Components$Atoms$Link$build, $author$project$Components$Atoms$Button$light, $author$project$Components$Atoms$Button$size2);
var $author$project$Services$SqlSourceUpload$sendErrorReport = F2(
	function (parseErrors, schemaErrors) {
		var subject = '[Azimutt] SQL Parser error report';
		var email = $author$project$Conf$constants.gz;
		var body = 'Hi Azimutt team!\nGot some errors using the Azimutt SQL parser.\nHere are the details...' + (($elm$core$List$isEmpty(parseErrors) ? '' : ('\n\n\n------------------------------------------------------------- Parsing errors -------------------------------------------------------------\n\n' + A2(
			$elm$core$String$join,
			'\n\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, errors) {
						return $elm$core$String$fromInt(i + 1) + ('.\n' + A2($elm$core$String$join, '\n', errors));
					}),
				parseErrors)))) + ($elm$core$List$isEmpty(schemaErrors) ? '' : ('\n\n\n------------------------------------------------------------- Schema errors -------------------------------------------------------------\n\n' + A2(
			$elm$core$String$join,
			'\n\n',
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (i, errors) {
						return $elm$core$String$fromInt(i + 1) + ('.\n' + A2($elm$core$String$join, '\n', errors));
					}),
				schemaErrors)))));
		return 'mailto:' + (email + ('?subject=' + ($elm$url$Url$percentEncode(subject) + ('&body=' + $elm$url$Url$percentEncode(body)))));
	});
var $author$project$Libs$Result$toErrMaybe = function (result) {
	if (!result.$) {
		return $elm$core$Maybe$Nothing;
	} else {
		var e = result.a;
		return $elm$core$Maybe$Just(e);
	}
};
var $author$project$Components$Molecules$Alert$alertActions = function (actions) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mt-4')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('-mx-2 -my-1.5 flex')
					]),
				actions)
			]));
};
var $author$project$Components$Molecules$Alert$withActions = F2(
	function (model, description) {
		return $author$project$Components$Molecules$Alert$alert(
			{
				n: model.n,
				bI: _List_fromArray(
					[
						A2($author$project$Components$Molecules$Alert$alertTitle, model.n, model.aj),
						A2($author$project$Components$Molecules$Alert$alertDescription, model.n, description),
						$author$project$Components$Molecules$Alert$alertActions(model.dn)
					]),
				D: model.D
			});
	});
var $author$project$Services$SqlSourceUpload$viewErrorAlert = function (model) {
	var parseErrors = A2(
		$elm$core$Maybe$withDefault,
		_List_Nil,
		A2(
			$elm$core$Maybe$map,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$Dict$values,
				$elm$core$List$filterMap(
					function (_v0) {
						var r = _v0.b;
						return $author$project$Libs$Result$toErrMaybe(r);
					})),
			model.an));
	return ($elm$core$List$isEmpty(parseErrors) && $elm$core$List$isEmpty(model.aB)) ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mt-6')
			]),
		_List_fromArray(
			[
				A2(
				$author$project$Components$Molecules$Alert$withActions,
				{
					dn: _List_fromArray(
						[
							A3(
							$author$project$Components$Atoms$Link$light2,
							$author$project$Libs$Tailwind$red,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$href(
									A2($author$project$Services$SqlSourceUpload$sendErrorReport, parseErrors, model.aB))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Send error report')
								]))
						]),
					n: $author$project$Libs$Tailwind$red,
					D: 228,
					aj: 'Oh no! We had ' + ($elm$core$String$fromInt(
						$elm$core$List$length(parseErrors) + $elm$core$List$length(model.aB)) + ' errors.')
				},
				_List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Parsing every SQL dialect is not a trivial task. But every error report allows to improve it. '),
								$author$project$Libs$Html$bText('Please send it'),
								$elm$html$Html$text(', you will be able to edit it if needed to remove your private information.')
							])),
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('In the meantime, you can look at the errors and your schema and try to simplify it. Or just use it as is, only not recognized statements will be missing.')
							]))
					]))
			]));
};
var $author$project$Libs$Result$bimap = F3(
	function (onError, onSuccess, result) {
		if (!result.$) {
			var a = result.a;
			return $elm$core$Result$Ok(
				onSuccess(a));
		} else {
			var x = result.a;
			return $elm$core$Result$Err(
				onError(x));
		}
	});
var $author$project$Libs$Result$partition = function (list) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (result, _v0) {
				var eList = _v0.a;
				var aList = _v0.b;
				if (!result.$) {
					var a = result.a;
					return _Utils_Tuple2(
						eList,
						A2($elm$core$List$cons, a, aList));
				} else {
					var e = result.a;
					return _Utils_Tuple2(
						A2($elm$core$List$cons, e, eList),
						aList);
				}
			}),
		_Utils_Tuple2(_List_Nil, _List_Nil),
		list);
};
var $author$project$Services$SqlSourceUpload$viewParseError = F2(
	function (statement, errors) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('text-red-500')
				]),
			A2(
				$elm$core$List$cons,
				A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Parsing error line ' + ($elm$core$String$fromInt(1 + statement.cK.hK) + ':'))
						])),
				A2(
					$elm$core$List$map,
					function (error) {
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('pl-3')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(error)
								]));
					},
					errors)));
	});
var $author$project$Services$SqlSourceUpload$viewLogsCommands = F2(
	function (statements, commands) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			function (_v3) {
				var errs = _v3.a;
				var cmds = _v3.b;
				return _Utils_eq(
					$elm$core$List$length(cmds),
					A3($author$project$Libs$Maybe$mapOrElse, $elm$core$Dict$size, 0, statements)) ? _List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('All statements were correctly parsed.')
							]))
					]) : ($elm$core$List$isEmpty(errs) ? _List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								$elm$core$String$fromInt(
									$elm$core$List$length(cmds)) + ' statements were correctly parsed.')
							]))
					]) : _Utils_ap(
					A2(
						$elm$core$List$map,
						function (_v4) {
							var s = _v4.a;
							var e = _v4.b;
							return A2($author$project$Services$SqlSourceUpload$viewParseError, s, e);
						},
						errs),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text(
									$elm$core$String$fromInt(
										$elm$core$List$length(cmds)) + (' statements were correctly parsed, ' + ($elm$core$String$fromInt(
										$elm$core$List$length(errs)) + ' were in error.')))
								]))
						])));
			}(
				$author$project$Libs$Result$partition(
					A2(
						$elm$core$List$map,
						function (_v1) {
							var _v2 = _v1.b;
							var s = _v2.a;
							var r = _v2.b;
							return A3(
								$author$project$Libs$Result$bimap,
								function (e) {
									return _Utils_Tuple2(s, e);
								},
								function (c) {
									return _Utils_Tuple2(s, c);
								},
								r);
						},
						A2(
							$elm$core$List$sortBy,
							function (_v0) {
								var i = _v0.a;
								return i;
							},
							$elm$core$Dict$toList(commands))))));
	});
var $author$project$Services$SqlSourceUpload$viewSchemaError = function (errors) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('text-red-500')
			]),
		A2(
			$elm$core$List$cons,
			A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Schema error:')
					])),
			A2(
				$elm$core$List$map,
				function (error) {
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('pl-3')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(error)
							]));
				},
				errors)));
};
var $author$project$Services$SqlSourceUpload$viewLogsErrors = function (schemaErrors) {
	return $elm$core$List$isEmpty(schemaErrors) ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
		$elm$html$Html$div,
		_List_Nil,
		_Utils_ap(
			A2($elm$core$List$map, $author$project$Services$SqlSourceUpload$viewSchemaError, schemaErrors),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(
								$elm$core$List$length(schemaErrors)) + ' statements can\'t be added to the schema.')
						]))
				])));
};
var $author$project$Services$SqlSourceUpload$Toggle = $elm$core$Basics$identity;
var $author$project$Services$SqlSourceUpload$UiMsg = function (a) {
	return {$: 5, a: a};
};
var $author$project$Services$SqlSourceUpload$viewLogsFile = F4(
	function (wrap, show, filename, content) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('cursor-pointer'),
							$elm$html$Html$Events$onClick(
							wrap(
								$author$project$Services$SqlSourceUpload$UiMsg('file')))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Loaded ' + (filename + '.'))
						])),
					(show === 'file') ? A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$pre,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('whitespace-pre font-mono')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(content)
								]))
						])) : A2($elm$html$Html$div, _List_Nil, _List_Nil)
				]));
	});
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $author$project$Services$SqlSourceUpload$viewLogsLines = F3(
	function (wrap, show, lines) {
		var count = $elm$core$List$length(lines);
		var pad = function () {
			var size = $elm$core$String$length(
				$elm$core$String$fromInt(count));
			return function (i) {
				return A3(
					$elm$core$String$padLeft,
					size,
					' ',
					$elm$core$String$fromInt(i));
			};
		}();
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('cursor-pointer'),
							$elm$html$Html$Events$onClick(
							wrap(
								$author$project$Services$SqlSourceUpload$UiMsg('lines')))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Found ' + (A2($author$project$Libs$String$pluralize, 'line', count) + ' in the file.'))
						])),
					(show === 'lines') ? A2(
					$elm$html$Html$div,
					_List_Nil,
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, l) {
								return A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('flex items-start')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$pre,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('select-none')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(
													pad(i + 1) + '. ')
												])),
											A2(
											$elm$html$Html$pre,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('whitespace-pre font-mono')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(l)
												]))
										]));
							}),
						lines)) : A2($elm$html$Html$div, _List_Nil, _List_Nil)
				]));
	});
var $author$project$Services$SqlSourceUpload$viewLogsSchema = F3(
	function (wrap, show, schema) {
		var count = $elm$core$Dict$size(schema);
		var pad = function () {
			var size = $elm$core$String$length(
				$elm$core$String$fromInt(count));
			return function (i) {
				return A3(
					$elm$core$String$padLeft,
					size,
					' ',
					$elm$core$String$fromInt(i));
			};
		}();
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('cursor-pointer'),
							$elm$html$Html$Events$onClick(
							wrap(
								$author$project$Services$SqlSourceUpload$UiMsg('tables')))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Schema built with ' + (A2($author$project$Libs$String$pluralize, 'table', count) + '.'))
						])),
					(show === 'tables') ? A2(
					$elm$html$Html$div,
					_List_Nil,
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, t) {
								return A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('flex items-start')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$pre,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('select-none')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(
													pad(i + 1) + '. ')
												])),
											A2(
											$elm$html$Html$pre,
											_List_fromArray(
												[
													$elm$html$Html$Attributes$class('whitespace-pre font-mono')
												]),
											_List_fromArray(
												[
													$elm$html$Html$text(t.E + ('.' + t.G))
												]))
										]));
							}),
						A2(
							$elm$core$List$sortBy,
							function (t) {
								return t.E + ('.' + t.G);
							},
							$elm$core$Dict$values(schema)))) : A2($elm$html$Html$div, _List_Nil, _List_Nil)
				]));
	});
var $author$project$Services$SqlSourceUpload$viewLogsStatements = F3(
	function (wrap, show, statements) {
		var count = $elm$core$Dict$size(statements);
		var pad = function () {
			var size = $elm$core$String$length(
				$elm$core$String$fromInt(count));
			return function (i) {
				return A3(
					$elm$core$String$padLeft,
					size,
					' ',
					$elm$core$String$fromInt(i));
			};
		}();
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('cursor-pointer'),
							$elm$html$Html$Events$onClick(
							wrap(
								$author$project$Services$SqlSourceUpload$UiMsg('statements')))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							'Found ' + (A2($author$project$Libs$String$pluralize, 'SQL statement', count) + '.'))
						])),
					(show === 'statements') ? A2(
					$elm$html$Html$div,
					_List_Nil,
					A2(
						$elm$core$List$map,
						function (_v0) {
							var i = _v0.a;
							var s = _v0.b;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('flex items-start')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$pre,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('select-none')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(
												pad(i + 1) + '. ')
											])),
										A2(
										$elm$html$Html$pre,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('whitespace-pre font-mono')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(
												$author$project$DataSources$SqlParser$Utils$Helpers$buildRawSql(s))
											]))
									]));
						},
						A2(
							$elm$core$List$sortBy,
							$elm$core$Tuple$first,
							$elm$core$Dict$toList(statements)))) : A2($elm$html$Html$div, _List_Nil, _List_Nil)
				]));
	});
var $author$project$Services$SqlSourceUpload$viewLogs = F3(
	function (wrap, filename, model) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-6 px-4 py-2 max-h-96 overflow-y-auto font-mono text-xs bg-gray-50 shadow rounded-lg')
				]),
			_List_fromArray(
				[
					A4($author$project$Services$SqlSourceUpload$viewLogsFile, wrap, model.jf, filename, model.cJ),
					A3(
					$author$project$Libs$Maybe$mapOrElse,
					A2($author$project$Services$SqlSourceUpload$viewLogsLines, wrap, model.jf),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					model.fy),
					A3(
					$author$project$Libs$Maybe$mapOrElse,
					A2($author$project$Services$SqlSourceUpload$viewLogsStatements, wrap, model.jf),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					model.bs),
					A3(
					$author$project$Libs$Maybe$mapOrElse,
					$author$project$Services$SqlSourceUpload$viewLogsCommands(model.bs),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					model.an),
					$author$project$Services$SqlSourceUpload$viewLogsErrors(model.aB),
					A3(
					$author$project$Libs$Maybe$mapOrElse,
					A2($author$project$Services$SqlSourceUpload$viewLogsSchema, wrap, model.jf),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					model.E)
				]));
	});
var $author$project$Services$Lenses$setOrigins = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.aS;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{aS: value});
		}));
var $author$project$Models$Project$Relation$clearOrigins = function (relations) {
	return A2($author$project$Services$Lenses$setOrigins, _List_Nil, relations);
};
var $author$project$Services$Lenses$setChecks = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.a$;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{a$: value});
		}));
var $author$project$Services$Lenses$mapChecks = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.a$;
	},
	$author$project$Services$Lenses$setChecks);
var $author$project$Services$Lenses$setColumns = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.W;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{W: value});
		}));
var $author$project$Services$Lenses$mapColumns = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.W;
	},
	$author$project$Services$Lenses$setColumns);
var $author$project$Services$Lenses$setComment = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.cz;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{cz: value});
		}));
var $author$project$Services$Lenses$mapCommentM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.cz;
	},
	$author$project$Services$Lenses$setComment);
var $author$project$Services$Lenses$setIndexes = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.ba;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{ba: value});
		}));
var $author$project$Services$Lenses$mapIndexes = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.ba;
	},
	$author$project$Services$Lenses$setIndexes);
var $author$project$Services$Lenses$setPrimaryKey = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.aT;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{aT: value});
		}));
var $author$project$Services$Lenses$mapPrimaryKeyM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.aT;
	},
	$author$project$Services$Lenses$setPrimaryKey);
var $author$project$Services$Lenses$setUniques = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.bw;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{bw: value});
		}));
var $author$project$Services$Lenses$mapUniques = A2(
	$author$project$Services$Lenses$map,
	function ($) {
		return $.bw;
	},
	$author$project$Services$Lenses$setUniques);
var $author$project$Models$Project$Table$clearOrigins = function (table) {
	return A2(
		$author$project$Services$Lenses$mapCommentM,
		$author$project$Services$Lenses$setOrigins(_List_Nil),
		A2(
			$author$project$Services$Lenses$mapChecks,
			$elm$core$List$map(
				$author$project$Services$Lenses$setOrigins(_List_Nil)),
			A2(
				$author$project$Services$Lenses$mapIndexes,
				$elm$core$List$map(
					$author$project$Services$Lenses$setOrigins(_List_Nil)),
				A2(
					$author$project$Services$Lenses$mapUniques,
					$elm$core$List$map(
						$author$project$Services$Lenses$setOrigins(_List_Nil)),
					A2(
						$author$project$Services$Lenses$mapPrimaryKeyM,
						$author$project$Services$Lenses$setOrigins(_List_Nil),
						A2(
							$author$project$Services$Lenses$mapColumns,
							$author$project$Libs$Ned$map(
								F2(
									function (_v0, c) {
										return A2(
											$author$project$Services$Lenses$mapCommentM,
											$author$project$Services$Lenses$setOrigins(_List_Nil),
											A2($author$project$Services$Lenses$setOrigins, _List_Nil, c));
									})),
							A2($author$project$Services$Lenses$setOrigins, _List_Nil, table)))))));
};
var $author$project$Models$Project$ColumnId$show = function (_v0) {
	var table = _v0.a;
	var column = _v0.b;
	return $author$project$Models$Project$TableId$show(table) + ('.' + column);
};
var $author$project$Models$Project$RelationId$show = function (_v0) {
	var src = _v0.a;
	var ref = _v0.b;
	return $author$project$Models$Project$ColumnId$show(src) + (' -> ' + $author$project$Models$Project$ColumnId$show(ref));
};
var $author$project$Services$SqlSourceUpload$viewSourceDiffItem = F2(
	function (label, items) {
		return A2(
			$elm$core$Maybe$map,
			function (_v0) {
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$author$project$Libs$Html$bText(
							A2($author$project$Libs$String$pluralizeL, label, items)),
							$elm$html$Html$text(' ('),
							A2(
							$elm$html$Html$span,
							_List_Nil,
							A2(
								$elm$core$List$intersperse,
								$elm$html$Html$text(', '),
								A2(
									$elm$core$List$map,
									function (item) {
										return A2(
											$elm$html$Html$span,
											_List_Nil,
											_List_fromArray(
												[
													$elm$html$Html$text(item)
												]));
									},
									items))),
							$elm$html$Html$text(')')
						]));
			},
			$elm$core$List$head(items));
	});
var $author$project$Libs$List$zipBy = F3(
	function (getKey, list1, list2) {
		var dict2 = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (a) {
					return _Utils_Tuple2(
						getKey(a),
						a);
				},
				list2));
		var dict1 = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (a) {
					return _Utils_Tuple2(
						getKey(a),
						a);
				},
				list1));
		var only2 = A2(
			$elm$core$List$filter,
			function (a2) {
				return !A2(
					$elm$core$Dict$member,
					getKey(a2),
					dict1);
			},
			list2);
		var _v0 = A3(
			$elm$core$List$foldr,
			F2(
				function (a1, _v1) {
					var r1 = _v1.a;
					var r = _v1.b;
					return A2(
						$elm$core$Maybe$withDefault,
						_Utils_Tuple2(
							A2($elm$core$List$cons, a1, r1),
							r),
						A2(
							$elm$core$Maybe$map,
							function (a2) {
								return _Utils_Tuple2(
									r1,
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2(a1, a2),
										r));
							},
							A2(
								$elm$core$Dict$get,
								getKey(a1),
								dict2)));
				}),
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list1);
		var only1 = _v0.a;
		var both = _v0.b;
		return _Utils_Tuple3(only1, both, only2);
	});
var $author$project$Services$SqlSourceUpload$viewSourceDiff = F2(
	function (newSource, oldSource) {
		var _v0 = A3(
			$author$project$Libs$List$zipBy,
			function ($) {
				return $.t;
			},
			$elm$core$Dict$values(oldSource.jr),
			$elm$core$Dict$values(newSource.jr));
		var removedTables = _v0.a;
		var existingTables = _v0.b;
		var newTables = _v0.c;
		var updatedTables = A2(
			$elm$core$List$filter,
			function (_v5) {
				var oldTable = _v5.a;
				var newTable = _v5.b;
				return !_Utils_eq(
					$author$project$Models$Project$Table$clearOrigins(oldTable),
					$author$project$Models$Project$Table$clearOrigins(newTable));
			},
			existingTables);
		var _v1 = A3(
			$author$project$Libs$List$zipBy,
			function ($) {
				return $.t;
			},
			oldSource.iU,
			newSource.iU);
		var removedRelations = _v1.a;
		var existingRelations = _v1.b;
		var newRelations = _v1.c;
		var updatedRelations = A2(
			$elm$core$List$filter,
			function (_v4) {
				var oldRelation = _v4.a;
				var newRelation = _v4.b;
				return !_Utils_eq(
					$author$project$Models$Project$Relation$clearOrigins(oldRelation),
					$author$project$Models$Project$Relation$clearOrigins(newRelation));
			},
			existingRelations);
		return ($author$project$Libs$List$nonEmpty(updatedTables) || ($author$project$Libs$List$nonEmpty(newTables) || ($author$project$Libs$List$nonEmpty(removedTables) || ($author$project$Libs$List$nonEmpty(updatedRelations) || ($author$project$Libs$List$nonEmpty(newRelations) || $author$project$Libs$List$nonEmpty(removedRelations)))))) ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Alert$withDescription,
					{n: $author$project$Libs$Tailwind$green, D: 43, aj: 'Source parsed, here are the changes:'},
					_List_fromArray(
						[
							A2(
							$elm$html$Html$ul,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('list-disc list-inside')
								]),
							A2(
								$elm$core$List$filterMap,
								$elm$core$Basics$identity,
								_List_fromArray(
									[
										A2(
										$author$project$Services$SqlSourceUpload$viewSourceDiffItem,
										'modified table',
										A2(
											$elm$core$List$map,
											function (_v2) {
												var t = _v2.b;
												return $author$project$Models$Project$TableId$show(t.t);
											},
											updatedTables)),
										A2(
										$author$project$Services$SqlSourceUpload$viewSourceDiffItem,
										'new table',
										A2(
											$elm$core$List$map,
											function (t) {
												return $author$project$Models$Project$TableId$show(t.t);
											},
											newTables)),
										A2(
										$author$project$Services$SqlSourceUpload$viewSourceDiffItem,
										'removed table',
										A2(
											$elm$core$List$map,
											function (t) {
												return $author$project$Models$Project$TableId$show(t.t);
											},
											removedTables)),
										A2(
										$author$project$Services$SqlSourceUpload$viewSourceDiffItem,
										'modified relation',
										A2(
											$elm$core$List$map,
											function (_v3) {
												var r = _v3.b;
												return $author$project$Models$Project$RelationId$show(r.t);
											},
											updatedRelations)),
										A2(
										$author$project$Services$SqlSourceUpload$viewSourceDiffItem,
										'new relation',
										A2(
											$elm$core$List$map,
											function (r) {
												return $author$project$Models$Project$RelationId$show(r.t);
											},
											newRelations)),
										A2(
										$author$project$Services$SqlSourceUpload$viewSourceDiffItem,
										'removed relation',
										A2(
											$elm$core$List$map,
											function (r) {
												return $author$project$Models$Project$RelationId$show(r.t);
											},
											removedRelations))
									])))
						]))
				])) : A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-3')
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Alert$withDescription,
					{n: $author$project$Libs$Tailwind$green, D: 43, aj: 'Source parsed'},
					_List_fromArray(
						[
							$elm$html$Html$text('There is no differences but you can still refresh the source to change the last updated date.')
						]))
				]));
	});
var $author$project$Components$Molecules$Divider$divider = F2(
	function (position, content) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('relative')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('absolute inset-0 flex items-center'),
							$author$project$Libs$Html$Attributes$ariaHidden(true)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('w-full border-t border-gray-300')
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['relative flex', position]))
						]),
					content)
				]));
	});
var $author$project$Components$Molecules$Divider$withLabel = function (label) {
	return A2(
		$author$project$Components$Molecules$Divider$divider,
		'justify-center',
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('px-2 bg-white text-sm text-gray-500')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(label)
					]))
			]));
};
var $author$project$Services$SqlSourceUpload$viewParsing = F2(
	function (wrap, model) {
		return A2(
			$elm$core$Maybe$withDefault,
			A2($elm$html$Html$div, _List_Nil, _List_Nil),
			A3(
				$elm$core$Maybe$map2,
				F2(
					function (parsedSchema, fileName) {
						return A2(
							$elm$html$Html$div,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('mt-6')
										]),
									_List_fromArray(
										[
											$author$project$Components$Molecules$Divider$withLabel(
											A3(
												$author$project$Libs$Maybe$mapOrElse,
												function (_v0) {
													return 'Parsed!';
												},
												'Parsing ...',
												model.ej))
										])),
									A3($author$project$Services$SqlSourceUpload$viewLogs, wrap, fileName, parsedSchema),
									$author$project$Services$SqlSourceUpload$viewErrorAlert(parsedSchema),
									A2(
									$elm$core$Maybe$withDefault,
									A2($elm$html$Html$div, _List_Nil, _List_Nil),
									A3($elm$core$Maybe$map2, $author$project$Services$SqlSourceUpload$viewSourceDiff, model.ej, model.F))
								]));
					}),
				model.c0,
				A2(
					$author$project$Libs$Maybe$orElse,
					A2(
						$elm$core$Maybe$map,
						function (u) {
							return u + ' file';
						},
						model.f1),
					A2(
						$elm$core$Maybe$map,
						function (f) {
							return f.cW + ' file';
						},
						model.da))));
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$localFileModal = F7(
	function (zone, now, titleId, source, fileName, updatedAt, model) {
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('max-w-3xl mx-6 mt-6')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mt-3',
										$author$project$Libs$Tailwind$sm(
										_List_fromArray(
											['mt-5']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h3,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$id(titleId),
										$elm$html$Html$Attributes$class('text-lg leading-6 text-center font-medium text-gray-900')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Refresh ' + (source.cW + ' source'))
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-2')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('text-sm text-gray-500')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('This source came from the '),
												$author$project$Libs$Html$bText(
												A2($author$project$Libs$DateTime$formatDate, zone, updatedAt)),
												$elm$html$Html$text(' version of '),
												$author$project$Libs$Html$bText(fileName),
												$elm$html$Html$text(
												' file (' + (A2($author$project$Libs$DateTime$human, now, updatedAt) + ').')),
												A2($elm$html$Html$br, _List_Nil, _List_Nil),
												$elm$html$Html$text('Please upload its new version to update the source.')
											]))
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('mt-3')
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Components$Molecules$FileInput$schemaFile,
								'file-upload',
								A2(
									$elm$core$Basics$composeR,
									$author$project$Services$SqlSourceUpload$SelectLocalFile,
									A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg)),
								$author$project$PagesComponents$Projects$Id_$Models$Noop('update-source-local-file'))
							])),
						function () {
						var _v0 = _Utils_Tuple2(
							source.S,
							A2(
								$elm$core$Maybe$map,
								function (_v1) {
									var s = _v1.b;
									return s.S;
								},
								model.hM));
						if (((!_v0.a.$) && (!_v0.b.$)) && (!_v0.b.a.$)) {
							var _v2 = _v0.a;
							var name1 = _v2.a;
							var updated1 = _v2.c;
							var _v3 = _v0.b.a;
							var name2 = _v3.a;
							var updated2 = _v3.c;
							return function (warnings) {
								return _Utils_eq(warnings, _List_Nil) ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$elm$html$Html$Attributes$class('mt-3')
										]),
									_List_fromArray(
										[
											A2(
											$author$project$Components$Molecules$Alert$withDescription,
											{n: $author$project$Libs$Tailwind$yellow, D: 95, aj: 'Found some strange things'},
											_List_fromArray(
												[
													A2(
													$elm$html$Html$ul,
													_List_fromArray(
														[
															$author$project$Libs$Html$Attributes$role('list'),
															$elm$html$Html$Attributes$class('list-disc list-inside')
														]),
													A2(
														$elm$core$List$map,
														function (warning) {
															return A2($elm$html$Html$li, _List_Nil, warning);
														},
														warnings))
												]))
										]));
							}(
								A2(
									$elm$core$List$filterMap,
									$elm$core$Basics$identity,
									_List_fromArray(
										[
											A2(
											$author$project$Libs$Maybe$filter,
											function (_v4) {
												return !_Utils_eq(name1, name2);
											},
											$elm$core$Maybe$Just(
												_List_fromArray(
													[
														$elm$html$Html$text('Your file name changed from '),
														$author$project$Libs$Html$bText(name1),
														$elm$html$Html$text(' to '),
														$author$project$Libs$Html$bText(name2)
													]))),
											A2(
											$author$project$Libs$Maybe$filter,
											function (_v5) {
												return A2($author$project$Libs$DateTime$greaterThan, updated2, updated1);
											},
											$elm$core$Maybe$Just(
												_List_fromArray(
													[
														$elm$html$Html$text('You file is '),
														$author$project$Libs$Html$bText('older'),
														$elm$html$Html$text(' than the previous one')
													])))
										])));
						} else {
							return A2($elm$html$Html$div, _List_Nil, _List_Nil);
						}
					}(),
						A2(
						$author$project$Services$SqlSourceUpload$viewParsing,
						A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg),
						model)
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('px-6 py-3 mt-3 flex items-center justify-between flex-row-reverse bg-gray-50')
					]),
				_List_fromArray(
					[
						A2(
						$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$primaryBtn,
						A2(
							$elm$core$Maybe$map,
							A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSourceRefresh, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg),
							model.ej),
						'Refresh'),
						$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$closeBtn
					]))
			]);
	});
var $author$project$PagesComponents$Projects$Id_$Models$PSSourceAdd = function (a) {
	return {$: 8, a: a};
};
var $author$project$Services$SqlSourceUpload$SelectRemoteFile = function (a) {
	return {$: 2, a: a};
};
var $author$project$Services$SqlSourceUpload$UpdateRemoteFile = function (a) {
	return {$: 0, a: a};
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$newSourceModal = F2(
	function (titleId, model) {
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('max-w-3xl mx-6 mt-6')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mt-3',
										$author$project$Libs$Tailwind$sm(
										_List_fromArray(
											['mt-5']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h3,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$id(titleId),
										$elm$html$Html$Attributes$class('text-lg leading-6 text-center font-medium text-gray-900')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Add a new source')
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-2')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('text-sm text-gray-500')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('A project can have several sources and they can be independently enabled or not.\n                      It\'s a great way to explore multiple database at once if you project use multiple databases.')
											]))
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('mt-3')
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Components$Molecules$FileInput$schemaFile,
								'file-upload',
								A2(
									$elm$core$Basics$composeR,
									$author$project$Services$SqlSourceUpload$SelectLocalFile,
									A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg)),
								$author$project$PagesComponents$Projects$Id_$Models$Noop('new-source-local-file'))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('my-3')
							]),
						_List_fromArray(
							[
								$author$project$Components$Molecules$Divider$withLabel('OR')
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('flex rounded-md shadow-sm')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 sm:text-sm')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Remote schema')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('text'),
										$elm$html$Html$Attributes$id('file-remote'),
										$elm$html$Html$Attributes$name('file-remote'),
										$elm$html$Html$Attributes$placeholder('https://azimutt.app/samples/gospeak.sql'),
										$elm$html$Html$Attributes$value(
										A2($elm$core$Maybe$withDefault, '', model.f1)),
										$elm$html$Html$Events$onInput(
										A2(
											$elm$core$Basics$composeR,
											$author$project$Services$SqlSourceUpload$UpdateRemoteFile,
											A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg))),
										$elm$html$Html$Events$onBlur(
										A3(
											$author$project$Libs$Maybe$mapOrElse,
											A2(
												$elm$core$Basics$composeR,
												$author$project$Services$SqlSourceUpload$SelectRemoteFile,
												A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg)),
											$author$project$PagesComponents$Projects$Id_$Models$Noop('new-source-remote-file'),
											model.f1)),
										$elm$html$Html$Attributes$class('flex-1 min-w-0 block w-full px-3 py-2 border-gray-300 rounded-none rounded-r-md sm:text-sm focus:ring-indigo-500 focus:border-indigo-500')
									]),
								_List_Nil)
							])),
						A2(
						$author$project$Services$SqlSourceUpload$viewParsing,
						A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg),
						model)
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('px-6 py-3 mt-3 flex items-center justify-between flex-row-reverse bg-gray-50')
					]),
				_List_fromArray(
					[
						A2(
						$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$primaryBtn,
						A2(
							$elm$core$Maybe$map,
							A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSourceAdd, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg),
							model.ej),
						'Add source'),
						$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$closeBtn
					]))
			]);
	});
var $author$project$Components$Atoms$Button$size5 = 'px-6 py-3 text-base rounded-md';
var $author$project$Components$Atoms$Button$primary5 = A2($author$project$Components$Atoms$Button$build, $author$project$Components$Atoms$Button$primary, $author$project$Components$Atoms$Button$size5);
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$remoteFileModal = F6(
	function (zone, now, titleId, source, fileUrl, model) {
		return _List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('max-w-3xl mx-6 mt-6')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mt-3',
										$author$project$Libs$Tailwind$sm(
										_List_fromArray(
											['mt-5']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h3,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$id(titleId),
										$elm$html$Html$Attributes$class('text-lg leading-6 text-center font-medium text-gray-900')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Refresh ' + (source.cW + ' source'))
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-2')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('text-sm text-gray-500')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('This source came from '),
												$author$project$Libs$Html$bText(fileUrl),
												$elm$html$Html$text(' which was fetched the '),
												$author$project$Libs$Html$bText(
												A2($author$project$Libs$DateTime$formatDate, zone, source.gj)),
												$elm$html$Html$text(
												' (' + (A2($author$project$Libs$DateTime$human, now, source.gj) + ').')),
												A2($elm$html$Html$br, _List_Nil, _List_Nil),
												$elm$html$Html$text('Click on the button to fetch it again now.')
											]))
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('mt-3 flex justify-center')
							]),
						_List_fromArray(
							[
								A3(
								$author$project$Components$Atoms$Button$primary5,
								$author$project$Libs$Tailwind$primary,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick(
										$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg(
											$author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg(
												$author$project$Services$SqlSourceUpload$SelectRemoteFile(fileUrl))))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Fetch file again')
									]))
							])),
						A2(
						$author$project$Services$SqlSourceUpload$viewParsing,
						A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSqlSourceMsg, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg),
						model)
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('px-6 py-3 mt-3 flex items-center justify-between flex-row-reverse bg-gray-50')
					]),
				_List_fromArray(
					[
						A2(
						$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$primaryBtn,
						A2(
							$elm$core$Maybe$map,
							A2($elm$core$Basics$composeR, $author$project$PagesComponents$Projects$Id_$Models$PSSourceRefresh, $author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg),
							model.ej),
						'Refresh'),
						$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$closeBtn
					]))
			]);
	});
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$userDefinedModal = function (titleId) {
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('max-w-3xl mx-6 mt-6')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'mt-3',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['mt-5']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h3,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(titleId),
									$elm$html$Html$Attributes$class('text-lg leading-6 text-center font-medium text-gray-900')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('This is a user source, it can\'t be refreshed!')
								]))
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('mt-3')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('A user source is a source created by a user to add some information to the project.\n                      For example relations, tables, columns or documentation that are useful and not present in the sources.\n                      So it doesn\'t make sense to refresh it (not out of sync), just edit or delete it if needed.'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$elm$html$Html$text('You should not see this, so if you came here normally, this is a bug. Please help us and '),
							A3(
							$author$project$Libs$Html$extLink,
							$author$project$Conf$constants.gu,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('link')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('report it')
								])),
							$elm$html$Html$text('. What would be useful to fix it is what steps you did to get here.')
						]))
				])),
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('px-6 py-3 mt-3 flex items-center justify-between flex-row-reverse bg-gray-50')
				]),
			_List_fromArray(
				[
					A2(
					$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$primaryBtn,
					$elm$core$Maybe$Just(
						$author$project$PagesComponents$Projects$Id_$Models$ModalClose(
							$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadClose))),
					'Close')
				]))
		]);
};
var $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$viewSourceUpload = F4(
	function (zone, now, opened, model) {
		var titleId = model.t + '-title';
		return A2(
			$author$project$Components$Molecules$Modal$modal,
			{
				t: model.t,
				ar: opened,
				b_: $author$project$PagesComponents$Projects$Id_$Models$ModalClose(
					$author$project$PagesComponents$Projects$Id_$Models$ProjectSettingsMsg($author$project$PagesComponents$Projects$Id_$Models$PSSourceUploadClose)),
				cm: titleId
			},
			A3(
				$author$project$Libs$Maybe$mapOrElse,
				function (source) {
					var _v0 = source.S;
					switch (_v0.$) {
						case 0:
							var filename = _v0.a;
							var updatedAt = _v0.c;
							return A7($author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$localFileModal, zone, now, titleId, source, filename, updatedAt, model.iC);
						case 1:
							var url = _v0.a;
							return A6($author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$remoteFileModal, zone, now, titleId, source, url, model.iC);
						default:
							return $author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$userDefinedModal(titleId);
					}
				},
				A2($author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$newSourceModal, titleId, model.iC),
				model.iC.F));
	});
var $author$project$PagesComponents$Projects$Id_$Views$viewModal = F3(
	function (zone, now, model) {
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('az-modals')
				]),
			A2(
				$elm$core$List$sortBy,
				function (_v0) {
					var id = _v0.a;
					return -A2(
						$elm$core$Maybe$withDefault,
						0,
						A2($author$project$Libs$List$indexOf, id, model.iw));
				},
				A2(
					$elm$core$List$filterMap,
					$elm$core$Basics$identity,
					_List_fromArray(
						[
							A2(
							$elm$core$Maybe$map,
							function (m) {
								return _Utils_Tuple2(
									m.t,
									A2(
										$author$project$PagesComponents$Projects$Id_$Views$Modals$Confirm$viewConfirm,
										A2($author$project$Libs$List$has, m.t, model.iw),
										m));
							},
							model.a1),
							A2(
							$elm$core$Maybe$map,
							function (m) {
								return _Utils_Tuple2(
									m.t,
									A2(
										$author$project$PagesComponents$Projects$Id_$Views$Modals$Prompt$viewPrompt,
										A2($author$project$Libs$List$has, m.t, model.iw),
										m));
							},
							model.iL),
							A2(
							$elm$core$Maybe$map,
							function (m) {
								return _Utils_Tuple2(
									m.t,
									A2(
										$author$project$PagesComponents$Projects$Id_$Views$Modals$CreateLayout$viewCreateLayout,
										A2($author$project$Libs$List$has, m.t, model.iw),
										m));
							},
							model.h9),
							A3(
							$elm$core$Maybe$map2,
							F2(
								function (e, m) {
									return _Utils_Tuple2(
										m.t,
										A4(
											$author$project$PagesComponents$Projects$Id_$Views$Modals$FindPath$viewFindPath,
											A2($author$project$Libs$List$has, m.t, model.iw),
											e.jr,
											e.dc.bM,
											m));
								}),
							model.ha,
							model.bM),
							A3(
							$elm$core$Maybe$map2,
							F2(
								function (e, m) {
									return _Utils_Tuple2(
										m.t,
										A3(
											$author$project$PagesComponents$Projects$Id_$Views$Modals$SchemaAnalysis$viewSchemaAnalysis,
											A2($author$project$Libs$List$has, m.t, model.iw),
											e.jr,
											m));
								}),
							model.ha,
							model.i4),
							A3(
							$elm$core$Maybe$map2,
							F2(
								function (e, m) {
									return _Utils_Tuple2(
										m.t,
										A3(
											$author$project$PagesComponents$Projects$Id_$Views$Modals$Sharing$viewSharing,
											A2($author$project$Libs$List$has, m.t, model.iw),
											e,
											m));
								}),
							model.ha,
							model.jc),
							A3(
							$elm$core$Maybe$map2,
							F2(
								function (e, m) {
									return _Utils_Tuple2(
										m.t,
										A4(
											$author$project$PagesComponents$Projects$Id_$Views$Modals$ProjectSettings$viewProjectSettings,
											zone,
											A2($author$project$Libs$List$has, m.t, model.iw),
											e,
											m));
								}),
							model.ha,
							model.dc),
							A2(
							$elm$core$Maybe$map,
							function (m) {
								return _Utils_Tuple2(
									m.t,
									A4(
										$author$project$PagesComponents$Projects$Id_$Views$Modals$SourceUpload$viewSourceUpload,
										zone,
										now,
										A2($author$project$Libs$List$has, m.t, model.iw),
										m));
							},
							model.jj),
							A2(
							$elm$core$Maybe$map,
							function (m) {
								return _Utils_Tuple2(
									m.t,
									A2(
										$author$project$PagesComponents$Projects$Id_$Views$Modals$Help$viewHelp,
										A2($author$project$Libs$List$has, m.t, model.iw),
										m));
							},
							model.hr)
						]))));
	});
var $elm$html$Html$footer = _VirtualDom_node('footer');
var $author$project$Components$Slices$NotFound$simple = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('min-h-full pt-16 pb-12 flex flex-col bg-white')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$main_,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'flex-grow flex flex-col justify-center max-w-7xl w-full mx-auto px-4',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['px-6'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-8']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('flex-shrink-0 flex justify-center')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$a,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$href(model.L.aN.jH),
										$elm$html$Html$Attributes$class('inline-flex')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('sr-only')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(model.L.aN.dh)
											])),
										A2(
										$elm$html$Html$img,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('h-12 w-auto'),
												$elm$html$Html$Attributes$src(model.L.aK.de),
												$elm$html$Html$Attributes$alt(model.L.aK.cr)
											]),
										_List_Nil)
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('py-16')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('text-center')
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('text-sm font-semibold text-primary-600 uppercase tracking-wide')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(model.dQ)
											])),
										A2(
										$elm$html$Html$h1,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													[
														'mt-2 text-4xl font-extrabold text-gray-900 tracking-tight',
														$author$project$Libs$Tailwind$sm(
														_List_fromArray(
															['text-5xl']))
													]))
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(model.aj)
											])),
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('mt-2 text-base text-gray-500')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(model.bg)
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('mt-6')
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$a,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$href(model.aN.jH),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															[
																'text-base font-medium text-primary-600',
																$author$project$Libs$Tailwind$hover(
																_List_fromArray(
																	['text-primary-500']))
															]))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(model.aN.dh),
														A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$author$project$Libs$Html$Attributes$ariaHidden(true)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text('→')
															]))
													]))
											]))
									]))
							]))
					])),
				A2(
				$elm$html$Html$footer,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'flex-shrink-0 max-w-7xl w-full mx-auto px-4 ',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['px-6'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-8']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$nav,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('flex justify-center space-x-4')
							]),
						A2(
							$elm$core$List$intersperse,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('inline-block border-l border-gray-300'),
										$author$project$Libs$Html$Attributes$ariaHidden(true)
									]),
								_List_Nil),
							A2(
								$elm$core$List$map,
								function (link) {
									return A2(
										$elm$html$Html$a,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$href(link.jH),
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													[
														'text-sm font-medium text-gray-500 ',
														$author$project$Libs$Tailwind$hover(
														_List_fromArray(
															['text-gray-600']))
													]))
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(link.dh)
											]));
								},
								model.dL)))
					]))
			]));
};
var $author$project$PagesComponents$Projects$Id_$Views$viewNotFound = function (conf) {
	return $author$project$Components$Slices$NotFound$simple(
		{
			L: {
				aK: {cr: 'Azimutt', de: '/logo.png'},
				aN: {
					dh: 'Azimutt',
					jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Home_)
				}
			},
			dL: _List_fromArray(
				[
					{dh: 'Contact Support', jH: $author$project$Conf$constants.gy},
					{dh: 'Twitter', jH: $author$project$Conf$constants.gD},
					{
					dh: 'Blog',
					jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Blog)
				}
				]),
			dQ: '404 error',
			aN: conf.eq ? {
				dh: 'Go back to dashboard',
				jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
			} : {dh: 'Visit Azimutt', jH: $author$project$Conf$constants.gE},
			bg: 'Sorry, we couldn\'t find the project you’re looking for.',
			aj: 'Project not found.'
		});
};
var $author$project$Libs$Html$Attributes$ariaLive = function (text) {
	return A2($elm$html$Html$Attributes$attribute, 'aria-live', text);
};
var $author$project$Components$Molecules$Toast$toast = F2(
	function (content, isOpen) {
		var toastBlock = isOpen ? $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'transition ease-in duration-100 opacity-100 transform translate-y-0',
					$author$project$Libs$Tailwind$sm(
					_List_fromArray(
						['translate-x-2']))
				])) : $author$project$Libs$Tailwind$batch(
			_List_fromArray(
				[
					'transition ease-out duration-300 opacity-0 transform translate-y-2 pointer-events-none',
					$author$project$Libs$Tailwind$sm(
					_List_fromArray(
						['translate-y-0 translate-x-0']))
				]));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden', toastBlock]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('p-4')
						]),
					_List_fromArray(
						[content]))
				]));
	});
var $author$project$Components$Molecules$Toast$simple = F3(
	function (onClose, isOpen, model) {
		return A2(
			$author$project$Components$Molecules$Toast$toast,
			A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('flex items-start')
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('flex-shrink-0')
							]),
						_List_fromArray(
							[
								A2(
								$author$project$Components$Atoms$Icon$outline,
								model.D,
								$author$project$Libs$Tailwind$text_400(model.n))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('ml-3 w-0 flex-1 pt-0.5')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('text-sm font-medium text-gray-900')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(model.aj)
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class('mt-1 text-sm text-gray-500')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(model.bg)
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('ml-4 flex-shrink-0 flex')
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Events$onClick(onClose),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'bg-white rounded-md inline-flex text-gray-400',
												$author$project$Libs$Tailwind$hover(
												_List_fromArray(
													['text-gray-500'])),
												$author$project$Libs$Tailwind$focus_ring_500($author$project$Libs$Tailwind$primary)
											]))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('sr-only')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('Close')
											])),
										A2($author$project$Components$Atoms$Icon$solid, 227, '')
									]))
							]))
					])),
			isOpen);
	});
var $author$project$Components$Molecules$Toast$render = F2(
	function (onClose, model) {
		var _v0 = model.bI;
		var content = _v0;
		return _Utils_Tuple2(
			model.bU,
			A3($author$project$Components$Molecules$Toast$simple, onClose, model.ar, content));
	});
var $author$project$Components$Molecules$Toast$container = F2(
	function (toasts, close) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$ariaLive('assertive'),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'fixed inset-0 flex items-end px-4 py-6 z-max pointer-events-none',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['p-6 items-end']))
						]))
				]),
			_List_fromArray(
				[
					A3(
					$elm$html$Html$Keyed$node,
					'div',
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'w-full flex flex-col items-center space-y-4',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['items-start']))
								]))
						]),
					A2(
						$elm$core$List$map,
						function (t) {
							return A2(
								$author$project$Components$Molecules$Toast$render,
								close(t.bU),
								t);
						},
						toasts))
				]));
	});
var $author$project$PagesComponents$Projects$Id_$Views$viewToasts = function (toasts) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('az-toasts')
			]),
		_List_fromArray(
			[
				A2($author$project$Components$Molecules$Toast$container, toasts, $author$project$PagesComponents$Projects$Id_$Models$ToastHide)
			]));
};
var $author$project$PagesComponents$Projects$Id_$Views$viewProject = F2(
	function (shared, model) {
		return _List_fromArray(
			[
				model.hL ? A3(
				$author$project$Libs$Maybe$mapOrElse,
				A2($author$project$PagesComponents$Projects$Id_$Views$viewApp, model, 'app'),
				$author$project$PagesComponents$Projects$Id_$Views$viewNotFound(model.B),
				model.ha) : $author$project$Components$Atoms$Loader$fullScreen,
				A4($elm$html$Html$Lazy$lazy3, $author$project$PagesComponents$Projects$Id_$Views$viewModal, shared.jL, shared.ii, model),
				A2($elm$html$Html$Lazy$lazy, $author$project$PagesComponents$Projects$Id_$Views$viewToasts, model.aW),
				A2($elm$html$Html$Lazy$lazy, $author$project$PagesComponents$Projects$Id_$Views$viewContextMenu, model.gW)
			]);
	});
var $author$project$PagesComponents$Projects$Id_$Views$view = F2(
	function (shared, model) {
		return {
			eV: A2($author$project$PagesComponents$Projects$Id_$Views$viewProject, shared, model),
			aj: A3(
				$author$project$Libs$Maybe$mapOrElse,
				function (e) {
					return e.bm.cW + ' - Azimutt';
				},
				'Azimutt - Explore your database schema',
				model.ha)
		};
	});
var $author$project$Pages$Embed$page = F2(
	function (shared, req) {
		return $author$project$Page$element(
			{
				Y: $author$project$Pages$Embed$init(req.fU),
				ab: $author$project$PagesComponents$Projects$Id_$Subscriptions$subscriptions,
				ac: A3(
					$author$project$PagesComponents$Projects$Id_$Updates$update,
					$elm$core$Maybe$Nothing,
					A2($elm$core$Dict$get, 'layout', req.fU),
					shared.ii),
				eQ: $author$project$PagesComponents$Projects$Id_$Views$view(shared)
			});
	});
var $author$project$Ports$LoadProjects = {$: 8};
var $author$project$Ports$loadProjects = $author$project$Ports$messageToJs($author$project$Ports$LoadProjects);
var $author$project$Pages$Home_$init = _Utils_Tuple2(
	{b5: _List_Nil},
	$elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				$author$project$Ports$setClasses(
				{eV: '', hx: ''}),
				$author$project$Ports$trackPage('home'),
				$author$project$Ports$loadProjects
			])));
var $author$project$PagesComponents$Home_$Models$JsMessage = $elm$core$Basics$identity;
var $author$project$Pages$Home_$subscriptions = function (_v0) {
	return $author$project$Ports$onJsMessage($elm$core$Basics$identity);
};
var $author$project$Pages$Home_$handleJsMessage = F2(
	function (msg, model) {
		if (msg.$ === 1) {
			var _v1 = msg.a;
			var projects = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						b5: A2(
							$elm$core$List$sortBy,
							function (p) {
								return -$elm$time$Time$posixToMillis(p.gj);
							},
							projects)
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Home_$update = F2(
	function (msg, model) {
		var message = msg;
		return A2($author$project$Pages$Home_$handleJsMessage, message, model);
	});
var $author$project$Components$Atoms$Icon$ArrowCircleDown = 4;
var $author$project$Components$Atoms$Icon$ColorSwatch = 64;
var $author$project$Components$Atoms$Icon$DocumentSearch = 85;
var $author$project$Components$Slices$FeatureSideBySide$Left = 0;
var $author$project$Components$Atoms$Icon$Map = 134;
var $author$project$Components$Slices$FeatureSideBySide$Right = 1;
var $author$project$Components$Atoms$Icon$ShieldCheck = 183;
var $author$project$Components$Atoms$Icon$Sparkles = 189;
var $author$project$Components$Slices$Hero$backgroundImageSlice = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['relative']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							['absolute inset-x-0 bottom-0 h-1/2']))
					]),
				_List_Nil),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'max-w-7xl mx-auto',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['px-6'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-8']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'relative shadow-xl',
										$author$project$Libs$Tailwind$sm(
										_List_fromArray(
											['rounded-2xl overflow-hidden']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['absolute inset-0']))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$img,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$src(model.T.de),
												$elm$html$Html$Attributes$alt(model.T.cr),
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['h-full w-full object-cover']))
											]),
										_List_Nil),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['absolute inset-0 bg-gradient-to-r from-green-200 to-indigo-700 mix-blend-multiply']))
											]),
										_List_Nil)
									])),
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'relative px-4 py-16',
												$author$project$Libs$Tailwind$sm(
												_List_fromArray(
													['px-6 py-24'])),
												$author$project$Libs$Tailwind$lg(
												_List_fromArray(
													['py-32 px-8']))
											]))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$h1,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													[
														'text-4xl font-extrabold tracking-tight',
														$author$project$Libs$Tailwind$sm(
														_List_fromArray(
															['text-5xl'])),
														$author$project$Libs$Tailwind$lg(
														_List_fromArray(
															['text-6xl']))
													]))
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															['block text-white']))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(model.aj)
													]))
											])),
										A2(
										$elm$html$Html$p,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['mt-6 max-w-lg text-xl text-indigo-100']))
											]),
										model.bI),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['mt-10']))
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$div,
												_List_fromArray(
													[
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															[
																'space-y-4',
																$author$project$Libs$Tailwind$sm(
																_List_fromArray(
																	['space-y-0 inline-grid grid-cols-1 gap-5']))
															]))
													]),
												_List_fromArray(
													[model.gY]))
											]))
									]))
							]))
					]))
			]));
};
var $author$project$Components$Slices$FeatureGrid$card = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['pt-6']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							['flow-root bg-gray-50 rounded-lg px-6 pb-8']))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['-mt-6']))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$html$Html$span,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['inline-flex items-center justify-center p-3 rounded-md shadow-lg bg-gradient-to-r from-green-600 to-indigo-600']))
											]),
										_List_fromArray(
											[
												A2($author$project$Components$Atoms$Icon$outline, model.D, 'text-white')
											]))
									])),
								A2(
								$elm$html$Html$h3,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['mt-8 text-lg font-medium text-gray-900 tracking-tight']))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(model.aj)
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['mt-5 text-base text-gray-500']))
									]),
								model.cE)
							]))
					]))
			]));
};
var $author$project$Components$Slices$FeatureGrid$cardSlice = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'relative bg-white py-16',
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['py-24'])),
						$author$project$Libs$Tailwind$lg(
						_List_fromArray(
							['py-32']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'mx-auto max-w-md px-4 text-center',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['max-w-3xl px-6'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-8 max-w-7xl']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h2,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['text-base font-semibold tracking-wider uppercase bg-gradient-to-r from-green-600 to-indigo-600 bg-clip-text text-transparent']))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(model.dQ)
							])),
						A2(
						$elm$html$Html$p,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mt-2 text-3xl font-extrabold text-gray-900 tracking-tight',
										$author$project$Libs$Tailwind$sm(
										_List_fromArray(
											['text-4xl']))
									]))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(model.aj)
							])),
						A2(
						$elm$html$Html$p,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['mt-5 max-w-prose mx-auto text-xl text-gray-500']))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(model.cE)
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['mt-12']))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'grid grid-cols-1 gap-8',
												$author$project$Libs$Tailwind$sm(
												_List_fromArray(
													['grid-cols-2'])),
												$author$project$Libs$Tailwind$lg(
												_List_fromArray(
													['grid-cols-3']))
											]))
									]),
								A2($elm$core$List$map, $author$project$Components$Slices$FeatureGrid$card, model.du))
							]))
					]))
			]));
};
var $elm$html$Html$dd = _VirtualDom_node('dd');
var $elm$html$Html$dt = _VirtualDom_node('dt');
var $author$project$Components$Molecules$Feature$checked = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['relative']))
			]),
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					$elm$core$Maybe$Just(
					A2(
						$elm$html$Html$dt,
						_List_Nil,
						_List_fromArray(
							[
								A2($author$project$Components$Atoms$Icon$outline, 42, 'absolute text-green-500'),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['ml-9 text-lg leading-6 font-medium text-gray-900']))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(model.aj)
									]))
							]))),
					A2(
					$elm$core$Maybe$map,
					function (desc) {
						return A2(
							$elm$html$Html$dd,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['mt-2 ml-9 text-base text-gray-500']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(desc)
								]));
					},
					model.cE)
				])));
};
var $author$project$Components$Slices$FeatureSideBySide$imageLeft = function (image) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'mt-12',
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['mt-16'])),
						$author$project$Libs$Tailwind$lg(
						_List_fromArray(
							['col-start-1']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'pr-4 -ml-48',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['pr-6'])),
								$author$project$Libs$Tailwind$md(
								_List_fromArray(
									['-ml-16'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-0 m-0 relative h-full']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$img,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'w-full rounded-xl shadow-xl ring-1 ring-black ring-opacity-5',
										$author$project$Libs$Tailwind$lg(
										_List_fromArray(
											['absolute right-0 h-full w-auto max-w-none']))
									])),
								$elm$html$Html$Attributes$src(image.de),
								$elm$html$Html$Attributes$alt(image.cr)
							]),
						_List_Nil)
					]))
			]));
};
var $author$project$Components$Slices$FeatureSideBySide$imageRight = function (image) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'mt-12',
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['mt-16'])),
						$author$project$Libs$Tailwind$lg(
						_List_fromArray(
							['col-start-2']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'pl-4 -mr-48',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['pl-6'])),
								$author$project$Libs$Tailwind$md(
								_List_fromArray(
									['-mr-16'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-0 m-0 relative h-full']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$img,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'w-full rounded-xl shadow-xl ring-1 ring-black ring-opacity-5',
										$author$project$Libs$Tailwind$lg(
										_List_fromArray(
											['absolute left-0 h-full w-auto max-w-none']))
									])),
								$elm$html$Html$Attributes$src(image.de),
								$elm$html$Html$Attributes$alt(image.cr)
							]),
						_List_Nil)
					]))
			]));
};
var $author$project$Components$Slices$FeatureSideBySide$featureCta = function (cta) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['mt-6']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$a,
				_Utils_ap(
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(cta.jH),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'inline-flex px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-green-600 to-indigo-600',
									$author$project$Libs$Tailwind$hover(
									_List_fromArray(
										['text-white from-green-700 to-indigo-700']))
								]))
						]),
					A3($author$project$Libs$Maybe$mapOrElse, $author$project$Libs$Html$Attributes$track, _List_Nil, cta.gf)),
				_List_fromArray(
					[
						$elm$html$Html$text(cta.dh)
					]))
			]));
};
var $author$project$Components$Slices$FeatureSideBySide$featureDescription = function (d) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['mt-6']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$h2,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							['text-3xl font-extrabold tracking-tight text-gray-900']))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(d.aj)
					])),
				A2(
				$elm$html$Html$p,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							['mt-4 text-lg text-gray-500']))
					]),
				d.bI)
			]));
};
var $author$project$Components$Slices$FeatureSideBySide$featureIcon = function (icon) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['h-12 w-12 rounded-md flex items-center justify-center bg-gradient-to-r from-green-600 to-indigo-600']))
			]),
		_List_fromArray(
			[
				A2($author$project$Components$Atoms$Icon$outline, icon, 'text-white')
			]));
};
var $elm$html$Html$blockquote = _VirtualDom_node('blockquote');
var $author$project$Components$Slices$FeatureSideBySide$featureQuote = function (quote) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['mt-8 border-t border-gray-200 pt-6']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$blockquote,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['text-base text-gray-500']))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('“' + (quote.dh + '”'))
									]))
							])),
						A2(
						$elm$html$Html$footer,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['mt-3']))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['flex items-center space-x-3']))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['flex-shrink-0']))
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$img,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$src(quote.cs.de),
														$elm$html$Html$Attributes$alt(quote.cs.cr),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															['h-6 w-6 rounded-full']))
													]),
												_List_Nil)
											])),
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['text-base font-medium text-gray-700']))
											]),
										_List_fromArray(
											[
												$elm$html$Html$text(quote.dq)
											]))
									]))
							]))
					]))
			]));
};
var $author$project$Components$Slices$FeatureSideBySide$details = F2(
	function (position, model) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'px-4 max-w-xl mx-auto',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['px-6'])),
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								[
									'py-32 max-w-none mx-0 px-0',
									A3($author$project$Libs$Bool$cond, position === 1, 'col-start-1', 'col-start-2')
								]))
						]))
				]),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2($elm$core$Maybe$map, $author$project$Components$Slices$FeatureSideBySide$featureIcon, model.D),
						A2(
						$elm$core$Maybe$map,
						$author$project$Components$Slices$FeatureSideBySide$featureDescription,
						$elm$core$Maybe$Just(model.cE)),
						A2($elm$core$Maybe$map, $author$project$Components$Slices$FeatureSideBySide$featureCta, model.gY),
						A2($elm$core$Maybe$map, $author$project$Components$Slices$FeatureSideBySide$featureQuote, model.bn)
					])));
	});
var $author$project$Components$Slices$FeatureSideBySide$slice = F3(
	function (model, buildImageLeft, buildImageRight) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['pb-32 relative overflow-hidden']))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['mx-auto max-w-7xl px-8 grid grid-cols-2 grid-flow-col-dense gap-24']))
								]))
						]),
					_List_fromArray(
						[
							A2($author$project$Components$Slices$FeatureSideBySide$details, model.a7, model),
							A4($author$project$Libs$Bool$cond, !model.a7, buildImageLeft, buildImageRight, model.dV)
						]))
				]));
	});
var $author$project$Components$Slices$FeatureSideBySide$imageSlice = function (model) {
	return A3($author$project$Components$Slices$FeatureSideBySide$slice, model, $author$project$Components$Slices$FeatureSideBySide$imageLeft, $author$project$Components$Slices$FeatureSideBySide$imageRight);
};
var $author$project$Components$Slices$FeatureSideBySide$imageLeftSwap = F2(
	function (swap, base) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'mt-12',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['mt-16'])),
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['col-start-1']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'pr-4 -ml-48',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['pr-6'])),
									$author$project$Libs$Tailwind$md(
									_List_fromArray(
										['-ml-16'])),
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['px-0 m-0 relative h-full']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('img-swipe')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$img,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'w-full rounded-xl shadow-xl ring-1 ring-black ring-opacity-5',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['absolute right-0 h-full w-auto max-w-none']))
												])),
											$elm$html$Html$Attributes$src(base.de),
											$elm$html$Html$Attributes$alt(base.cr),
											$elm$html$Html$Attributes$class('img-default')
										]),
									_List_Nil),
									A2(
									$elm$html$Html$img,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'w-full rounded-xl shadow-xl ring-1 ring-black ring-opacity-5',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['absolute right-0 h-full w-auto max-w-none']))
												])),
											$elm$html$Html$Attributes$src(swap.de),
											$elm$html$Html$Attributes$alt(swap.cr),
											$elm$html$Html$Attributes$class('img-hover')
										]),
									_List_Nil)
								]))
						]))
				]));
	});
var $author$project$Components$Slices$FeatureSideBySide$imageRightSwap = F2(
	function (swap, base) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'mt-12',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['mt-16'])),
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['col-start-2']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'pl-4 -mr-48',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['pl-6'])),
									$author$project$Libs$Tailwind$md(
									_List_fromArray(
										['-mr-16'])),
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['px-0 m-0 relative h-full']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('img-swipe')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$img,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'w-full rounded-xl shadow-xl ring-1 ring-black ring-opacity-5',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['absolute left-0 h-full w-auto max-w-none']))
												])),
											$elm$html$Html$Attributes$src(base.de),
											$elm$html$Html$Attributes$alt(base.cr),
											$elm$html$Html$Attributes$class('img-default')
										]),
									_List_Nil),
									A2(
									$elm$html$Html$img,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'w-full rounded-xl shadow-xl ring-1 ring-black ring-opacity-5',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['absolute left-0 h-full w-auto max-w-none']))
												])),
											$elm$html$Html$Attributes$src(swap.de),
											$elm$html$Html$Attributes$alt(swap.cr),
											$elm$html$Html$Attributes$class('img-hover')
										]),
									_List_Nil)
								]))
						]))
				]));
	});
var $author$project$Components$Slices$FeatureSideBySide$imageSwapSlice = F2(
	function (swap, model) {
		return A3(
			$author$project$Components$Slices$FeatureSideBySide$slice,
			model,
			$author$project$Components$Slices$FeatureSideBySide$imageLeftSwap(swap),
			$author$project$Components$Slices$FeatureSideBySide$imageRightSwap(swap));
	});
var $author$project$Track$openAppCta = function (source) {
	return {
		g6: _List_fromArray(
			[
				_Utils_Tuple2('source', source)
			]),
		e6: true,
		cW: 'open-app-cta'
	};
};
var $author$project$Components$Slices$Cta$slice = function (url) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['bg-white']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'max-w-4xl mx-auto py-16 px-4',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['px-6 py-24'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['max-w-7xl px-8 flex items-center justify-between']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h2,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['text-4xl font-extrabold tracking-tight text-gray-900']))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['block']))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Ready to explore your SQL schema?')
									]))
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'mt-8 flex',
										$author$project$Libs$Tailwind$lg(
										_List_fromArray(
											['mt-0 flex-shrink-0']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$a,
								_Utils_ap(
									_List_fromArray(
										[
											$elm$html$Html$Attributes$href(url),
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'flex items-center justify-center px-5 py-3 h-14 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-green-600 to-indigo-600',
													$author$project$Libs$Tailwind$hover(
													_List_fromArray(
														['text-white from-green-700 to-indigo-700']))
												]))
										]),
									$author$project$Libs$Html$Attributes$track(
										$author$project$Track$openAppCta('home-cta'))),
								_List_fromArray(
									[
										$elm$html$Html$text('Explore now!')
									])),
								A3(
								$author$project$Libs$Html$extLink,
								$author$project$Conf$constants.gB,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'flex ml-3 items-center justify-center px-5 py-3 h-14 border border-transparent text-base font-medium rounded-md shadow-sm text-indigo-800 bg-indigo-50',
												$author$project$Libs$Tailwind$hover(
												_List_fromArray(
													['text-indigo-800 bg-indigo-100']))
											]))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text('Learn more')
									]))
							]))
					]))
			]));
};
var $author$project$Components$Atoms$Link$white5 = A2($author$project$Components$Atoms$Link$build, $author$project$Components$Atoms$Button$white, $author$project$Components$Atoms$Button$size5);
var $author$project$PagesComponents$Home_$View$viewHome = function (model) {
	var heroCta = A3(
		$author$project$Libs$Maybe$mapOrElse,
		function (p) {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$author$project$Components$Atoms$Link$white5,
						$author$project$Libs$Tailwind$indigo,
						_Utils_ap(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$href(
									$author$project$Gen$Route$toHref(
										$author$project$Gen$Route$Projects__Id_(
											{t: p.t})))
								]),
							$author$project$Libs$Html$Attributes$track(
								$author$project$Track$openAppCta('last-project'))),
						_List_fromArray(
							[
								$elm$html$Html$text('Explore ' + p.cW)
							])),
						A3(
						$author$project$Components$Atoms$Link$white5,
						$author$project$Libs$Tailwind$indigo,
						_Utils_ap(
							_List_fromArray(
								[
									$elm$html$Html$Attributes$href(
									$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['ml-3']))
								]),
							$author$project$Libs$Html$Attributes$track(
								$author$project$Track$openAppCta('dashboard'))),
						_List_fromArray(
							[
								$elm$html$Html$text('Open Dashboard')
							]))
					]));
		},
		A3(
			$author$project$Components$Atoms$Link$white5,
			$author$project$Libs$Tailwind$indigo,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$Attributes$href(
						$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects))
					]),
				$author$project$Libs$Html$Attributes$track(
					$author$project$Track$openAppCta('home-hero'))),
			_List_fromArray(
				[
					$elm$html$Html$text('Explore your schema')
				])),
		$elm$core$List$head(model.b5));
	return _List_fromArray(
		[
			$author$project$PagesComponents$Helpers$publicHeader,
			$author$project$Components$Slices$Hero$backgroundImageSlice(
			{
				T: {cr: 'A compass on a map', de: '/assets/images/background_hero.jpeg'},
				bI: _List_fromArray(
					[
						$author$project$Libs$Html$bText('Did you ever find yourself lost in your database?'),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$author$project$Libs$Html$bText('Discover how Azimutt will help you understand it.')
					]),
				gY: heroCta,
				aj: 'Explore your SQL database schema'
			}),
			A2(
			$author$project$Components$Slices$FeatureSideBySide$imageSwapSlice,
			{cr: 'Gospeak.io schema by Azimutt', de: '/assets/images/gospeak-schema-full.png'},
			{
				gY: $elm$core$Maybe$Just(
					{
						dh: 'Let\'s try it!',
						gf: $elm$core$Maybe$Just(
							$author$project$Track$openAppCta('home-explore-section')),
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
					}),
				cE: {
					bI: _List_fromArray(
						[
							$elm$html$Html$text('Not everyone has the opportunity to work on brand new application where you create everything, including the data model.\n                          Many developers evolve and maintain existing applications with an already big schema, sometimes more than 50, 100 or even 500 tables.\n                          Finding the right tables and relations to work with can be hard, and sincerely, no tool really helps. Until now.'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$author$project$Libs$Html$bText('Azimutt'),
							$elm$html$Html$text(' allows you to explore your schema: search for relevant tables, follow the relations, hide less interesting columns and even find the paths between tables.')
						]),
					aj: 'Explore your database schema'
				},
				D: $elm$core$Maybe$Nothing,
				dV: {cr: 'Basic schema by Azimutt', de: '/assets/images/basic-schema.png'},
				a7: 1,
				bn: $elm$core$Maybe$Just(
					{
						dq: 'Loïc Knuchel, Principal Engineer @ Doctolib',
						cs: {cr: 'Loïc Knuchel', de: '/assets/images/avatar-loic-knuchel.jpg'},
						dh: 'Using Azimutt is like having super powers!'
					})
			}),
			A2(
			$author$project$Components$Slices$FeatureSideBySide$imageSwapSlice,
			{cr: 'Gospeak.io minimal schema by Azimutt', de: '/assets/images/gospeak-schema-light.png'},
			{
				gY: $elm$core$Maybe$Just(
					{
						dh: 'Let me see...',
						gf: $elm$core$Maybe$Just(
							$author$project$Track$openAppCta('home-display-section')),
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
					}),
				cE: {
					bI: _List_fromArray(
						[
							$elm$html$Html$text('Good understanding starts with a good visualization. Azimutt is the only Entity-Relationship diagram that let you choose what you want to see and how.'),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['mt-3']))
								]),
							_List_Nil),
							$author$project$Components$Molecules$Feature$checked(
							{cE: $elm$core$Maybe$Nothing, aj: 'search everywhere'}),
							$author$project$Components$Molecules$Feature$checked(
							{cE: $elm$core$Maybe$Nothing, aj: 'show, hide and organize tables'}),
							$author$project$Components$Molecules$Feature$checked(
							{cE: $elm$core$Maybe$Nothing, aj: 'show, hide and sort columns'})
						]),
					aj: 'See what you need'
				},
				D: $elm$core$Maybe$Just(189),
				dV: {cr: 'Gospeak.io schema by Azimutt', de: '/assets/images/gospeak-schema-full.png'},
				a7: 0,
				bn: $elm$core$Maybe$Just(
					{
						dq: 'Oliver Searle-Barnes, Freelance, former VP Eng at Zapnito',
						cs: {cr: 'Oliver Searle-Barnes', de: '/assets/images/avatar-oliver-searle-barnes.png'},
						dh: 'The app seems really well thought out, particularly the control you have over what to include in the diagram and the ability to save different views.\n                            This feels like the workflow I never knew I wanted until trying it just now.'
					})
			}),
			$author$project$Components$Slices$FeatureSideBySide$imageSlice(
			{
				gY: $elm$core$Maybe$Just(
					{
						dh: 'I can\'t resist, let\'s go!',
						gf: $elm$core$Maybe$Just(
							$author$project$Track$openAppCta('home-relations-section')),
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
					}),
				cE: {
					bI: _List_fromArray(
						[
							$elm$html$Html$text('Relational databases are made of, well, relations.'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$elm$html$Html$text('Did you ever wanted to see what is on the other side of a relation ? With Azimutt, it\'s just one click away 🤩'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$elm$html$Html$text('And there\'s more, how do you see incoming relations ? Azimutt list all of them and is able to show one, many or all of them in just two clicks! 😍'),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['mt-3']))
								]),
							_List_Nil),
							$author$project$Components$Molecules$Feature$checked(
							{cE: $elm$core$Maybe$Nothing, aj: 'outgoing relations'}),
							$author$project$Components$Molecules$Feature$checked(
							{cE: $elm$core$Maybe$Nothing, aj: 'incoming relations'})
						]),
					aj: 'Follow your mind'
				},
				D: $elm$core$Maybe$Just(124),
				dV: {cr: 'Gospeak.io incoming relations by Azimutt', de: '/assets/images/gospeak-incoming-relation.png'},
				a7: 1,
				bn: $elm$core$Maybe$Nothing
			}),
			$author$project$Components$Slices$FeatureSideBySide$imageSlice(
			{
				gY: $elm$core$Maybe$Just(
					{
						dh: 'That\'s enough, I\'m in!',
						gf: $elm$core$Maybe$Just(
							$author$project$Track$openAppCta('home-layouts-section')),
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
					}),
				cE: {
					bI: _List_fromArray(
						[
							$elm$html$Html$text('Do you like throwing away your work ? Me neither. And Azimutt has you covered on this. '),
							$elm$html$Html$text('Once you have finished an investigation, save your meaningful diagram as a layout so you can come back to it later and even improve it.'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$elm$html$Html$text('Your colleagues will be jealous, until you tell them about Azimutt ❤️')
						]),
					aj: 'Context switch like a pro'
				},
				D: $elm$core$Maybe$Just(64),
				dV: {cr: 'Gospeak.io layouts by Azimutt', de: '/assets/images/gospeak-layouts.png'},
				a7: 0,
				bn: $elm$core$Maybe$Nothing
			}),
			$author$project$Components$Slices$FeatureSideBySide$imageSlice(
			{
				gY: $elm$core$Maybe$Just(
					{
						dh: 'I\'m hooked!',
						gf: $elm$core$Maybe$Just(
							$author$project$Track$openAppCta('home-find-path-section')),
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
					}),
				cE: {
					bI: _List_fromArray(
						[
							$elm$html$Html$text('Sometimes, easily following relations is not enough, especially when you don\'t know in which direction to go.\n                          And looking at every possible relation can be tedious. So let\'s grab a '),
							A2(
							$author$project$Components$Molecules$Tooltip$t,
							'drink',
							A2(
								$elm$html$Html$span,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('🍹')
									]))),
							$elm$html$Html$text(' and watch Azimutt do the work for you.'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$elm$html$Html$text('It will look for every relation and build possible paths between two tables you want to join.\n                          And as it is helpful, it will even build the SQL request for you with all the needed joins.')
						]),
					aj: 'Let Azimutt drive you'
				},
				D: $elm$core$Maybe$Just(134),
				dV: {cr: 'Gospeak.io find path with Azimutt', de: '/assets/images/gospeak-find-path.png'},
				a7: 1,
				bn: $elm$core$Maybe$Nothing
			}),
			$author$project$Components$Slices$FeatureSideBySide$imageSlice(
			{
				gY: $elm$core$Maybe$Just(
					{
						dh: 'I must try!',
						gf: $elm$core$Maybe$Just(
							$author$project$Track$openAppCta('home-schema-analysis-section')),
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
					}),
				cE: {
					bI: _List_fromArray(
						[
							$elm$html$Html$text('Azimutt not only let your explore your database schema but also analyze it to provide you insights.\n                          Import your schema and find inconsistencies or forgotten relations in a minute, and trust me, for any on-trivial schema, you will find some.'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							$elm$html$Html$text('Schema analysis always evolve, thanks to your feedback, to be as helpful as possible.'),
							A2($elm$html$Html$br, _List_Nil, _List_Nil),
							A3(
							$author$project$Components$Atoms$Badge$basic,
							$author$project$Libs$Tailwind$red,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text('soon')
								])),
							$elm$html$Html$text(' It will also make you a '),
							A2(
							$author$project$Components$Molecules$Tooltip$t,
							'coffee',
							A2(
								$elm$html$Html$span,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('☕️')
									]))),
							$elm$html$Html$text(', just as you like!')
						]),
					aj: 'Find and fix mistakes'
				},
				D: $elm$core$Maybe$Just(74),
				dV: {cr: 'Analyze WordPress database schema', de: '/assets/images/wordpress-schema-analysis.png'},
				a7: 0,
				bn: $elm$core$Maybe$Nothing
			}),
			$author$project$Components$Slices$FeatureGrid$cardSlice(
			{
				du: _List_fromArray(
					[
						{
						cE: _List_fromArray(
							[
								$elm$html$Html$text('Install Azimutt on your PC so your schema will always be at your fingertips. Whatever happens.')
							]),
						D: 4,
						aj: 'PWA ready'
					},
						{
						cE: _List_fromArray(
							[
								$elm$html$Html$text('Don\'t worry about privacy, everything stays on your computer, this is your data! #localStorage')
							]),
						D: 183,
						aj: 'Everything is local'
					},
						{
						cE: _List_fromArray(
							[
								$elm$html$Html$text('Want to have a look? Everything is on '),
								A2(
								$elm$html$Html$b,
								_List_Nil,
								_List_fromArray(
									[
										A3(
										$author$project$Libs$Html$extLink,
										$author$project$Conf$constants.gB,
										_List_Nil,
										_List_fromArray(
											[
												$elm$html$Html$text('azimuttap/azimutt')
											]))
									])),
								$elm$html$Html$text(', awesomely built with Elm. Come and let\'s discuss!')
							]),
						D: 85,
						aj: 'Fully open source'
					}
					]),
				cE: 'If you are still not convinced, here are my last words. Azimutt is awesome, built with awesome technology and supports your awesome use cases. See below...',
				dQ: 'Last chance',
				aj: 'What more can you want ?'
			}),
			$author$project$Components$Slices$Cta$slice(
			$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)),
			$author$project$PagesComponents$Helpers$newsletterSection,
			$author$project$PagesComponents$Helpers$publicFooter
		]);
};
var $author$project$Pages$Home_$view = function (model) {
	return {
		eV: $author$project$PagesComponents$Home_$View$viewHome(model),
		aj: 'Azimutt - Explore your database schema'
	};
};
var $author$project$Pages$Home_$page = F2(
	function (_v0, _v1) {
		return $author$project$Page$element(
			{Y: $author$project$Pages$Home_$init, ab: $author$project$Pages$Home_$subscriptions, ac: $author$project$Pages$Home_$update, eQ: $author$project$Pages$Home_$view});
	});
var $author$project$Pages$NotFound$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 1) {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $author$project$Pages$NotFound$init = function (req) {
	return _Utils_Tuple2(
		A3(
			$author$project$Pages$NotFound$addPrefixed,
			'#',
			req.jH.hl,
			A3($author$project$Pages$NotFound$addPrefixed, '?', req.jH.fU, req.jH.fM)),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					$author$project$Ports$setClasses(
					{eV: 'h-full', hx: 'h-full'}),
					$author$project$Ports$trackPage('not-found')
				])));
};
var $author$project$Pages$NotFound$subscriptions = function (_v0) {
	return $elm$core$Platform$Sub$none;
};
var $author$project$Pages$NotFound$update = F2(
	function (_v0, model) {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	});
var $author$project$Pages$NotFound$viewNotFound = function (_v0) {
	return _List_fromArray(
		[
			$author$project$Components$Slices$NotFound$simple(
			{
				L: {
					aK: {cr: 'Azimutt', de: '/logo.png'},
					aN: {
						dh: 'Azimutt',
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Home_)
					}
				},
				dL: _List_fromArray(
					[
						{dh: 'Contact Support', jH: $author$project$Conf$constants.gy},
						{dh: 'Twitter', jH: $author$project$Conf$constants.gD},
						{
						dh: 'Blog',
						jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Blog)
					}
					]),
				dQ: '404 error',
				aN: {
					dh: 'Go back home',
					jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Home_)
				},
				bg: 'Sorry, we couldn\'t find the page you’re looking for.',
				aj: 'Page not found.'
			})
		]);
};
var $author$project$Pages$NotFound$view = function (model) {
	return {
		eV: $author$project$Pages$NotFound$viewNotFound(model),
		aj: 'Page not found - Azimutt'
	};
};
var $author$project$Pages$NotFound$page = F2(
	function (_v0, req) {
		return $author$project$Page$element(
			{
				Y: $author$project$Pages$NotFound$init(req),
				ab: $author$project$Pages$NotFound$subscriptions,
				ac: $author$project$Pages$NotFound$update,
				eQ: $author$project$Pages$NotFound$view
			});
	});
var $author$project$Shared$Loading = {$: 0};
var $author$project$Pages$Projects$init = _Utils_Tuple2(
	{a1: $elm$core$Maybe$Nothing, bi: false, d6: false, b5: $author$project$Shared$Loading, b9: 'Dashboard', jE: 0, aW: _List_Nil},
	$elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				$author$project$Ports$setClasses(
				{eV: 'h-full', hx: 'h-full bg-gray-100'}),
				$author$project$Ports$trackPage('dashboard'),
				$author$project$Ports$loadProjects
			])));
var $author$project$PagesComponents$Projects$Models$JsMessage = function (a) {
	return {$: 8, a: a};
};
var $author$project$Pages$Projects$subscriptions = function (_v0) {
	return $author$project$Ports$onJsMessage($author$project$PagesComponents$Projects$Models$JsMessage);
};
var $author$project$PagesComponents$Projects$Models$ModalOpen = {$: 5};
var $author$project$Track$deleteProject = $author$project$Track$projectEvent('delete');
var $author$project$Ports$DropProject = function (a) {
	return {$: 12, a: a};
};
var $author$project$Ports$dropProject = function (project) {
	return $author$project$Ports$messageToJs(
		$author$project$Ports$DropProject(project));
};
var $author$project$Shared$Loaded = function (a) {
	return {$: 1, a: a};
};
var $author$project$Pages$Projects$handleJsMessage = F2(
	function (msg, model) {
		if (msg.$ === 1) {
			var _v1 = msg.a;
			var projects = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						b5: $author$project$Shared$Loaded(
							A2(
								$elm$core$List$sortBy,
								function (p) {
									return -$elm$time$Time$posixToMillis(p.gj);
								},
								projects))
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var $author$project$Pages$Projects$update = F3(
	function (req, msg, model) {
		switch (msg.$) {
			case 0:
				var menu = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{b9: menu}),
					$elm$core$Platform$Cmd$none);
			case 1:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bi: !model.bi}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var project = msg.a;
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$dropProject(project),
								$author$project$Ports$track(
								$author$project$Track$deleteProject(project))
							])));
			case 3:
				var confirm = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							a1: $elm$core$Maybe$Just(confirm)
						}),
					A2($author$project$Libs$Task$sendAfter, 1, $author$project$PagesComponents$Projects$Models$ModalOpen));
			case 4:
				var answer = msg.a;
				var cmd = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{a1: $elm$core$Maybe$Nothing}),
					A3($author$project$Libs$Bool$cond, answer, cmd, $elm$core$Platform$Cmd$none));
			case 5:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{d6: true}),
					$author$project$Ports$autofocusWithin($author$project$Conf$ids.hZ));
			case 6:
				var message = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{d6: false}),
					A2($author$project$Libs$Task$sendAfter, $author$project$Conf$ui.gR, message));
			case 7:
				var url = msg.a;
				return _Utils_Tuple2(
					model,
					A2($elm$browser$Browser$Navigation$pushUrl, req.bU, url));
			default:
				var message = msg.a;
				return A2($author$project$Pages$Projects$handleJsMessage, message, model);
		}
	});
var $author$project$PagesComponents$Projects$Models$SelectMenu = function (a) {
	return {$: 0, a: a};
};
var $author$project$PagesComponents$Projects$Models$ToggleMobileMenu = {$: 1};
var $author$project$Components$Organisms$Navbar$adminBrand = function (brand) {
	return A2(
		$elm$html$Html$a,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$href(brand.aN.jH),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['flex justify-start items-center font-medium']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$img,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							['block h-8 w-8'])),
						$elm$html$Html$Attributes$src(brand.aK.de),
						$elm$html$Html$Attributes$alt(brand.aK.cr),
						$elm$html$Html$Attributes$width(32),
						$elm$html$Html$Attributes$height(32)
					]),
				_List_Nil),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'ml-3 text-2xl text-white hidden',
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['block']))
							]))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(brand.aN.dh)
					]))
			]));
};
var $author$project$Libs$Html$Attributes$ariaCurrent = function (text) {
	return A2($elm$html$Html$Attributes$attribute, 'aria-current', text);
};
var $author$project$Components$Organisms$Navbar$adminNavigationLink = F4(
	function (styles, navigationActive, navigationOnClick, link) {
		return _Utils_eq(link.dh, navigationActive) ? A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(link.jH),
					$elm$html$Html$Events$onClick(
					navigationOnClick(link)),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['text-white rounded-md py-2 px-3 font-medium bg-primary-700', styles])),
					$author$project$Libs$Html$Attributes$ariaCurrent('page')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(link.dh)
				])) : A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(link.jH),
					$elm$html$Html$Events$onClick(
					navigationOnClick(link)),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'text-white rounded-md py-2 px-3 font-medium',
							styles,
							$author$project$Libs$Tailwind$hover(
							_List_fromArray(
								['bg-opacity-75 bg-primary-500']))
						]))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(link.dh)
				]));
	});
var $author$project$Components$Organisms$Navbar$adminMobileNavigation = F2(
	function (navigation, navigationActive) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['px-2 pt-2 pb-3 space-y-1']))
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$Components$Organisms$Navbar$adminNavigationLink, 'block text-base', navigationActive, navigation.ax),
				navigation.H));
	});
var $author$project$Components$Atoms$Icon$Bell = 26;
var $author$project$Components$Organisms$Navbar$adminNotifications = function (_v0) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$type_('button'),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'ml-auto flex-shrink-0 rounded-full p-1 bg-primary-600 text-primary-200',
						$author$project$Libs$Tailwind$hover(
						_List_fromArray(
							['text-white'])),
						$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							['sr-only']))
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('View notifications')
					])),
				A2($author$project$Components$Atoms$Icon$outline, 26, '')
			]));
};
var $author$project$Components$Organisms$Navbar$adminMobileMenu = F6(
	function (navigation, notifications, profile, mobileMenu, activeMenu, isOpen) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['hidden'])),
							A3($author$project$Libs$Bool$cond, isOpen, '', 'hidden')
						])),
					$elm$html$Html$Attributes$id(mobileMenu.t)
				]),
			_List_fromArray(
				[
					A2($author$project$Components$Organisms$Navbar$adminMobileNavigation, navigation, activeMenu),
					A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (p) {
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['pt-4 pb-3 border-t border-primary-700']))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['px-5 flex items-center']))
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														['flex-shrink-0']))
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$img,
													_List_fromArray(
														[
															$author$project$Libs$Html$Attributes$css(
															_List_fromArray(
																['rounded-full h-10 w-10'])),
															$elm$html$Html$Attributes$src(p.cs),
															$elm$html$Html$Attributes$alt('Your avatar'),
															$elm$html$Html$Attributes$width(40),
															$elm$html$Html$Attributes$height(40)
														]),
													_List_Nil)
												])),
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														['ml-3']))
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$author$project$Libs$Html$Attributes$css(
															_List_fromArray(
																['text-base font-medium text-white']))
														]),
													_List_fromArray(
														[
															$elm$html$Html$text(p.dG + (' ' + p.dZ))
														])),
													A2(
													$elm$html$Html$div,
													_List_fromArray(
														[
															$author$project$Libs$Html$Attributes$css(
															_List_fromArray(
																['text-sm font-medium text-primary-300']))
														]),
													_List_fromArray(
														[
															$elm$html$Html$text(p.dE)
														]))
												])),
											A3(
											$author$project$Libs$Maybe$mapOrElse,
											$author$project$Components$Organisms$Navbar$adminNotifications,
											A2($elm$html$Html$div, _List_Nil, _List_Nil),
											notifications)
										])),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['mt-3 px-2 space-y-1']))
										]),
									A2(
										$elm$core$List$map,
										function (link) {
											return A2(
												$elm$html$Html$a,
												_List_fromArray(
													[
														$elm$html$Html$Attributes$href(link.jH),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															[
																'block rounded-md py-2 px-3 text-base font-medium text-white',
																$author$project$Libs$Tailwind$hover(
																_List_fromArray(
																	['bg-opacity-75 bg-primary-500']))
															]))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text(link.dh)
													]));
										},
										p.H))
								]));
					},
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					profile)
				]));
	});
var $author$project$Components$Organisms$Navbar$adminMobileMenuButton = F2(
	function (mobileMenu, isOpen) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'flex',
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['hidden']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Events$onClick(mobileMenu.ax),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'p-2 rounded-md inline-flex items-center justify-center bg-primary-600 text-primary-200',
									$author$project$Libs$Tailwind$hover(
									_List_fromArray(
										['text-white bg-opacity-75 bg-primary-500'])),
									$author$project$Libs$Tailwind$focus(
									_List_fromArray(
										['outline-none ring-2 ring-offset-2 ring-white ring-offset-primary-600']))
								])),
							$author$project$Libs$Html$Attributes$ariaControls(mobileMenu.t),
							$author$project$Libs$Html$Attributes$ariaExpanded(isOpen)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['sr-only']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Open main menu')
								])),
							A2(
							$author$project$Components$Atoms$Icon$outline,
							135,
							A3($author$project$Libs$Bool$cond, isOpen, 'hidden', 'block')),
							A2(
							$author$project$Components$Atoms$Icon$outline,
							227,
							A3($author$project$Libs$Bool$cond, isOpen, 'block', 'hidden'))
						]))
				]));
	});
var $author$project$Components$Organisms$Navbar$adminNavigation = F2(
	function (navigation, navigationActive) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['flex space-x-4']))
				]),
			A2(
				$elm$core$List$map,
				A3($author$project$Components$Organisms$Navbar$adminNavigationLink, 'text-sm', navigationActive, navigation.ax),
				navigation.H));
	});
var $author$project$Components$Organisms$Navbar$adminProfile = F2(
	function (isOpen, profile) {
		return A3(
			$author$project$Components$Molecules$Dropdown$dropdown,
			{ao: 1, t: profile.t, ar: isOpen},
			function (m) {
				return A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$elm$html$Html$Attributes$id(m.t),
							$elm$html$Html$Events$onClick(profile.ax),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'ml-3 rounded-full flex text-sm text-white bg-primary-600',
									$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary)
								])),
							$author$project$Libs$Html$Attributes$ariaExpanded(m.ar),
							$author$project$Libs$Html$Attributes$ariaHaspopup(true)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['sr-only']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Open user menu')
								])),
							A2(
							$elm$html$Html$img,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['rounded-full h-8 w-8'])),
									$elm$html$Html$Attributes$src(profile.cs),
									$elm$html$Html$Attributes$alt('Your avatar'),
									$elm$html$Html$Attributes$width(32),
									$elm$html$Html$Attributes$height(32)
								]),
							_List_Nil)
						]));
			},
			function (_v0) {
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					A2($elm$core$List$map, $author$project$Components$Molecules$ContextMenu$link, profile.H));
			});
	});
var $author$project$Components$Organisms$Navbar$adminSearch = function (search) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'flex-1 px-2 flex justify-center',
						$author$project$Libs$Tailwind$lg(
						_List_fromArray(
							['ml-6 justify-end']))
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'max-w-lg w-full',
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['max-w-xs']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$label,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$for(search.t),
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['sr-only']))
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('Search')
							])),
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'relative text-gray-400',
										$author$project$Libs$Tailwind$focusWithin(
										_List_fromArray(
											[']text-gray-600']))
									]))
							]),
						_List_fromArray(
							[
								A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['pointer-events-none absolute inset-y-0 left-0 pl-3 flex items-center']))
									]),
								_List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$solid, 178, '')
									])),
								A2(
								$elm$html$Html$input,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('search'),
										$elm$html$Html$Attributes$name('search'),
										$elm$html$Html$Attributes$id(search.t),
										$elm$html$Html$Attributes$placeholder('Search'),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'block w-full bg-white py-2 pl-10 pr-3 border border-transparent rounded-md leading-5 text-gray-900 placeholder-gray-500',
												$author$project$Libs$Tailwind$focus_ring_offset_600($author$project$Libs$Tailwind$primary),
												$author$project$Libs$Tailwind$sm(
												_List_fromArray(
													['text-sm']))
											]))
									]),
								_List_Nil)
							]))
					]))
			]));
};
var $author$project$Components$Organisms$Navbar$admin = F2(
	function (model, state) {
		return A2(
			$elm$html$Html$nav,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'border-b border-opacity-25 bg-primary-600 border-primary-300',
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['border-none']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'max-w-7xl mx-auto px-4',
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['px-8'])),
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['px-6']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'relative h-16 flex items-center justify-between',
											$author$project$Libs$Tailwind$lg(
											_List_fromArray(
												['border-b border-opacity-25 border-primary-400']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'px-2 flex items-center',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['px-0']))
												]))
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														['flex-shrink-0']))
												]),
											_List_fromArray(
												[
													$author$project$Components$Organisms$Navbar$adminBrand(model.L)
												])),
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														[
															'hidden',
															$author$project$Libs$Tailwind$lg(
															_List_fromArray(
																['block ml-10']))
														]))
												]),
											_List_fromArray(
												[
													A2($author$project$Components$Organisms$Navbar$adminNavigation, model.cX, state.b9)
												]))
										])),
									A3(
									$author$project$Libs$Maybe$mapOrElse,
									$author$project$Components$Organisms$Navbar$adminSearch,
									A2($elm$html$Html$div, _List_Nil, _List_Nil),
									model.er),
									A2($author$project$Components$Organisms$Navbar$adminMobileMenuButton, model.cV, state.bi),
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													'hidden',
													$author$project$Libs$Tailwind$lg(
													_List_fromArray(
														['block ml-4']))
												]))
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$div,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														['flex items-center']))
												]),
											_List_fromArray(
												[
													A3(
													$author$project$Libs$Maybe$mapOrElse,
													$author$project$Components$Organisms$Navbar$adminNotifications,
													A2($elm$html$Html$div, _List_Nil, _List_Nil),
													model.cY),
													A3(
													$author$project$Libs$Maybe$mapOrElse,
													$author$project$Components$Organisms$Navbar$adminProfile(state.b4),
													A2($elm$html$Html$div, _List_Nil, _List_Nil),
													model.c1)
												]))
										]))
								]))
						])),
					A6($author$project$Components$Organisms$Navbar$adminMobileMenu, model.cX, model.cY, model.c1, model.cV, state.b9, state.bi)
				]));
	});
var $author$project$PagesComponents$Helpers$viewFooter = A2(
	$elm$html$Html$footer,
	_List_Nil,
	_List_fromArray(
		[
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'max-w-7xl mx-auto py-12 px-4',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['px-6'])),
							$author$project$Libs$Tailwind$md(
							_List_fromArray(
								['flex items-center justify-between'])),
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['px-8']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'mt-8',
									$author$project$Libs$Tailwind$md(
									_List_fromArray(
										['mt-0 order-1']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['text-center text-base text-gray-400']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Azimutt is an '),
									A3(
									$author$project$Libs$Html$extLink,
									$author$project$Conf$constants.gB,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['link']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Open source')
										])),
									$elm$html$Html$text(' tool written with love in '),
									A3(
									$author$project$Libs$Html$extLink,
									'https://elm-lang.org',
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['link']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Elm')
										])),
									$elm$html$Html$text('. We always look for '),
									A3(
									$author$project$Libs$Html$extLink,
									$author$project$Conf$constants.gA,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['link']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('feedback')
										])),
									$elm$html$Html$text(' and will happily discuss your use cases to make it evolve.')
								]))
						]))
				]))
		]));
var $author$project$PagesComponents$Helpers$viewHeader = function (content) {
	return A2(
		$elm$html$Html$header,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['py-10']))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'max-w-7xl mx-auto px-4',
								$author$project$Libs$Tailwind$sm(
								_List_fromArray(
									['px-6'])),
								$author$project$Libs$Tailwind$lg(
								_List_fromArray(
									['px-8']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$h1,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									['text-3xl font-bold text-white']))
							]),
						content)
					]))
			]));
};
var $author$project$PagesComponents$Helpers$appShell = F6(
	function (onNavigationClick, onMobileMenuClick, model, title, content, footer) {
		return _Utils_ap(
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['pb-32 bg-primary-600']))
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Components$Organisms$Navbar$admin,
							{
								L: {
									aK: {cr: 'Azimutt', de: '/logo.png'},
									aN: {
										dh: 'Azimutt',
										jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Home_)
									}
								},
								cV: {t: 'mobile-menu', ax: onMobileMenuClick},
								cX: {
									H: _List_fromArray(
										[
											{
											dh: 'Dashboard',
											jH: $author$project$Gen$Route$toHref($author$project$Gen$Route$Projects)
										}
										]),
									ax: onNavigationClick
								},
								cY: $elm$core$Maybe$Nothing,
								c1: $elm$core$Maybe$Nothing,
								er: $elm$core$Maybe$Nothing
							},
							{bi: model.bi, b4: false, b9: model.b9}),
							$author$project$PagesComponents$Helpers$viewHeader(title)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['-mt-32']))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$main_,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'max-w-7xl mx-auto pb-12 px-4',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['px-6'])),
											$author$project$Libs$Tailwind$lg(
											_List_fromArray(
												['px-8']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['bg-white rounded-lg shadow']))
										]),
									content)
								]))
						]))
				]),
			A2($elm$core$List$cons, $author$project$PagesComponents$Helpers$viewFooter, footer));
	});
var $author$project$PagesComponents$Projects$View$projectList = function (content) {
	return A2(
		$elm$html$Html$ul,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$role('list'),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'grid grid-cols-1 gap-6',
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['grid-cols-2'])),
						$author$project$Libs$Tailwind$md(
						_List_fromArray(
							['grid-cols-3'])),
						$author$project$Libs$Tailwind$lg(
						_List_fromArray(
							['grid-cols-4']))
					]))
			]),
		content);
};
var $author$project$PagesComponents$Projects$View$viewNewProject = A2(
	$elm$html$Html$li,
	_List_fromArray(
		[
			$author$project$Libs$Html$Attributes$css(
			_List_fromArray(
				['col-span-1']))
		]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(
					$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects__New)),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'relative block w-full border-2 border-gray-200 border-dashed rounded-lg py-12 text-center text-gray-200',
							$author$project$Libs$Tailwind$hover(
							_List_fromArray(
								['border-gray-400 text-gray-400'])),
							$author$project$Libs$Tailwind$focus_ring_500($author$project$Libs$Tailwind$primary)
						]))
				]),
			_List_fromArray(
				[
					A2($author$project$Components$Atoms$Icon$outline2x, 80, 'mx-auto'),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['mt-2 block text-sm font-medium']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Create a new project')
						]))
				]))
		]));
var $author$project$PagesComponents$Projects$Models$NavigateTo = function (a) {
	return {$: 7, a: a};
};
var $author$project$Components$Atoms$Icon$ClipboardList = 56;
var $author$project$Components$Atoms$Icon$ViewList = 223;
var $author$project$Conf$schemaSamples = $elm$core$Dict$fromList(
	A2(
		$elm$core$List$map,
		function (sample) {
			return _Utils_Tuple2(sample.bU, sample);
		},
		_List_fromArray(
			[
				{n: $author$project$Libs$Tailwind$pink, cE: 'Simple login/role schema. The easiest one, just enough play with Azimutt features.', D: 223, bU: 'basic', cW: 'Basic', jr: 4, jH: '/samples/basic.azimutt.json'},
				{n: $author$project$Libs$Tailwind$yellow, cE: 'The well known CMS powering most of the web. An interesting schema, but with no foreign keys!', D: 201, bU: 'wordpress', cW: 'Wordpress', jr: 12, jH: '/samples/wordpress.azimutt.json'},
				{n: $author$project$Libs$Tailwind$green, cE: 'A full featured SaaS for meetup organizers. A good real world example to explore and really see the power of Azimutt.', D: 56, bU: 'gospeak', cW: 'Gospeak.io', jr: 26, jH: '/samples/gospeak.azimutt.json'}
			])));
var $author$project$PagesComponents$Projects$View$viewFirstProject = A2(
	$elm$html$Html$a,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$href(
			$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects__New)),
			$author$project$Libs$Html$Attributes$css(
			_List_fromArray(
				[
					'mt-6 relative block w-full border-2 border-gray-200 border-dashed rounded-lg py-12 text-center text-gray-400',
					$author$project$Libs$Tailwind$hover(
					_List_fromArray(
						['border-gray-400'])),
					$author$project$Libs$Tailwind$focus(
					_List_fromArray(
						['outline-none ring-2 ring-offset-2 ring-primary-500']))
				]))
		]),
	_List_fromArray(
		[
			A2($author$project$Components$Atoms$Icon$outline2x, 80, 'mx-auto'),
			A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['mt-2 block text-sm font-medium']))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Create a new project')
				]))
		]));
var $author$project$Libs$Tailwind$bg_500 = function (_v0) {
	var color = _v0;
	return 'bg-' + (color + '-500');
};
var $author$project$Components$Molecules$ItemList$withIcon = function (item) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'flow-root',
						A3($author$project$Libs$Bool$cond, item.al, '', 'filter grayscale')
					]))
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$author$project$Libs$Html$Attributes$css(
						_List_fromArray(
							[
								'relative -m-2 p-2 flex items-center space-x-4 rounded-xl',
								$author$project$Libs$Tailwind$hover(
								_List_fromArray(
									['bg-gray-50'])),
								$author$project$Libs$Tailwind$focusWithin(
								_List_fromArray(
									['ring-2 ring-primary-500']))
							]))
					]),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Libs$Html$Attributes$css(
								_List_fromArray(
									[
										'flex-shrink-0 flex items-center justify-center h-16 w-16 rounded-lg',
										$author$project$Libs$Tailwind$bg_500(item.n)
									]))
							]),
						_List_fromArray(
							[
								A2($author$project$Components$Atoms$Icon$outline, item.D, 'text-white')
							])),
						A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$h3,
								_List_Nil,
								_List_fromArray(
									[
										A2(
										$elm$html$Html$button,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$type_('button'),
												$elm$html$Html$Events$onClick(item.ax),
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													[
														'text-sm font-medium text-gray-900',
														$author$project$Libs$Tailwind$focus(
														_List_fromArray(
															['outline-none']))
													]))
											]),
										_List_fromArray(
											[
												A2(
												$elm$html$Html$span,
												_List_fromArray(
													[
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															['absolute inset-0'])),
														$author$project$Libs$Html$Attributes$ariaHidden(true)
													]),
												_List_Nil),
												$elm$html$Html$text(item.aj)
											]))
									])),
								A2(
								$elm$html$Html$p,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['mt-1 text-sm text-gray-500']))
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(item.cE)
									]))
							]))
					]))
			]));
};
var $author$project$Components$Molecules$ItemList$withIcons = function (items) {
	return A2(
		$elm$html$Html$ul,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$role('list'),
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					[
						'mt-6 grid grid-cols-1 gap-6',
						$author$project$Libs$Tailwind$sm(
						_List_fromArray(
							['grid-cols-2']))
					]))
			]),
		A2($elm$core$List$map, $author$project$Components$Molecules$ItemList$withIcon, items));
};
var $author$project$PagesComponents$Projects$View$viewNoProjects = A2(
	$elm$html$Html$div,
	_List_Nil,
	_List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['mt-1 text-sm text-gray-500']))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('You haven’t created any project yet. Import your own schema.')
				])),
			$author$project$PagesComponents$Projects$View$viewFirstProject,
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['mt-6 text-sm font-medium text-primary-600']))
				]),
			_List_fromArray(
				[
					$elm$html$Html$text('Or explore a sample one'),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$ariaHidden(true)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(' →')
						]))
				])),
			$author$project$Components$Molecules$ItemList$withIcons(
			A2(
				$elm$core$List$map,
				function (s) {
					return {
						al: true,
						n: s.n,
						cE: s.cE,
						D: s.D,
						ax: $author$project$PagesComponents$Projects$Models$NavigateTo(
							$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects__New) + ('?sample=' + s.bU)),
						aj: s.cW + (' (' + ($elm$core$String$fromInt(s.jr) + ' tables)'))
					};
				},
				A2(
					$elm$core$List$sortBy,
					function ($) {
						return $.jr;
					},
					$elm$core$Dict$values($author$project$Conf$schemaSamples))))
		]));
var $author$project$Components$Atoms$Icon$ArrowCircleRight = 6;
var $author$project$PagesComponents$Projects$Models$ConfirmOpen = function (a) {
	return {$: 3, a: a};
};
var $author$project$PagesComponents$Projects$Models$DeleteProject = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$View$confirmDeleteProject = function (project) {
	return $author$project$PagesComponents$Projects$Models$ConfirmOpen(
		{
			aZ: 'Cancel',
			n: $author$project$Libs$Tailwind$red,
			a1: 'Delete ' + project.cW,
			D: 207,
			bg: A2(
				$elm$html$Html$span,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Are you sure you want to delete '),
						$author$project$Libs$Html$bText(project.cW),
						$elm$html$Html$text(' project?')
					])),
			bk: $author$project$Libs$Task$send(
				$author$project$PagesComponents$Projects$Models$DeleteProject(project)),
			aj: 'Delete project'
		});
};
var $author$project$Track$loadProject = $author$project$Track$projectEvent('load');
var $author$project$PagesComponents$Projects$View$viewProjectCard = F2(
	function (zone, project) {
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('az-project'),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'col-span-1 flex flex-col border border-gray-200 rounded-lg divide-y divide-gray-200',
							$author$project$Libs$Tailwind$hover(
							_List_fromArray(
								['shadow-lg']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['p-6']))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$h3,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['text-lg font-medium']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(project.cW)
								])),
							A2(
							$elm$html$Html$ul,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['mt-1 text-gray-500 text-sm']))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$li,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											A2($author$project$Libs$String$pluralizeD, 'table', project.jr) + (', ' + A2($author$project$Libs$String$pluralizeD, 'layout', project.d_)))
										])),
									A2(
									$elm$html$Html$li,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											'Edited on ' + A2($author$project$Libs$DateTime$formatDate, zone, project.e1))
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['flex divide-x divide-gray-200']))
						]),
					_List_fromArray(
						[
							A2(
							$author$project$Components$Molecules$Tooltip$t,
							'Delete this project',
							A2(
								$elm$html$Html$button,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$type_('button'),
										$elm$html$Html$Events$onClick(
										$author$project$PagesComponents$Projects$View$confirmDeleteProject(project)),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'flex-grow-0 inline-flex items-center justify-center py-4 text-sm text-gray-700 font-medium px-4',
												$author$project$Libs$Tailwind$hover(
												_List_fromArray(
													['text-gray-500']))
											]))
									]),
								_List_fromArray(
									[
										A2($author$project$Components$Atoms$Icon$outline, 207, 'text-gray-400')
									]))),
							A2(
							$elm$html$Html$a,
							_Utils_ap(
								_List_fromArray(
									[
										$elm$html$Html$Attributes$href(
										$author$project$Gen$Route$toHref(
											$author$project$Gen$Route$Projects__Id_(
												{t: project.t}))),
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											[
												'flex-grow inline-flex items-center justify-center py-4 text-sm text-gray-700 font-medium',
												$author$project$Libs$Tailwind$hover(
												_List_fromArray(
													['text-gray-500']))
											]))
									]),
								$author$project$Libs$Html$Attributes$track(
									$author$project$Track$loadProject(project))),
							_List_fromArray(
								[
									A2($author$project$Components$Atoms$Icon$outline, 6, 'text-gray-400'),
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['ml-3']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Open project')
										]))
								]))
						]))
				]));
	});
var $author$project$PagesComponents$Projects$View$viewIconPlaceholder = function (styles) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['h-6 w-6 rounded-full bg-gray-300', styles]))
			]),
		_List_Nil);
};
var $author$project$PagesComponents$Projects$View$viewTextPlaceholder = function (styles) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$author$project$Libs$Html$Attributes$css(
				_List_fromArray(
					['inline-block w-full max-w-full h-2 bg-gray-300 rounded-full', styles]))
			]),
		_List_Nil);
};
var $author$project$PagesComponents$Projects$View$viewProjectPlaceholder = A2(
	$elm$html$Html$li,
	_List_fromArray(
		[
			$elm$html$Html$Attributes$class('az-project-placeholder'),
			$author$project$Libs$Html$Attributes$css(
			_List_fromArray(
				[
					'animate-pulse col-span-1 flex flex-col border border-gray-200 rounded-lg divide-y divide-gray-200',
					$author$project$Libs$Tailwind$hover(
					_List_fromArray(
						['shadow-lg']))
				]))
		]),
	_List_fromArray(
		[
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['p-6']))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['text-lg font-medium']))
						]),
					_List_fromArray(
						[
							$author$project$PagesComponents$Projects$View$viewTextPlaceholder('w-24 h-3')
						])),
					A2(
					$elm$html$Html$ul,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['mt-1 text-gray-500 text-sm']))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$li,
							_List_Nil,
							_List_fromArray(
								[
									$author$project$PagesComponents$Projects$View$viewTextPlaceholder('')
								])),
							A2(
							$elm$html$Html$li,
							_List_Nil,
							_List_fromArray(
								[
									$author$project$PagesComponents$Projects$View$viewTextPlaceholder('')
								]))
						]))
				])),
			A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						['flex divide-x divide-gray-200']))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('button'),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'flex-grow-0 inline-flex items-center justify-center py-4 text-sm text-gray-700 font-medium px-4',
									$author$project$Libs$Tailwind$hover(
									_List_fromArray(
										['text-gray-500']))
								]))
						]),
					_List_fromArray(
						[
							$author$project$PagesComponents$Projects$View$viewIconPlaceholder('')
						])),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('#'),
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'flex-grow inline-flex items-center justify-center py-4 text-sm text-gray-700 font-medium',
									$author$project$Libs$Tailwind$hover(
									_List_fromArray(
										['text-gray-500']))
								]))
						]),
					_List_fromArray(
						[
							$author$project$PagesComponents$Projects$View$viewIconPlaceholder(''),
							$author$project$PagesComponents$Projects$View$viewTextPlaceholder('ml-3 w-24')
						]))
				]))
		]));
var $author$project$PagesComponents$Projects$View$viewProjectList = F2(
	function (shared, model) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['text-lg font-medium']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('Projects')
						])),
					function () {
					var _v0 = model.b5;
					if (!_v0.$) {
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['mt-6']))
								]),
							_List_fromArray(
								[
									$author$project$PagesComponents$Projects$View$projectList(
									_List_fromArray(
										[$author$project$PagesComponents$Projects$View$viewProjectPlaceholder]))
								]));
					} else {
						if (!_v0.a.b) {
							return $author$project$PagesComponents$Projects$View$viewNoProjects;
						} else {
							var projects = _v0.a;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['mt-6']))
									]),
								_List_fromArray(
									[
										$author$project$PagesComponents$Projects$View$projectList(
										_Utils_ap(
											A2(
												$elm$core$List$map,
												$author$project$PagesComponents$Projects$View$viewProjectCard(shared.jL),
												projects),
											_List_fromArray(
												[$author$project$PagesComponents$Projects$View$viewNewProject])))
									]));
						}
					}
				}()
				]));
	});
var $author$project$PagesComponents$Projects$View$viewContent = F2(
	function (shared, model) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'p-8',
							$author$project$Libs$Tailwind$sm(
							_List_fromArray(
								['p-6']))
						]))
				]),
			_List_fromArray(
				[
					A2($author$project$PagesComponents$Projects$View$viewProjectList, shared, model)
				]));
	});
var $author$project$PagesComponents$Projects$Models$ConfirmAnswer = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$Models$ModalClose = function (a) {
	return {$: 6, a: a};
};
var $author$project$PagesComponents$Projects$View$viewModal = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('az-modal'),
				$elm$html$Html$Attributes$id($author$project$Conf$ids.hZ)
			]),
		_List_fromArray(
			[
				A2(
				$elm$core$Maybe$withDefault,
				A2($elm$html$Html$div, _List_Nil, _List_Nil),
				A2(
					$elm$core$Maybe$map,
					function (c) {
						return A2(
							$author$project$Components$Molecules$Modal$confirm,
							{
								aZ: c.aZ,
								n: c.n,
								a1: c.a1,
								D: c.D,
								t: $author$project$Conf$ids.gU,
								bg: c.bg,
								aw: $author$project$PagesComponents$Projects$Models$ModalClose(
									A2($author$project$PagesComponents$Projects$Models$ConfirmAnswer, false, $elm$core$Platform$Cmd$none)),
								bk: $author$project$PagesComponents$Projects$Models$ModalClose(
									A2($author$project$PagesComponents$Projects$Models$ConfirmAnswer, true, c.bk)),
								aj: c.aj
							},
							model.d6);
					},
					model.a1))
			]));
};
var $author$project$PagesComponents$Projects$View$viewProjects = F2(
	function (shared, model) {
		return A6(
			$author$project$PagesComponents$Helpers$appShell,
			function (link) {
				return $author$project$PagesComponents$Projects$Models$SelectMenu(link.dh);
			},
			$author$project$PagesComponents$Projects$Models$ToggleMobileMenu,
			model,
			_List_fromArray(
				[
					$elm$html$Html$text(model.b9)
				]),
			_List_fromArray(
				[
					A2($author$project$PagesComponents$Projects$View$viewContent, shared, model)
				]),
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$View$viewModal(model)
				]));
	});
var $author$project$Pages$Projects$view = F2(
	function (shared, model) {
		return {
			eV: A2($author$project$PagesComponents$Projects$View$viewProjects, shared, model),
			aj: 'Azimutt - Explore your database schema'
		};
	});
var $author$project$Pages$Projects$page = F2(
	function (shared, req) {
		return $author$project$Page$element(
			{
				Y: $author$project$Pages$Projects$init,
				ab: $author$project$Pages$Projects$subscriptions,
				ac: $author$project$Pages$Projects$update(req),
				eQ: $author$project$Pages$Projects$view(shared)
			});
	});
var $author$project$PagesComponents$Projects$Id_$Models$ErdConf$default = {dy: true, bM: true, dH: false, dM: false, aq: true, as: true, fC: true, eq: true, c9: true, jh: true};
var $author$project$Pages$Projects$Id_$init = _Utils_Tuple2(
	{
		B: $author$project$PagesComponents$Projects$Id_$Models$ErdConf$default,
		a1: $elm$core$Maybe$Nothing,
		gW: $elm$core$Maybe$Nothing,
		g_: 1,
		cF: $elm$core$Maybe$Nothing,
		ha: $elm$core$Maybe$Nothing,
		bM: $elm$core$Maybe$Nothing,
		hr: $elm$core$Maybe$Nothing,
		bP: $elm$core$Maybe$Nothing,
		bR: $elm$core$Maybe$Nothing,
		hL: false,
		h8: {
			bi: false,
			er: {al: 0, dh: ''}
		},
		h9: $elm$core$Maybe$Nothing,
		iw: _List_Nil,
		aR: '',
		c_: '',
		iL: $elm$core$Maybe$Nothing,
		i4: $elm$core$Maybe$Nothing,
		i6: $author$project$Models$ScreenProps$zero,
		i9: $elm$core$Maybe$Nothing,
		dc: $elm$core$Maybe$Nothing,
		jc: $elm$core$Maybe$Nothing,
		jj: $elm$core$Maybe$Nothing,
		jF: 0,
		aW: _List_Nil,
		jI: $elm$core$Maybe$Nothing
	},
	$elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				$author$project$Ports$setClasses(
				{eV: 'h-full', hx: 'h-full'}),
				$author$project$Ports$trackPage('app'),
				$author$project$Ports$loadProjects,
				$author$project$Ports$listenHotkeys($author$project$Conf$hotkeys)
			])));
var $author$project$Pages$Projects$Id_$page = F2(
	function (shared, req) {
		return $author$project$Page$element(
			{
				Y: $author$project$Pages$Projects$Id_$init,
				ab: $author$project$PagesComponents$Projects$Id_$Subscriptions$subscriptions,
				ac: A3(
					$author$project$PagesComponents$Projects$Id_$Updates$update,
					$elm$core$Maybe$Just(req.iB.t),
					$elm$core$Maybe$Nothing,
					shared.ii),
				eQ: $author$project$PagesComponents$Projects$Id_$Views$view(shared)
			});
	});
var $author$project$PagesComponents$Projects$New$Models$Import = 1;
var $author$project$PagesComponents$Projects$New$Models$Sample = 2;
var $author$project$PagesComponents$Projects$New$Models$SampleSelectMsg = function (a) {
	return {$: 11, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$Schema = 0;
var $author$project$Services$ProjectImport$SelectRemoteFile = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Services$ProjectImport$init = {fL: $elm$core$Maybe$Nothing, da: $elm$core$Maybe$Nothing, f1: $elm$core$Maybe$Nothing};
var $author$project$Pages$Projects$New$setSelectedTab = F2(
	function (tab, model) {
		switch (tab) {
			case 0:
				return _Utils_update(
					model,
					{
						c2: $elm$core$Maybe$Nothing,
						c6: $elm$core$Maybe$Nothing,
						db: tab,
						dd: $elm$core$Maybe$Just(
							A2($author$project$Services$SqlSourceUpload$init, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing))
					});
			case 1:
				return _Utils_update(
					model,
					{
						c2: $elm$core$Maybe$Just($author$project$Services$ProjectImport$init),
						c6: $elm$core$Maybe$Nothing,
						db: tab,
						dd: $elm$core$Maybe$Nothing
					});
			default:
				return _Utils_update(
					model,
					{
						c2: $elm$core$Maybe$Nothing,
						c6: $elm$core$Maybe$Just($author$project$Services$ProjectImport$init),
						db: tab,
						dd: $elm$core$Maybe$Nothing
					});
		}
	});
var $author$project$Pages$Projects$New$init = function (req) {
	var tab = A2($elm$core$Dict$get, 'tab', req.fU);
	var sample = A2(
		$elm$core$Maybe$andThen,
		function (key) {
			return A2($elm$core$Dict$get, key, $author$project$Conf$schemaSamples);
		},
		A2($elm$core$Dict$get, 'sample', req.fU));
	var selectedTab = A2(
		$elm$core$Maybe$withDefault,
		function () {
			_v1$3:
			while (true) {
				if (!tab.$) {
					switch (tab.a) {
						case 'schema':
							return 0;
						case 'import':
							return 1;
						case 'sample':
							return 2;
						default:
							break _v1$3;
					}
				} else {
					break _v1$3;
				}
			}
			return 0;
		}(),
		A2(
			$elm$core$Maybe$map,
			function (_v0) {
				return 2;
			},
			sample));
	return _Utils_Tuple2(
		A2(
			$author$project$Pages$Projects$New$setSelectedTab,
			selectedTab,
			{a1: $elm$core$Maybe$Nothing, bi: false, eg: '', iw: _List_Nil, c2: $elm$core$Maybe$Nothing, b5: _List_Nil, c6: $elm$core$Maybe$Nothing, b9: 'New project', db: 2, dd: $elm$core$Maybe$Nothing, jF: 0, aW: _List_Nil}),
		$elm$core$Platform$Cmd$batch(
			_Utils_ap(
				_List_fromArray(
					[
						$author$project$Ports$setClasses(
						{eV: 'h-full', hx: 'h-full bg-gray-100'}),
						$author$project$Ports$trackPage('new-project'),
						$author$project$Ports$loadProjects
					]),
				A3(
					$author$project$Libs$Maybe$mapOrElse,
					function (s) {
						return _List_fromArray(
							[
								$author$project$Libs$Task$send(
								$author$project$PagesComponents$Projects$New$Models$SampleSelectMsg(
									A2(
										$author$project$Services$ProjectImport$SelectRemoteFile,
										s.jH,
										$elm$core$Maybe$Just(s.bU))))
							]);
					},
					_List_Nil,
					sample))));
};
var $author$project$PagesComponents$Projects$New$Models$JsMessage = function (a) {
	return {$: 22, a: a};
};
var $author$project$Pages$Projects$New$subscriptions = function (_v0) {
	return $author$project$Ports$onJsMessage($author$project$PagesComponents$Projects$New$Models$JsMessage);
};
var $author$project$PagesComponents$Projects$New$Models$ModalOpen = function (a) {
	return {$: 20, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg = function (a) {
	return {$: 4, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$ToastHide = function (a) {
	return {$: 16, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$ToastRemove = function (a) {
	return {$: 17, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$ToastShow = F2(
	function (a, b) {
		return {$: 15, a: a, b: b};
	});
var $author$project$Models$Project$create = F3(
	function (id, name, source) {
		return A9(
			$author$project$Models$Project$new,
			id,
			name,
			_List_fromArray(
				[source]),
			$author$project$Models$Project$Layout$init(source.e1),
			$elm$core$Maybe$Nothing,
			$elm$core$Dict$empty,
			$author$project$Models$Project$ProjectSettings$init,
			source.e1,
			source.gj);
	});
var $author$project$Track$createProject = $author$project$Track$projectEvent('create');
var $author$project$PagesComponents$Projects$New$Models$ProjectImportMsg = function (a) {
	return {$: 7, a: a};
};
var $author$project$Services$ProjectImport$FileLoaded = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Services$ProjectImport$gotLocalFile = F2(
	function (projectId, content) {
		return A2($author$project$Services$ProjectImport$FileLoaded, projectId, content);
	});
var $author$project$Services$ProjectImport$gotRemoteFile = F2(
	function (projectId, content) {
		return A2($author$project$Services$ProjectImport$FileLoaded, projectId, content);
	});
var $author$project$PagesComponents$Projects$New$Models$ToastAdd = F2(
	function (a, b) {
		return {$: 14, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$New$Models$toastError = function (message) {
	return A2(
		$author$project$PagesComponents$Projects$New$Models$ToastAdd,
		$elm$core$Maybe$Nothing,
		{n: $author$project$Libs$Tailwind$red, D: 95, bg: '', aj: message});
};
var $author$project$Pages$Projects$New$handleJsMessage = F2(
	function (msg, model) {
		switch (msg.$) {
			case 1:
				var _v1 = msg.a;
				var projects = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							b5: A2(
								$elm$core$List$sortBy,
								function (p) {
									return -$elm$time$Time$posixToMillis(p.gj);
								},
								projects)
						}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var now = msg.a;
				var projectId = msg.b;
				var sourceId = msg.c;
				var file = msg.d;
				var content = msg.e;
				return A2($elm$core$String$endsWith, '.json', file.cW) ? _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$New$Models$ProjectImportMsg(
							A2($author$project$Services$ProjectImport$gotLocalFile, projectId, content)))) : (A2($elm$core$String$endsWith, '.sql', file.cW) ? _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg(
							A5($author$project$Services$SqlSourceUpload$gotLocalFile, now, projectId, sourceId, file, content)))) : _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$New$Models$toastError('File should end with .json or .sql, ' + (file.cW + ' is not handled :(')))));
			case 3:
				var now = msg.a;
				var projectId = msg.b;
				var sourceId = msg.c;
				var url = msg.d;
				var content = msg.e;
				var sample = msg.f;
				return A2(
					$elm$core$String$endsWith,
					'.json',
					$author$project$Libs$Models$FileUrl$filename(url)) ? (_Utils_eq(sample, $elm$core$Maybe$Nothing) ? _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$New$Models$ProjectImportMsg(
							A2($author$project$Services$ProjectImport$gotRemoteFile, projectId, content)))) : _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$New$Models$SampleSelectMsg(
							A2($author$project$Services$ProjectImport$gotRemoteFile, projectId, content))))) : (A2(
					$elm$core$String$endsWith,
					'.sql',
					$author$project$Libs$Models$FileUrl$filename(url)) ? _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg(
							A6($author$project$Services$SqlSourceUpload$gotRemoteFile, now, projectId, sourceId, url, content, sample)))) : _Utils_Tuple2(
					model,
					$author$project$Libs$Task$send(
						$author$project$PagesComponents$Projects$New$Models$toastError('File should end with .json or .sql, ' + (url + ' is not handled :(')))));
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Track$importProject = $author$project$Track$projectEvent('import');
var $author$project$Services$Lenses$setProjectImport = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.c2;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{c2: value});
		}));
var $author$project$Services$Lenses$mapProjectImportM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.c2;
	},
	$author$project$Services$Lenses$setProjectImport);
var $author$project$Services$Lenses$mapProjectImportMCmd = A2(
	$author$project$Services$Lenses$mapMCmd,
	function ($) {
		return $.c2;
	},
	$author$project$Services$Lenses$setProjectImport);
var $author$project$Services$Lenses$setSampleSelection = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.c6;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{c6: value});
		}));
var $author$project$Services$Lenses$mapSampleSelectionM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.c6;
	},
	$author$project$Services$Lenses$setSampleSelection);
var $author$project$Services$Lenses$mapSampleSelectionMCmd = A2(
	$author$project$Services$Lenses$mapMCmd,
	function ($) {
		return $.c6;
	},
	$author$project$Services$Lenses$setSampleSelection);
var $author$project$Services$Lenses$setSqlSourceUpload = A2(
	$author$project$Services$Lenses$set,
	function ($) {
		return $.dd;
	},
	F2(
		function (value, item) {
			return _Utils_update(
				item,
				{dd: value});
		}));
var $author$project$Services$Lenses$mapSqlSourceUploadM = A2(
	$author$project$Services$Lenses$mapM,
	function ($) {
		return $.dd;
	},
	$author$project$Services$Lenses$setSqlSourceUpload);
var $author$project$Services$Lenses$mapSqlSourceUploadMCmd = A2(
	$author$project$Services$Lenses$mapMCmd,
	function ($) {
		return $.dd;
	},
	$author$project$Services$Lenses$setSqlSourceUpload);
var $author$project$Request$pushRoute = F2(
	function (route, req) {
		return A2(
			$elm$browser$Browser$Navigation$pushUrl,
			req.bU,
			$author$project$Gen$Route$toHref(route));
	});
var $author$project$Libs$String$unique = F2(
	function (takenIds, id) {
		unique:
		while (true) {
			if (A2(
				$elm$core$List$any,
				function (taken) {
					return _Utils_eq(taken, id);
				},
				takenIds)) {
				var _v0 = A2($author$project$Libs$Regex$matches, '^(.*?)([0-9]+)?(\\.[a-z]+)?$', id);
				if ((((_v0.b && (!_v0.a.$)) && _v0.b.b) && _v0.b.b.b) && (!_v0.b.b.b.b)) {
					var prefix = _v0.a.a;
					var _v1 = _v0.b;
					var num = _v1.a;
					var _v2 = _v1.b;
					var extension = _v2.a;
					var $temp$takenIds = takenIds,
						$temp$id = _Utils_ap(
						prefix,
						_Utils_ap(
							$elm$core$String$fromInt(
								A3(
									$author$project$Libs$Maybe$mapOrElse,
									function (n) {
										return n + 1;
									},
									2,
									A2($elm$core$Maybe$andThen, $elm$core$String$toInt, num))),
							A2($elm$core$Maybe$withDefault, '', extension)));
					takenIds = $temp$takenIds;
					id = $temp$id;
					continue unique;
				} else {
					return id + '-err';
				}
			} else {
				return id;
			}
		}
	});
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $author$project$Services$ProjectImport$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				var file = msg.a;
				return _Utils_Tuple2(
					function (m) {
						return _Utils_update(
							m,
							{
								da: $elm$core$Maybe$Just(file)
							});
					}($author$project$Services$ProjectImport$init),
					A3($author$project$Ports$readLocalFile, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, file));
			case 1:
				var url = msg.a;
				var sample = msg.b;
				return _Utils_Tuple2(
					function (m) {
						return _Utils_update(
							m,
							{
								f1: $elm$core$Maybe$Just(
									{i3: sample, jH: url})
							});
					}($author$project$Services$ProjectImport$init),
					A4($author$project$Ports$readRemoteFile, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, url, sample));
			default:
				var projectId = msg.a;
				var content = msg.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							fL: $elm$core$Maybe$Just(
								_Utils_Tuple2(
									projectId,
									A2($elm$json$Json$Decode$decodeString, $author$project$Models$Project$decode, content)))
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$Projects$New$update = F3(
	function (req, msg, model) {
		switch (msg.$) {
			case 0:
				var menu = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{b9: menu}),
					$elm$core$Platform$Cmd$none);
			case 1:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bi: !model.bi}),
					$elm$core$Platform$Cmd$none);
			case 2:
				var id = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							eg: A3(
								$author$project$Libs$Bool$cond,
								_Utils_eq(model.eg, id),
								'',
								id)
						}),
					$elm$core$Platform$Cmd$none);
			case 3:
				var tab = msg.a;
				return _Utils_Tuple2(
					A2($author$project$Pages$Projects$New$setSelectedTab, tab, model),
					$elm$core$Platform$Cmd$none);
			case 4:
				var message = msg.a;
				return A2(
					$author$project$Services$Lenses$mapSqlSourceUploadMCmd,
					A2($author$project$Services$SqlSourceUpload$update, message, $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg),
					model);
			case 5:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapSqlSourceUploadM,
						function (_v1) {
							return A2($author$project$Services$SqlSourceUpload$init, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing);
						},
						model),
					$elm$core$Platform$Cmd$none);
			case 6:
				var projectId = msg.a;
				var source = msg.b;
				return function (project) {
					return _Utils_Tuple2(
						model,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$Ports$saveProject(project),
									$author$project$Ports$track(
									$author$project$Track$createProject(project)),
									A2(
									$author$project$Request$pushRoute,
									$author$project$Gen$Route$Projects__Id_(
										{t: project.t}),
									req)
								])));
				}(
					A3(
						$author$project$Models$Project$create,
						projectId,
						A2(
							$author$project$Libs$String$unique,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.cW;
								},
								model.b5),
							source.cW),
						source));
			case 7:
				var message = msg.a;
				return A2(
					$author$project$Services$Lenses$mapProjectImportMCmd,
					$author$project$Services$ProjectImport$update(message),
					model);
			case 8:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapProjectImportM,
						function (_v2) {
							return $author$project$Services$ProjectImport$init;
						},
						model),
					$elm$core$Platform$Cmd$none);
			case 9:
				var project = msg.a;
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$saveProject(project),
								$author$project$Ports$track(
								$author$project$Track$importProject(project)),
								A2(
								$author$project$Request$pushRoute,
								$author$project$Gen$Route$Projects__Id_(
									{t: project.t}),
								req)
							])));
			case 10:
				var id = msg.a;
				var project = msg.b;
				return function (p) {
					return _Utils_Tuple2(
						model,
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									$author$project$Ports$saveProject(p),
									$author$project$Ports$track(
									$author$project$Track$importProject(p)),
									A2(
									$author$project$Request$pushRoute,
									$author$project$Gen$Route$Projects__Id_(
										{t: p.t}),
									req)
								])));
				}(
					_Utils_update(
						project,
						{
							t: id,
							cW: A2(
								$author$project$Libs$String$unique,
								A2(
									$elm$core$List$map,
									function ($) {
										return $.cW;
									},
									model.b5),
								project.cW)
						}));
			case 11:
				var message = msg.a;
				return A2(
					$author$project$Services$Lenses$mapSampleSelectionMCmd,
					$author$project$Services$ProjectImport$update(message),
					model);
			case 12:
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapSampleSelectionM,
						function (_v3) {
							return $author$project$Services$ProjectImport$init;
						},
						model),
					$elm$core$Platform$Cmd$none);
			case 13:
				var project = msg.a;
				return _Utils_Tuple2(
					model,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								$author$project$Ports$saveProject(project),
								$author$project$Ports$track(
								$author$project$Track$importProject(project)),
								A2(
								$author$project$Request$pushRoute,
								$author$project$Gen$Route$Projects__Id_(
									{t: project.t}),
								req)
							])));
			case 14:
				var millis = msg.a;
				var toast = msg.b;
				return function (key) {
					return _Utils_Tuple2(
						A2(
							$author$project$Services$Lenses$mapToasts,
							function (t) {
								return A2(
									$elm$core$List$cons,
									{bI: toast, ar: false, bU: key},
									t);
							},
							A2($author$project$Services$Lenses$setToastIdx, model.jF + 1, model)),
						A2(
							$author$project$Libs$Task$sendAfter,
							1,
							A2($author$project$PagesComponents$Projects$New$Models$ToastShow, millis, key)));
				}(
					$elm$core$String$fromInt(model.jF));
			case 15:
				var millis = msg.a;
				var key = msg.b;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapToasts,
						A3(
							$author$project$Services$Lenses$mapList,
							function ($) {
								return $.bU;
							},
							key,
							$author$project$Services$Lenses$setIsOpen(true)),
						model),
					A3(
						$author$project$Libs$Maybe$mapOrElse,
						function (delay) {
							return A2(
								$author$project$Libs$Task$sendAfter,
								delay,
								$author$project$PagesComponents$Projects$New$Models$ToastHide(key));
						},
						$elm$core$Platform$Cmd$none,
						millis));
			case 16:
				var key = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapToasts,
						A3(
							$author$project$Services$Lenses$mapList,
							function ($) {
								return $.bU;
							},
							key,
							$author$project$Services$Lenses$setIsOpen(false)),
						model),
					A2(
						$author$project$Libs$Task$sendAfter,
						300,
						$author$project$PagesComponents$Projects$New$Models$ToastRemove(key)));
			case 17:
				var key = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapToasts,
						$elm$core$List$filter(
							function (t) {
								return !_Utils_eq(t.bU, key);
							}),
						model),
					$elm$core$Platform$Cmd$none);
			case 18:
				var confirm = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$setConfirm,
						$elm$core$Maybe$Just(
							{bI: confirm, t: $author$project$Conf$ids.gU}),
						model),
					A2(
						$author$project$Libs$Task$sendAfter,
						1,
						$author$project$PagesComponents$Projects$New$Models$ModalOpen($author$project$Conf$ids.gU)));
			case 19:
				var answer = msg.a;
				var cmd = msg.b;
				return _Utils_Tuple2(
					A2($author$project$Services$Lenses$setConfirm, $elm$core$Maybe$Nothing, model),
					A3($author$project$Libs$Bool$cond, answer, cmd, $elm$core$Platform$Cmd$none));
			case 20:
				var id = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapOpenedDialogs,
						function (dialogs) {
							return A2($elm$core$List$cons, id, dialogs);
						},
						model),
					$author$project$Ports$autofocusWithin(id));
			case 21:
				var message = msg.a;
				return _Utils_Tuple2(
					A2(
						$author$project$Services$Lenses$mapOpenedDialogs,
						$elm$core$List$drop(1),
						model),
					A2($author$project$Libs$Task$sendAfter, $author$project$Conf$ui.gR, message));
			case 22:
				var message = msg.a;
				return A2($author$project$Pages$Projects$New$handleJsMessage, message, model);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Components$Atoms$Icon$ArrowLeft = 9;
var $author$project$Components$Atoms$Icon$FolderDownload = 108;
var $author$project$Components$Atoms$Icon$Gift = 111;
var $author$project$PagesComponents$Projects$New$Models$SelectMenu = function (a) {
	return {$: 0, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$ToggleMobileMenu = {$: 1};
var $elm$html$Html$aside = _VirtualDom_node('aside');
var $author$project$PagesComponents$Projects$New$Models$SelectTab = function (a) {
	return {$: 3, a: a};
};
var $author$project$PagesComponents$Projects$New$View$viewTab = F2(
	function (selected, tab) {
		return _Utils_eq(tab.bt, selected) ? A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(''),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'bg-primary-50 border-primary-500 text-primary-700 border-l-4 px-3 py-2 flex items-center text-sm font-medium',
							$author$project$Libs$Tailwind$hover(
							_List_fromArray(
								['bg-primary-50 text-primary-700']))
						])),
					$author$project$Libs$Html$Attributes$ariaCurrent('page')
				]),
			_List_fromArray(
				[
					A2($author$project$Components$Atoms$Icon$outline, tab.D, '-ml-1 mr-3 text-primary-500'),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['truncate']))
						]),
					tab.bI)
				])) : A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(''),
					$elm$html$Html$Events$onClick(
					$author$project$PagesComponents$Projects$New$Models$SelectTab(tab.bt)),
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'border-transparent text-gray-900 border-l-4 px-3 py-2 flex items-center text-sm font-medium',
							$author$project$Libs$Tailwind$hover(
							_List_fromArray(
								['bg-gray-50 text-gray-900']))
						]))
				]),
			_List_fromArray(
				[
					A2($author$project$Components$Atoms$Icon$outline, tab.D, '-ml-1 mr-3 text-gray-400'),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['truncate']))
						]),
					tab.bI)
				]));
	});
var $author$project$PagesComponents$Projects$New$Models$Noop = {$: 23};
var $author$project$Services$ProjectImport$SelectLocalFile = function (a) {
	return {$: 0, a: a};
};
var $author$project$Components$Atoms$Icon$FolderAdd = 107;
var $author$project$Components$Molecules$FileInput$projectFile = F3(
	function (htmlId, onSelect, noop) {
		return $author$project$Components$Molecules$FileInput$input(
			{
				bI: A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['space-y-1 text-center']))
						]),
					_List_fromArray(
						[
							A2($author$project$Components$Atoms$Icon$outline2x, 107, 'mx-auto'),
							A2(
							$elm$html$Html$p,
							_List_Nil,
							_List_fromArray(
								[
									A2(
									$elm$html$Html$span,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['text-primary-600']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Upload a project file')
										])),
									$elm$html$Html$text(' or drag and drop')
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['text-xs']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('.json file only')
								]))
						])),
				t: htmlId,
				bh: _List_fromArray(
					['.json']),
				aO: F2(
					function (f, _v0) {
						return onSelect(f);
					}),
				aP: $elm$core$Maybe$Nothing,
				aQ: F2(
					function (_v1, _v2) {
						return noop;
					}),
				bl: onSelect
			});
	});
var $author$project$PagesComponents$Projects$New$View$viewHeading = F2(
	function (title, description) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h2,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['text-lg leading-6 font-medium text-gray-900']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(title)
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['mt-1 text-sm text-gray-500']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(description)
						]))
				]));
	});
var $author$project$PagesComponents$Projects$New$Models$ProjectImportCreate = function (a) {
	return {$: 9, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$ProjectImportCreateNew = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$New$Models$ProjectImportDrop = {$: 8};
var $author$project$PagesComponents$Projects$New$Models$ConfirmOpen = function (a) {
	return {$: 18, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$confirm = F3(
	function (title, content, message) {
		return $author$project$PagesComponents$Projects$New$Models$ConfirmOpen(
			{
				aZ: 'Nope',
				n: $author$project$Libs$Tailwind$blue,
				a1: 'Yes!',
				D: 167,
				bg: content,
				bk: $author$project$Libs$Task$send(message),
				aj: title
			});
	});
var $author$project$Libs$Tailwind$bg_200 = function (_v0) {
	var color = _v0;
	return 'bg-' + (color + '-200');
};
var $author$project$Components$Atoms$Button$secondary = function (color) {
	return $author$project$Libs$Tailwind$batch(
		_List_fromArray(
			[
				'border-transparent',
				$author$project$Libs$Tailwind$text_700(color),
				$author$project$Libs$Tailwind$bg_100(color),
				$author$project$Libs$Tailwind$hover(
				_List_fromArray(
					[
						$author$project$Libs$Tailwind$bg_200(color)
					])),
				$author$project$Libs$Tailwind$disabled(
				_List_fromArray(
					[
						'cursor-not-allowed',
						$author$project$Libs$Tailwind$bg_100(color),
						$author$project$Libs$Tailwind$text_300(color)
					]))
			]));
};
var $author$project$Components$Atoms$Button$secondary3 = A2($author$project$Components$Atoms$Button$build, $author$project$Components$Atoms$Button$secondary, $author$project$Components$Atoms$Button$size3);
var $elm$core$Result$toMaybe = function (result) {
	if (!result.$) {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Services$ProjectImport$viewDiffAlert = F4(
	function (zone, isSample, old, _new) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-6')
				]),
			_List_fromArray(
				[
					A2(
					$author$project$Components$Molecules$Alert$withDescription,
					{n: $author$project$Libs$Tailwind$yellow, D: 95, aj: 'Oh! You already have this project here.'},
					isSample ? _List_Nil : _List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_Nil,
							_List_fromArray(
								[
									$elm$html$Html$text('This project already exist in Azimutt (same id), compare the differences below to decide what to do:')
								])),
							A2(
							$elm$html$Html$ul,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('list-disc list-inside')
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$li,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											'Existing project has been last modified on ' + (A2($author$project$Libs$DateTime$formatDate, zone, old.gj) + (' while imported one was updated on ' + A2($author$project$Libs$DateTime$formatDate, zone, _new.gj))))
										])),
									A2(
									$elm$html$Html$li,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											'Existing project has ' + (A2($author$project$Libs$String$pluralizeD, 'table', old.jr) + (' and ' + (A2($author$project$Libs$String$pluralizeL, 'relation', old.iU) + (', the imported one has ' + (A2($author$project$Libs$String$pluralizeD, 'table', _new.jr) + (' and ' + (A2($author$project$Libs$String$pluralizeL, 'relation', _new.iU) + '.'))))))))
										])),
									A2(
									$elm$html$Html$li,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											'Existing project has ' + (A2($author$project$Libs$String$pluralizeD, 'layout', old.d_) + (', the imported one has ' + (A2($author$project$Libs$String$pluralizeD, 'layout', _new.d_) + '.'))))
										]))
								]))
						]))
				]));
	});
var $author$project$Libs$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $author$project$Libs$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $author$project$Libs$Json$Decode$indent(
			$author$project$Libs$Json$Decode$errorToStringNoValue(error))));
	});
var $author$project$Libs$Json$Decode$errorToStringNoValue = function (error) {
	return A2($author$project$Libs$Json$Decode$errorToStringNoValueInternal, error, _List_Nil);
};
var $author$project$Libs$Json$Decode$errorToStringNoValueInternal = F2(
	function (error, context) {
		errorToStringNoValueInternal:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringNoValueInternal;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringNoValueInternal;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringNoValueInternal;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $author$project$Libs$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var introduction = function () {
						if (!context.b) {
							return '';
						} else {
							return 'Problem at \'' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + '\': ');
						}
					}();
					return _Utils_ap(introduction, msg);
			}
		}
	});
var $author$project$Services$ProjectImport$viewLogsError = function (error) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('Failed to decode project 😱')
					])),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('text-red-500')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(
						$author$project$Libs$Json$Decode$errorToStringNoValue(error))
					])),
				A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('This is quite sad, you can try to fix the format yourself or '),
						A3(
						$author$project$Libs$Html$extLink,
						$author$project$Conf$constants.gu,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('link')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('open an issue on GitHub')
							])),
						$elm$html$Html$text('.')
					]))
			]));
};
var $author$project$Services$ProjectImport$viewLogsProject = F3(
	function (zone, isSample, project) {
		return isSample ? A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Successfully decoded project.')
						]))
				])) : A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Successfully decoded project ' + (project.cW + '.'))
						])),
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							'It was created on ' + (A2($author$project$Libs$DateTime$formatDate, zone, project.e1) + (' and last modified on ' + (A2($author$project$Libs$DateTime$formatDate, zone, project.gj) + '.'))))
						])),
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							'It has ' + (A2($author$project$Libs$String$pluralizeD, 'layout', project.d_) + (' and ' + (A2($author$project$Libs$String$pluralizeL, 'source', project.cc) + (', containing ' + (A2($author$project$Libs$String$pluralizeD, 'table', project.jr) + (' and ' + (A2($author$project$Libs$String$pluralizeL, 'relation', project.iU) + '.'))))))))
						]))
				]));
	});
var $author$project$Services$ProjectImport$viewLogs = F4(
	function (zone, isSample, fileName, parsedProject) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mt-6 px-4 py-2 max-h-96 overflow-y-auto font-mono text-xs bg-gray-50 shadow rounded-lg')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Loaded ' + (fileName + '.'))
						])),
					A3(
					$author$project$Libs$Maybe$mapOrElse,
					A2(
						$author$project$Libs$Result$fold,
						$author$project$Services$ProjectImport$viewLogsError,
						A2($author$project$Services$ProjectImport$viewLogsProject, zone, isSample)),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					A2($elm$core$Maybe$map, $elm$core$Tuple$second, parsedProject))
				]));
	});
var $author$project$Services$ProjectImport$viewParsing = F3(
	function (zone, currentProjects, model) {
		var isSample = !_Utils_eq(
			A2(
				$elm$core$Maybe$andThen,
				function ($) {
					return $.i3;
				},
				model.f1),
			$elm$core$Maybe$Nothing);
		return A3(
			$author$project$Libs$Maybe$mapOrElse,
			function (fileName) {
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mt-6')
								]),
							_List_fromArray(
								[
									$author$project$Components$Molecules$Divider$withLabel(
									A3(
										$author$project$Libs$Maybe$mapOrElse,
										function (_v1) {
											return 'Parsed!';
										},
										'Parsing ...',
										model.fL))
								])),
							A4($author$project$Services$ProjectImport$viewLogs, zone, isSample, fileName, model.fL),
							A2(
							$elm$core$Maybe$withDefault,
							A2($elm$html$Html$div, _List_Nil, _List_Nil),
							A2(
								$elm$core$Maybe$andThen,
								function (project) {
									return A2(
										$elm$core$Maybe$map,
										function (p) {
											return A4($author$project$Services$ProjectImport$viewDiffAlert, zone, isSample, p, project);
										},
										A2(
											$author$project$Libs$List$find,
											function (p) {
												return _Utils_eq(p.t, project.t);
											},
											currentProjects));
								},
								A2(
									$elm$core$Maybe$andThen,
									$elm$core$Result$toMaybe,
									A2($elm$core$Maybe$map, $elm$core$Tuple$second, model.fL))))
						]));
			},
			A2($elm$html$Html$div, _List_Nil, _List_Nil),
			A2(
				$author$project$Libs$Maybe$orElse,
				A2(
					$elm$core$Maybe$map,
					function (_v0) {
						var url = _v0.jH;
						var sample = _v0.i3;
						return A2($elm$core$Maybe$withDefault, url + ' file', sample);
					},
					model.f1),
				A2(
					$elm$core$Maybe$map,
					function (f) {
						return f.cW + ' file';
					},
					model.da)));
	});
var $author$project$PagesComponents$Projects$New$View$viewProjectImport = F3(
	function (zone, projects, projectImport) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3($author$project$Services$ProjectImport$viewParsing, zone, projects, projectImport),
					A2(
					$elm$core$Maybe$withDefault,
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var id = _v1.a;
							var project = _v1.b;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['mt-6']))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['flex justify-end']))
											]),
										A2(
											$elm$core$List$cons,
											A3(
												$author$project$Components$Atoms$Button$white3,
												$author$project$Libs$Tailwind$primary,
												_List_fromArray(
													[
														$elm$html$Html$Events$onClick($author$project$PagesComponents$Projects$New$Models$ProjectImportDrop)
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Don\'t import')
													])),
											A3(
												$author$project$Libs$Maybe$mapOrElse,
												function (p) {
													return _List_fromArray(
														[
															A3(
															$author$project$Components$Atoms$Button$secondary3,
															$author$project$Libs$Tailwind$red,
															_List_fromArray(
																[
																	$elm$html$Html$Events$onClick(
																	A3(
																		$author$project$PagesComponents$Projects$New$Models$confirm,
																		'Replace ' + (p.cW + ' project?'),
																		$elm$html$Html$text('This operation can\'t be undone'),
																		$author$project$PagesComponents$Projects$New$Models$ProjectImportCreate(project))),
																	$author$project$Libs$Html$Attributes$css(
																	_List_fromArray(
																		['ml-3']))
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text('Replace existing project')
																])),
															A3(
															$author$project$Components$Atoms$Button$primary3,
															$author$project$Libs$Tailwind$primary,
															_List_fromArray(
																[
																	$elm$html$Html$Events$onClick(
																	A2($author$project$PagesComponents$Projects$New$Models$ProjectImportCreateNew, id, project)),
																	$author$project$Libs$Html$Attributes$css(
																	_List_fromArray(
																		['ml-3']))
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text('Import in new project!')
																]))
														]);
												},
												_List_fromArray(
													[
														A3(
														$author$project$Components$Atoms$Button$primary3,
														$author$project$Libs$Tailwind$primary,
														_List_fromArray(
															[
																$elm$html$Html$Events$onClick(
																$author$project$PagesComponents$Projects$New$Models$ProjectImportCreate(project)),
																$author$project$Libs$Html$Attributes$css(
																_List_fromArray(
																	['ml-3']))
															]),
														_List_fromArray(
															[
																$elm$html$Html$text('Import project!')
															]))
													]),
												A2(
													$author$project$Libs$List$find,
													function (p) {
														return _Utils_eq(p.t, project.t);
													},
													projects))))
									]));
						},
						A2(
							$elm$core$Maybe$andThen,
							function (_v0) {
								var id = _v0.a;
								var res = _v0.b;
								return A2(
									$elm$core$Maybe$map,
									function (p) {
										return _Utils_Tuple2(id, p);
									},
									$elm$core$Result$toMaybe(res));
							},
							projectImport.fL)))
				]));
	});
var $author$project$PagesComponents$Projects$New$View$viewProjectImportTab = F4(
	function (htmlId, zone, projects, projectImport) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2($author$project$PagesComponents$Projects$New$View$viewHeading, 'Import an existing project', 'If you have an Azimutt project, you can load it here.'),
					A2(
					$elm$html$Html$form,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-6 grid grid-cols-1 gap-y-6 gap-x-4',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['grid-cols-6']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													$author$project$Libs$Tailwind$sm(
													_List_fromArray(
														['col-span-6']))
												]))
										]),
									_List_fromArray(
										[
											A3(
											$author$project$Components$Molecules$FileInput$projectFile,
											htmlId + '-file-upload',
											A2($elm$core$Basics$composeR, $author$project$Services$ProjectImport$SelectLocalFile, $author$project$PagesComponents$Projects$New$Models$ProjectImportMsg),
											$author$project$PagesComponents$Projects$New$Models$Noop)
										]))
								]))
						])),
					A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['mt-1 text-sm text-gray-500']))
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('If you have an existing project, you can download it at the bottom of project settings (top right cog).')
						])),
					A3($author$project$PagesComponents$Projects$New$View$viewProjectImport, zone, projects, projectImport)
				]));
	});
var $author$project$Libs$Maybe$all = F2(
	function (predicate, maybe) {
		return A2(
			$elm$core$Maybe$withDefault,
			true,
			A2($elm$core$Maybe$map, predicate, maybe));
	});
var $author$project$PagesComponents$Projects$New$Models$SampleSelectCreate = function (a) {
	return {$: 13, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$SampleSelectDrop = {$: 12};
var $author$project$Components$Atoms$Link$primary3 = A2($author$project$Components$Atoms$Link$build, $author$project$Components$Atoms$Button$primary, $author$project$Components$Atoms$Button$size3);
var $author$project$PagesComponents$Projects$New$View$viewSampleSelection = F3(
	function (zone, projects, projectImport) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3($author$project$Services$ProjectImport$viewParsing, zone, projects, projectImport),
					A2(
					$elm$core$Maybe$withDefault,
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					A2(
						$elm$core$Maybe$map,
						function (project) {
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['mt-6']))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['flex justify-end']))
											]),
										A2(
											$elm$core$List$cons,
											A3(
												$author$project$Components$Atoms$Button$white3,
												$author$project$Libs$Tailwind$primary,
												_List_fromArray(
													[
														$elm$html$Html$Events$onClick($author$project$PagesComponents$Projects$New$Models$SampleSelectDrop)
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Cancel')
													])),
											A3(
												$author$project$Libs$Maybe$mapOrElse,
												function (_v1) {
													return _List_fromArray(
														[
															A3(
															$author$project$Components$Atoms$Link$primary3,
															$author$project$Libs$Tailwind$primary,
															_List_fromArray(
																[
																	$elm$html$Html$Attributes$href(
																	$author$project$Gen$Route$toHref(
																		$author$project$Gen$Route$Projects__Id_(
																			{t: project.t}))),
																	$author$project$Libs$Html$Attributes$css(
																	_List_fromArray(
																		['ml-3']))
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text('View this project')
																]))
														]);
												},
												_List_fromArray(
													[
														A3(
														$author$project$Components$Atoms$Button$primary3,
														$author$project$Libs$Tailwind$primary,
														_List_fromArray(
															[
																$elm$html$Html$Events$onClick(
																$author$project$PagesComponents$Projects$New$Models$SampleSelectCreate(project)),
																$author$project$Libs$Html$Attributes$css(
																_List_fromArray(
																	['ml-3']))
															]),
														_List_fromArray(
															[
																$elm$html$Html$text('Load sample')
															]))
													]),
												A2(
													$author$project$Libs$List$find,
													function (p) {
														return _Utils_eq(p.t, project.t);
													},
													projects))))
									]));
						},
						A2(
							$elm$core$Maybe$andThen,
							function (_v0) {
								var res = _v0.b;
								return $elm$core$Result$toMaybe(res);
							},
							projectImport.fL)))
				]));
	});
var $author$project$PagesComponents$Projects$New$View$viewSampleSelectionTab = F3(
	function (zone, projects, projectImport) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2($author$project$PagesComponents$Projects$New$View$viewHeading, 'Explore a sample schema', 'If you want to see what Azimutt is capable of, you can pick a schema a play with it.'),
					$author$project$Components$Molecules$ItemList$withIcons(
					A2(
						$elm$core$List$map,
						function (sample) {
							return {
								al: A2(
									$author$project$Libs$Maybe$all,
									function (s) {
										return _Utils_eq(s, sample.bU);
									},
									A2(
										$elm$core$Maybe$andThen,
										function ($) {
											return $.i3;
										},
										projectImport.f1)),
								n: sample.n,
								cE: sample.cE,
								D: sample.D,
								ax: $author$project$PagesComponents$Projects$New$Models$SampleSelectMsg(
									A2(
										$author$project$Services$ProjectImport$SelectRemoteFile,
										sample.jH,
										$elm$core$Maybe$Just(sample.bU))),
								aj: sample.cW + (' (' + ($elm$core$String$fromInt(sample.jr) + ' tables)'))
							};
						},
						A2(
							$elm$core$List$sortBy,
							function ($) {
								return $.jr;
							},
							$elm$core$Dict$values($author$project$Conf$schemaSamples)))),
					A3($author$project$PagesComponents$Projects$New$View$viewSampleSelection, zone, projects, projectImport)
				]));
	});
var $author$project$PagesComponents$Projects$New$Models$ToggleCollapse = function (a) {
	return {$: 2, a: a};
};
var $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadCreate = F2(
	function (a, b) {
		return {$: 6, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadDrop = {$: 5};
var $author$project$PagesComponents$Projects$New$View$viewSqlSourceUpload = function (sqlSourceUpload) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		_List_fromArray(
			[
				A2($author$project$Services$SqlSourceUpload$viewParsing, $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg, sqlSourceUpload),
				A2(
				$elm$core$Maybe$withDefault,
				A2($elm$html$Html$div, _List_Nil, _List_Nil),
				A3(
					$elm$core$Maybe$map2,
					F2(
						function (_v0, source) {
							var projectId = _v0.a;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Libs$Html$Attributes$css(
										_List_fromArray(
											['mt-6']))
									]),
								_List_fromArray(
									[
										A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$author$project$Libs$Html$Attributes$css(
												_List_fromArray(
													['flex justify-end']))
											]),
										_List_fromArray(
											[
												A3(
												$author$project$Components$Atoms$Button$white3,
												$author$project$Libs$Tailwind$primary,
												_List_fromArray(
													[
														$elm$html$Html$Events$onClick($author$project$PagesComponents$Projects$New$Models$SqlSourceUploadDrop)
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Trash this')
													])),
												A3(
												$author$project$Components$Atoms$Button$primary3,
												$author$project$Libs$Tailwind$primary,
												_List_fromArray(
													[
														$elm$html$Html$Events$onClick(
														A2($author$project$PagesComponents$Projects$New$Models$SqlSourceUploadCreate, projectId, source)),
														$author$project$Libs$Html$Attributes$css(
														_List_fromArray(
															['ml-3']))
													]),
												_List_fromArray(
													[
														$elm$html$Html$text('Create project!')
													]))
											]))
									]));
						}),
					sqlSourceUpload.hM,
					sqlSourceUpload.ej))
			]));
};
var $author$project$PagesComponents$Projects$New$View$viewSchemaUploadTab = F3(
	function (htmlId, openedCollapse, sqlSourceUpload) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2($author$project$PagesComponents$Projects$New$View$viewHeading, 'Import your SQL schema', 'Everything stay on your machine, don\'t worry about your schema privacy.'),
					A2(
					$elm$html$Html$form,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-6 grid grid-cols-1 gap-y-6 gap-x-4',
											$author$project$Libs$Tailwind$sm(
											_List_fromArray(
												['grid-cols-6']))
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$div,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												[
													$author$project$Libs$Tailwind$sm(
													_List_fromArray(
														['col-span-6']))
												]))
										]),
									_List_fromArray(
										[
											A3(
											$author$project$Components$Molecules$FileInput$schemaFile,
											htmlId + '-file-upload',
											A2($elm$core$Basics$composeR, $author$project$Services$SqlSourceUpload$SelectLocalFile, $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg),
											$author$project$PagesComponents$Projects$New$Models$Noop)
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('my-3')
						]),
					_List_fromArray(
						[
							$author$project$Components$Molecules$Divider$withLabel('OR')
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('flex rounded-md shadow-sm')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 sm:text-sm')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Remote schema')
								])),
							A2(
							$elm$html$Html$input,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$type_('text'),
									$elm$html$Html$Attributes$id(htmlId + '-file-remote'),
									$elm$html$Html$Attributes$name(htmlId + '-file-remote'),
									$elm$html$Html$Attributes$placeholder('https://azimutt.app/samples/gospeak.sql'),
									$elm$html$Html$Attributes$value(
									A2($elm$core$Maybe$withDefault, '', sqlSourceUpload.f1)),
									$elm$html$Html$Events$onInput(
									A2($elm$core$Basics$composeR, $author$project$Services$SqlSourceUpload$UpdateRemoteFile, $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg)),
									$elm$html$Html$Events$onBlur(
									A3(
										$author$project$Libs$Maybe$mapOrElse,
										A2($elm$core$Basics$composeR, $author$project$Services$SqlSourceUpload$SelectRemoteFile, $author$project$PagesComponents$Projects$New$Models$SqlSourceUploadMsg),
										$author$project$PagesComponents$Projects$New$Models$Noop,
										sqlSourceUpload.f1)),
									$elm$html$Html$Attributes$class('flex-1 min-w-0 block w-full px-3 py-2 border-gray-300 rounded-none rounded-r-md sm:text-sm focus:ring-indigo-500 focus:border-indigo-500')
								]),
							_List_Nil)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								['mt-3']))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$New$Models$ToggleCollapse(htmlId + '-get-schema')),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['link text-sm text-gray-500']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('How to get my database schema?')
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-1 mb-3 p-3 border rounded border-gray-300',
											A3(
											$author$project$Libs$Bool$cond,
											_Utils_eq(openedCollapse, htmlId + '-get-schema'),
											'',
											'hidden')
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$p,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('An '),
											$author$project$Libs$Html$bText('SQL schema'),
											$elm$html$Html$text(' is a SQL file with all the needed instructions to create your database, so it contains your database structure. Here are some ways to get it:'),
											A2(
											$elm$html$Html$ul,
											_List_fromArray(
												[
													$author$project$Libs$Html$Attributes$css(
													_List_fromArray(
														['list-disc list-inside pl-3']))
												]),
											_List_fromArray(
												[
													A2(
													$elm$html$Html$li,
													_List_Nil,
													_List_fromArray(
														[
															$author$project$Libs$Html$bText('Export it'),
															$elm$html$Html$text(' from your database: connect to your database using your favorite client and follow the instructions to extract the schema (ex: '),
															A3(
															$author$project$Libs$Html$extLink,
															'https://stackoverflow.com/a/54504510/15051232',
															_List_fromArray(
																[
																	$author$project$Libs$Html$Attributes$css(
																	_List_fromArray(
																		['link']))
																]),
															_List_fromArray(
																[
																	$elm$html$Html$text('DBeaver')
																])),
															$elm$html$Html$text(')')
														])),
													A2(
													$elm$html$Html$li,
													_List_Nil,
													_List_fromArray(
														[
															$author$project$Libs$Html$bText('Find it'),
															$elm$html$Html$text(' in your project: some frameworks like Rails store the schema in your project, so you may have it (ex: with Rails it\'s '),
															A2(
															$author$project$Components$Atoms$Kbd$badge,
															_List_Nil,
															_List_fromArray(
																['db/structure.sql'])),
															$elm$html$Html$text(' if you use the SQL version)')
														]))
												]))
										])),
									A2(
									$elm$html$Html$p,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['mt-3']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('If you have no idea on what I\'m talking about just before, ask to the developers working on the project or your database administrator 😇')
										]))
								]))
						])),
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Events$onClick(
									$author$project$PagesComponents$Projects$New$Models$ToggleCollapse(htmlId + '-data-privacy')),
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['link text-sm text-gray-500']))
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('What about data privacy?')
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										[
											'mt-1 p-3 border rounded border-gray-300',
											A3(
											$author$project$Libs$Bool$cond,
											_Utils_eq(openedCollapse, htmlId + '-data-privacy'),
											'',
											'hidden')
										]))
								]),
							_List_fromArray(
								[
									A2(
									$elm$html$Html$p,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Your application schema may be a sensitive information, but no worries with Azimutt, everything stay on your machine. In fact, there is even no server at all!')
										])),
									A2(
									$elm$html$Html$p,
									_List_fromArray(
										[
											$author$project$Libs$Html$Attributes$css(
											_List_fromArray(
												['mt-3']))
										]),
									_List_fromArray(
										[
											$elm$html$Html$text('Your schema is read and '),
											$author$project$Libs$Html$bText('parsed in your browser'),
											$elm$html$Html$text(', and then saved with the layouts in your browser '),
											$author$project$Libs$Html$bText('local storage'),
											$elm$html$Html$text('. Nothing fancy ^^')
										]))
								]))
						])),
					$author$project$PagesComponents$Projects$New$View$viewSqlSourceUpload(sqlSourceUpload)
				]));
	});
var $author$project$PagesComponents$Projects$New$View$viewTabContent = F3(
	function (htmlId, zone, model) {
		var _v0 = model.db;
		switch (_v0) {
			case 0:
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					A2($author$project$PagesComponents$Projects$New$View$viewSchemaUploadTab, htmlId + '-schema', model.eg),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					model.dd);
			case 1:
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					A3($author$project$PagesComponents$Projects$New$View$viewProjectImportTab, htmlId + '-import', zone, model.b5),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					model.c2);
			default:
				return A3(
					$author$project$Libs$Maybe$mapOrElse,
					A2($author$project$PagesComponents$Projects$New$View$viewSampleSelectionTab, zone, model.b5),
					A2($elm$html$Html$div, _List_Nil, _List_Nil),
					model.c6);
		}
	});
var $author$project$PagesComponents$Projects$New$View$viewContent = F4(
	function (htmlId, zone, model, page) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Libs$Html$Attributes$css(
					_List_fromArray(
						[
							'divide-y',
							$author$project$Libs$Tailwind$lg(
							_List_fromArray(
								['grid grid-cols-12 divide-x']))
						]))
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$aside,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'py-6',
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['col-span-3']))
								]))
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$nav,
							_List_fromArray(
								[
									$author$project$Libs$Html$Attributes$css(
									_List_fromArray(
										['space-y-1']))
								]),
							A2(
								$elm$core$List$map,
								$author$project$PagesComponents$Projects$New$View$viewTab(model.db),
								page.eG))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$author$project$Libs$Html$Attributes$css(
							_List_fromArray(
								[
									'px-4 py-6',
									$author$project$Libs$Tailwind$sm(
									_List_fromArray(
										['p-6'])),
									$author$project$Libs$Tailwind$lg(
									_List_fromArray(
										['pb-8 col-span-9 rounded-r-lg']))
								]))
						]),
					_List_fromArray(
						[
							A3($author$project$PagesComponents$Projects$New$View$viewTabContent, htmlId + '-tab', zone, model)
						]))
				]));
	});
var $author$project$PagesComponents$Projects$New$Models$ConfirmAnswer = F2(
	function (a, b) {
		return {$: 19, a: a, b: b};
	});
var $author$project$PagesComponents$Projects$New$Models$ModalClose = function (a) {
	return {$: 21, a: a};
};
var $author$project$PagesComponents$Projects$New$View$viewConfirm = F2(
	function (opened, model) {
		return A2(
			$author$project$Components$Molecules$Modal$confirm,
			{
				aZ: model.bI.aZ,
				n: model.bI.n,
				a1: model.bI.a1,
				D: model.bI.D,
				t: model.t,
				bg: model.bI.bg,
				aw: $author$project$PagesComponents$Projects$New$Models$ModalClose(
					A2($author$project$PagesComponents$Projects$New$Models$ConfirmAnswer, false, $elm$core$Platform$Cmd$none)),
				bk: $author$project$PagesComponents$Projects$New$Models$ModalClose(
					A2($author$project$PagesComponents$Projects$New$Models$ConfirmAnswer, true, model.bI.bk)),
				aj: model.bI.aj
			},
			opened);
	});
var $author$project$PagesComponents$Projects$New$View$viewModal = function (model) {
	return A3(
		$elm$html$Html$Keyed$node,
		'div',
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('az-modals')
			]),
		A2(
			$elm$core$List$sortBy,
			function (_v0) {
				var id = _v0.a;
				return -A2(
					$elm$core$Maybe$withDefault,
					0,
					A2($author$project$Libs$List$indexOf, id, model.iw));
			},
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (m) {
							return _Utils_Tuple2(
								m.t,
								A2(
									$author$project$PagesComponents$Projects$New$View$viewConfirm,
									A2($author$project$Libs$List$has, m.t, model.iw),
									m));
						},
						model.a1)
					]))));
};
var $author$project$PagesComponents$Projects$New$View$viewToasts = function (toasts) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('az-toasts')
			]),
		_List_fromArray(
			[
				A2($author$project$Components$Molecules$Toast$container, toasts, $author$project$PagesComponents$Projects$New$Models$ToastHide)
			]));
};
var $author$project$PagesComponents$Projects$New$View$viewNewProject = F2(
	function (zone, model) {
		return A6(
			$author$project$PagesComponents$Helpers$appShell,
			function (link) {
				return $author$project$PagesComponents$Projects$New$Models$SelectMenu(link.dh);
			},
			$author$project$PagesComponents$Projects$New$Models$ToggleMobileMenu,
			model,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(
							$author$project$Gen$Route$toHref($author$project$Gen$Route$Projects))
						]),
					_List_fromArray(
						[
							A2($author$project$Components$Atoms$Icon$outline, 9, 'inline-block'),
							$elm$html$Html$text(' '),
							$elm$html$Html$text(model.b9)
						]))
				]),
			_List_fromArray(
				[
					A4(
					$author$project$PagesComponents$Projects$New$View$viewContent,
					'new-project',
					zone,
					model,
					{
						eG: _List_fromArray(
							[
								{
								bI: _List_fromArray(
									[
										$elm$html$Html$text('From SQL schema')
									]),
								D: 86,
								bt: 0
							},
								{
								bI: _List_fromArray(
									[
										$elm$html$Html$text('Import project'),
										A3(
										$author$project$Components$Atoms$Badge$rounded,
										$author$project$Libs$Tailwind$green,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$class('ml-3')
											]),
										_List_fromArray(
											[
												$elm$html$Html$text('New')
											]))
									]),
								D: 108,
								bt: 1
							},
								{
								bI: _List_fromArray(
									[
										$elm$html$Html$text('From sample')
									]),
								D: 111,
								bt: 2
							}
							])
					})
				]),
			_List_fromArray(
				[
					$author$project$PagesComponents$Projects$New$View$viewModal(model),
					$author$project$PagesComponents$Projects$New$View$viewToasts(model.aW)
				]));
	});
var $author$project$Pages$Projects$New$view = F2(
	function (shared, model) {
		return {
			eV: A2($author$project$PagesComponents$Projects$New$View$viewNewProject, shared.jL, model),
			aj: 'Azimutt - Explore your database schema'
		};
	});
var $author$project$Pages$Projects$New$page = F2(
	function (shared, req) {
		return $author$project$Page$element(
			{
				Y: $author$project$Pages$Projects$New$init(req),
				ab: $author$project$Pages$Projects$New$subscriptions,
				ac: $author$project$Pages$Projects$New$update(req),
				eQ: $author$project$Pages$Projects$New$view(shared)
			});
	});
var $author$project$Pages$PwaStart$init = _Utils_Tuple2(
	{},
	$elm$core$Platform$Cmd$batch(
		_List_fromArray(
			[
				$author$project$Ports$setClasses(
				{eV: 'h-full', hx: 'h-full'}),
				$author$project$Ports$trackPage('pwa-start'),
				$author$project$Ports$loadProjects
			])));
var $author$project$Pages$PwaStart$JsMessage = $elm$core$Basics$identity;
var $author$project$Pages$PwaStart$subscriptions = function (_v0) {
	return $author$project$Ports$onJsMessage($elm$core$Basics$identity);
};
var $author$project$Pages$PwaStart$update = F3(
	function (req, msg, model) {
		if (msg.$ === 1) {
			var _v1 = msg.a;
			var projects = _v1.b;
			return _Utils_Tuple2(
				model,
				A2(
					$author$project$Request$pushRoute,
					A3(
						$author$project$Libs$Maybe$mapOrElse,
						function (p) {
							return $author$project$Gen$Route$Projects__Id_(
								{t: p.t});
						},
						$author$project$Gen$Route$Projects,
						$elm$core$List$head(
							A2(
								$elm$core$List$sortBy,
								function (p) {
									return -$elm$time$Time$posixToMillis(p.gj);
								},
								projects))),
					req));
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Pages$PwaStart$view = function (_v0) {
	return {
		eV: _List_fromArray(
			[$author$project$Components$Atoms$Loader$fullScreen]),
		aj: 'Azimutt is loading...'
	};
};
var $author$project$Pages$PwaStart$page = F2(
	function (_v0, req) {
		return $author$project$Page$element(
			{
				Y: $author$project$Pages$PwaStart$init,
				ab: $author$project$Pages$PwaStart$subscriptions,
				ac: $author$project$Pages$PwaStart$update(req),
				eQ: $author$project$Pages$PwaStart$view
			});
	});
var $author$project$Gen$Pages$pages = {
	bC: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Blog$page, $author$project$Gen$Model$Blog, $author$project$Gen$Msg$Blog),
	bD: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Blog$Slug_$page, $author$project$Gen$Model$Blog__Slug_, $author$project$Gen$Msg$Blog__Slug_),
	bL: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Embed$page, $author$project$Gen$Model$Embed, $author$project$Gen$Msg$Embed),
	bO: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Home_$page, $author$project$Gen$Model$Home_, $author$project$Gen$Msg$Home_),
	bZ: A3($author$project$Gen$Pages$bundle, $author$project$Pages$NotFound$page, $author$project$Gen$Model$NotFound, $author$project$Gen$Msg$NotFound),
	b5: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Projects$page, $author$project$Gen$Model$Projects, $author$project$Gen$Msg$Projects),
	b6: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Projects$Id_$page, $author$project$Gen$Model$Projects__Id_, $author$project$Gen$Msg$Projects__Id_),
	b7: A3($author$project$Gen$Pages$bundle, $author$project$Pages$Projects$New$page, $author$project$Gen$Model$Projects__New, $author$project$Gen$Msg$Projects__New),
	b8: A3($author$project$Gen$Pages$bundle, $author$project$Pages$PwaStart$page, $author$project$Gen$Model$PwaStart, $author$project$Gen$Msg$PwaStart)
};
var $author$project$Gen$Pages$init = function (route) {
	switch (route.$) {
		case 0:
			return $author$project$Gen$Pages$pages.bC.Y(0);
		case 1:
			return $author$project$Gen$Pages$pages.bL.Y(0);
		case 2:
			return $author$project$Gen$Pages$pages.bO.Y(0);
		case 3:
			return $author$project$Gen$Pages$pages.bZ.Y(0);
		case 4:
			return $author$project$Gen$Pages$pages.b5.Y(0);
		case 5:
			return $author$project$Gen$Pages$pages.b8.Y(0);
		case 6:
			var params = route.a;
			return $author$project$Gen$Pages$pages.bD.Y(params);
		case 7:
			var params = route.a;
			return $author$project$Gen$Pages$pages.b6.Y(params);
		default:
			return $author$project$Gen$Pages$pages.b7.Y(0);
	}
};
var $author$project$Shared$ZoneChanged = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Name = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$here = _Time_here(0);
var $author$project$Shared$init = F2(
	function (_v0, flags) {
		return _Utils_Tuple2(
			{
				ii: $elm$time$Time$millisToPosix(flags.ii),
				jL: $elm$time$Time$utc
			},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($elm$core$Task$perform, $author$project$Shared$ZoneChanged, $elm$time$Time$here)
					])));
	});
var $author$project$Effect$toCmd = F2(
	function (_v0, effect) {
		var fromSharedMsg = _v0.a;
		var fromPageMsg = _v0.b;
		switch (effect.$) {
			case 0:
				return $elm$core$Platform$Cmd$none;
			case 1:
				var cmd = effect.a;
				return A2($elm$core$Platform$Cmd$map, fromPageMsg, cmd);
			case 2:
				var msg = effect.a;
				return A2(
					$elm$core$Task$perform,
					fromSharedMsg,
					$elm$core$Task$succeed(msg));
			default:
				var list = effect.a;
				return $elm$core$Platform$Cmd$batch(
					A2(
						$elm$core$List$map,
						$author$project$Effect$toCmd(
							_Utils_Tuple2(fromSharedMsg, fromPageMsg)),
						list));
		}
	});
var $author$project$Main$init = F3(
	function (flags, url, key) {
		var _v0 = A2(
			$author$project$Shared$init,
			A3($author$project$Request$create, 0, url, key),
			flags);
		var shared = _v0.a;
		var sharedCmd = _v0.b;
		var _v1 = A4(
			$author$project$Gen$Pages$init,
			$author$project$Gen$Route$fromUrl(url),
			shared,
			url,
			key);
		var page = _v1.a;
		var effect = _v1.b;
		return _Utils_Tuple2(
			A4($author$project$Main$Model, url, key, shared, page),
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						A2($elm$core$Platform$Cmd$map, $author$project$Main$Shared, sharedCmd),
						A2(
						$author$project$Effect$toCmd,
						_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
						effect)
					])));
	});
var $author$project$Gen$Pages$subscriptions = function (model_) {
	switch (model_.$) {
		case 0:
			return F3(
				function (_v1, _v2, _v3) {
					return $elm$core$Platform$Sub$none;
				});
		case 1:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bC.ab, params, model);
		case 2:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bL.ab, params, model);
		case 3:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bO.ab, params, model);
		case 4:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bZ.ab, params, model);
		case 5:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b5.ab, params, model);
		case 6:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b8.ab, params, model);
		case 7:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bD.ab, params, model);
		case 8:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b6.ab, params, model);
		default:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b7.ab, params, model);
	}
};
var $author$project$Shared$TimeChanged = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {fS: processes, gb: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 1) {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.fS;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.gb);
		if (_v0.$ === 1) {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $author$project$Shared$subscriptions = F2(
	function (_v0, _v1) {
		return $elm$core$Platform$Sub$batch(
			_List_fromArray(
				[
					A2($elm$time$Time$every, 10 * 1000, $author$project$Shared$TimeChanged)
				]));
	});
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$Page,
				A4($author$project$Gen$Pages$subscriptions, model.iA, model.ai, model.jH, model.bU)),
				A2(
				$elm$core$Platform$Sub$map,
				$author$project$Main$Shared,
				A2(
					$author$project$Shared$subscriptions,
					A3($author$project$Request$create, 0, model.jH, model.bU),
					model.ai))
			]));
};
var $elm$browser$Browser$Navigation$load = _Browser_load;
var $elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 1) {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + $elm$core$String$fromInt(port_));
		}
	});
var $elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 1) {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var $elm$url$Url$toString = function (url) {
	var http = function () {
		var _v0 = url.fT;
		if (!_v0) {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		$elm$url$Url$addPrefixed,
		'#',
		url.hl,
		A3(
			$elm$url$Url$addPrefixed,
			'?',
			url.fU,
			_Utils_ap(
				A2(
					$elm$url$Url$addPort,
					url.fO,
					_Utils_ap(http, url.fk)),
				url.fM)));
};
var $author$project$Effect$none = $author$project$Effect$None;
var $author$project$Gen$Pages$update = F2(
	function (msg_, model_) {
		var _v0 = _Utils_Tuple2(msg_, model_);
		_v0$9:
		while (true) {
			switch (_v0.a.$) {
				case 0:
					if (_v0.b.$ === 1) {
						var msg = _v0.a.a;
						var _v1 = _v0.b;
						var params = _v1.a;
						var model = _v1.b;
						return A3($author$project$Gen$Pages$pages.bC.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				case 1:
					if (_v0.b.$ === 2) {
						var msg = _v0.a.a;
						var _v2 = _v0.b;
						var params = _v2.a;
						var model = _v2.b;
						return A3($author$project$Gen$Pages$pages.bL.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				case 2:
					if (_v0.b.$ === 3) {
						var msg = _v0.a.a;
						var _v3 = _v0.b;
						var params = _v3.a;
						var model = _v3.b;
						return A3($author$project$Gen$Pages$pages.bO.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				case 3:
					if (_v0.b.$ === 4) {
						var msg = _v0.a.a;
						var _v4 = _v0.b;
						var params = _v4.a;
						var model = _v4.b;
						return A3($author$project$Gen$Pages$pages.bZ.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				case 4:
					if (_v0.b.$ === 5) {
						var msg = _v0.a.a;
						var _v5 = _v0.b;
						var params = _v5.a;
						var model = _v5.b;
						return A3($author$project$Gen$Pages$pages.b5.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				case 5:
					if (_v0.b.$ === 6) {
						var msg = _v0.a.a;
						var _v6 = _v0.b;
						var params = _v6.a;
						var model = _v6.b;
						return A3($author$project$Gen$Pages$pages.b8.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				case 6:
					if (_v0.b.$ === 7) {
						var msg = _v0.a.a;
						var _v7 = _v0.b;
						var params = _v7.a;
						var model = _v7.b;
						return A3($author$project$Gen$Pages$pages.bD.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				case 7:
					if (_v0.b.$ === 8) {
						var msg = _v0.a.a;
						var _v8 = _v0.b;
						var params = _v8.a;
						var model = _v8.b;
						return A3($author$project$Gen$Pages$pages.b6.ac, params, msg, model);
					} else {
						break _v0$9;
					}
				default:
					if (_v0.b.$ === 9) {
						var msg = _v0.a.a;
						var _v9 = _v0.b;
						var params = _v9.a;
						var model = _v9.b;
						return A3($author$project$Gen$Pages$pages.b7.ac, params, msg, model);
					} else {
						break _v0$9;
					}
			}
		}
		return F3(
			function (_v10, _v11, _v12) {
				return _Utils_Tuple2(model_, $author$project$Effect$none);
			});
	});
var $author$project$Shared$update = F3(
	function (_v0, msg, model) {
		if (!msg.$) {
			var zone = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{jL: zone}),
				$elm$core$Platform$Cmd$none);
		} else {
			var time = msg.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{ii: time}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 1:
				if (!msg.a.$) {
					var url = msg.a.a;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$browser$Browser$Navigation$pushUrl,
							model.bU,
							$elm$url$Url$toString(url)));
				} else {
					var url = msg.a.a;
					return _Utils_Tuple2(
						model,
						$elm$browser$Browser$Navigation$load(url));
				}
			case 0:
				var url = msg.a;
				if (!_Utils_eq(url.fM, model.jH.fM)) {
					var _v1 = A4(
						$author$project$Gen$Pages$init,
						$author$project$Gen$Route$fromUrl(url),
						model.ai,
						url,
						model.bU);
					var page = _v1.a;
					var effect = _v1.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{iA: page, jH: url}),
						A2(
							$author$project$Effect$toCmd,
							_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
							effect));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{jH: url}),
						$elm$core$Platform$Cmd$none);
				}
			case 2:
				var sharedMsg = msg.a;
				var _v2 = A3(
					$author$project$Shared$update,
					A3($author$project$Request$create, 0, model.jH, model.bU),
					sharedMsg,
					model.ai);
				var shared = _v2.a;
				var sharedCmd = _v2.b;
				var _v3 = A4(
					$author$project$Gen$Pages$init,
					$author$project$Gen$Route$fromUrl(model.jH),
					shared,
					model.jH,
					model.bU);
				var page = _v3.a;
				var effect = _v3.b;
				return _Utils_eq(page, $author$project$Gen$Model$Redirecting_) ? _Utils_Tuple2(
					_Utils_update(
						model,
						{iA: page, ai: shared}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								A2($elm$core$Platform$Cmd$map, $author$project$Main$Shared, sharedCmd),
								A2(
								$author$project$Effect$toCmd,
								_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
								effect)
							]))) : _Utils_Tuple2(
					_Utils_update(
						model,
						{ai: shared}),
					A2($elm$core$Platform$Cmd$map, $author$project$Main$Shared, sharedCmd));
			default:
				var pageMsg = msg.a;
				var _v4 = A5($author$project$Gen$Pages$update, pageMsg, model.iA, model.ai, model.jH, model.bU);
				var page = _v4.a;
				var effect = _v4.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{iA: page}),
					A2(
						$author$project$Effect$toCmd,
						_Utils_Tuple2($author$project$Main$Shared, $author$project$Main$Page),
						effect));
		}
	});
var $author$project$View$toBrowserDocument = function (view) {
	return {eV: view.eV, aj: view.aj};
};
var $author$project$Gen$Pages$view = function (model_) {
	switch (model_.$) {
		case 0:
			return F3(
				function (_v1, _v2, _v3) {
					return $author$project$View$none;
				});
		case 1:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bC.eQ, params, model);
		case 2:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bL.eQ, params, model);
		case 3:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bO.eQ, params, model);
		case 4:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bZ.eQ, params, model);
		case 5:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b5.eQ, params, model);
		case 6:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b8.eQ, params, model);
		case 7:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.bD.eQ, params, model);
		case 8:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b6.eQ, params, model);
		default:
			var params = model_.a;
			var model = model_.b;
			return A2($author$project$Gen$Pages$pages.b7.eQ, params, model);
	}
};
var $author$project$Main$view = function (model) {
	return $author$project$View$toBrowserDocument(
		A2(
			$author$project$View$map,
			$author$project$Main$Page,
			A4($author$project$Gen$Pages$view, model.iA, model.ai, model.jH, model.bU)));
};
var $author$project$Main$main = $elm$browser$Browser$application(
	{Y: $author$project$Main$init, is: $author$project$Main$ChangedUrl, it: $author$project$Main$ClickedLink, ab: $author$project$Main$subscriptions, ac: $author$project$Main$update, eQ: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (now) {
			return $elm$json$Json$Decode$succeed(
				{ii: now});
		},
		A2($elm$json$Json$Decode$field, 'now', $elm$json$Json$Decode$int)))(0)}});}(this));